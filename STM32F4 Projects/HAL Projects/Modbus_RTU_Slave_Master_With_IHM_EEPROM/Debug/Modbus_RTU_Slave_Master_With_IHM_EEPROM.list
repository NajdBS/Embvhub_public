
Modbus_RTU_Slave_Master_With_IHM_EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008514  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa8  080086a4  080086a4  000096a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800914c  0800914c  0000b16c  2**0
                  CONTENTS
  4 .ARM          00000008  0800914c  0800914c  0000a14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009154  08009154  0000b16c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009154  08009154  0000a154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009158  08009158  0000a158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  0800915c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b16c  2**0
                  CONTENTS
 10 .bss          000007e4  2000016c  2000016c  0000b16c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000950  20000950  0000b16c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b16c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001371b  00000000  00000000  0000b19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029e7  00000000  00000000  0001e8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  000212a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e01  00000000  00000000  00022458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023637  00000000  00000000  00023259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b27  00000000  00000000  00046890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db244  00000000  00000000  0005d3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001385fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005104  00000000  00000000  00138640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  0013d744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800868c 	.word	0x0800868c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000170 	.word	0x20000170
 80001cc:	0800868c 	.word	0x0800868c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	460a      	mov	r2, r1
 800057a:	80fb      	strh	r3, [r7, #6]
 800057c:	4613      	mov	r3, r2
 800057e:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 8000580:	88fa      	ldrh	r2, [r7, #6]
 8000582:	88bb      	ldrh	r3, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	2b3f      	cmp	r3, #63	@ 0x3f
 8000588:	dc01      	bgt.n	800058e <bytestowrite+0x1e>
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	e003      	b.n	8000596 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 800058e:	88bb      	ldrh	r3, [r7, #4]
 8000590:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000594:	b29b      	uxth	r3, r3
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08e      	sub	sp, #56	@ 0x38
 80005a8:	af04      	add	r7, sp, #16
 80005aa:	60ba      	str	r2, [r7, #8]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4603      	mov	r3, r0
 80005b0:	81fb      	strh	r3, [r7, #14]
 80005b2:	460b      	mov	r3, r1
 80005b4:	81bb      	strh	r3, [r7, #12]
 80005b6:	4613      	mov	r3, r2
 80005b8:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 80005ba:	2306      	movs	r3, #6
 80005bc:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 80005be:	89fb      	ldrh	r3, [r7, #14]
 80005c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80005c2:	88fa      	ldrh	r2, [r7, #6]
 80005c4:	89bb      	ldrh	r3, [r7, #12]
 80005c6:	4413      	add	r3, r2
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	da00      	bge.n	80005ce <EEPROM_Write+0x2a>
 80005cc:	333f      	adds	r3, #63	@ 0x3f
 80005ce:	119b      	asrs	r3, r3, #6
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	4413      	add	r3, r2
 80005d6:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80005d8:	8b7a      	ldrh	r2, [r7, #26]
 80005da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	b29b      	uxth	r3, r3
 80005e0:	3301      	adds	r3, #1
 80005e2:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	84bb      	strh	r3, [r7, #36]	@ 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	623b      	str	r3, [r7, #32]
 80005ec:	e034      	b.n	8000658 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80005ee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	fa02 f303 	lsl.w	r3, r2, r3
 80005f6:	b21a      	sxth	r2, r3
 80005f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	b21b      	sxth	r3, r3
 8000600:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8000602:	89ba      	ldrh	r2, [r7, #12]
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	4611      	mov	r1, r2
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffb1 	bl	8000570 <bytestowrite>
 800060e:	4603      	mov	r3, r0
 8000610:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000612:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	4413      	add	r3, r2
 8000618:	8af9      	ldrh	r1, [r7, #22]
 800061a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800061e:	9202      	str	r2, [sp, #8]
 8000620:	8aba      	ldrh	r2, [r7, #20]
 8000622:	9201      	str	r2, [sp, #4]
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2302      	movs	r3, #2
 8000628:	460a      	mov	r2, r1
 800062a:	21a0      	movs	r1, #160	@ 0xa0
 800062c:	480f      	ldr	r0, [pc, #60]	@ (800066c <EEPROM_Write+0xc8>)
 800062e:	f003 ff95 	bl	800455c <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000632:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000634:	3301      	adds	r3, #1
 8000636:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8000638:	2300      	movs	r3, #0
 800063a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 800063c:	88fa      	ldrh	r2, [r7, #6]
 800063e:	8abb      	ldrh	r3, [r7, #20]
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000644:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000646:	8abb      	ldrh	r3, [r7, #20]
 8000648:	4413      	add	r3, r2
 800064a:	84bb      	strh	r3, [r7, #36]	@ 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 800064c:	2005      	movs	r0, #5
 800064e:	f002 fd7d 	bl	800314c <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8000652:	6a3b      	ldr	r3, [r7, #32]
 8000654:	3301      	adds	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
 8000658:	8b3b      	ldrh	r3, [r7, #24]
 800065a:	6a3a      	ldr	r2, [r7, #32]
 800065c:	429a      	cmp	r2, r3
 800065e:	dbc6      	blt.n	80005ee <EEPROM_Write+0x4a>
	}
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3728      	adds	r7, #40	@ 0x28
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200001d0 	.word	0x200001d0

08000670 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08e      	sub	sp, #56	@ 0x38
 8000674:	af04      	add	r7, sp, #16
 8000676:	60ba      	str	r2, [r7, #8]
 8000678:	461a      	mov	r2, r3
 800067a:	4603      	mov	r3, r0
 800067c:	81fb      	strh	r3, [r7, #14]
 800067e:	460b      	mov	r3, r1
 8000680:	81bb      	strh	r3, [r7, #12]
 8000682:	4613      	mov	r3, r2
 8000684:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000686:	2306      	movs	r3, #6
 8000688:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 800068a:	89fb      	ldrh	r3, [r7, #14]
 800068c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800068e:	88fa      	ldrh	r2, [r7, #6]
 8000690:	89bb      	ldrh	r3, [r7, #12]
 8000692:	4413      	add	r3, r2
 8000694:	2b00      	cmp	r3, #0
 8000696:	da00      	bge.n	800069a <EEPROM_Read+0x2a>
 8000698:	333f      	adds	r3, #63	@ 0x3f
 800069a:	119b      	asrs	r3, r3, #6
 800069c:	b29a      	uxth	r2, r3
 800069e:	89fb      	ldrh	r3, [r7, #14]
 80006a0:	4413      	add	r3, r2
 80006a2:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 80006a4:	8b7a      	ldrh	r2, [r7, #26]
 80006a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	3301      	adds	r3, #1
 80006ae:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	84bb      	strh	r3, [r7, #36]	@ 0x24

	for (int i=0; i<numofpages; i++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
 80006b8:	e031      	b.n	800071e <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80006ba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	fa02 f303 	lsl.w	r3, r2, r3
 80006c2:	b21a      	sxth	r2, r3
 80006c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 80006ce:	89ba      	ldrh	r2, [r7, #12]
 80006d0:	88fb      	ldrh	r3, [r7, #6]
 80006d2:	4611      	mov	r1, r2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff4b 	bl	8000570 <bytestowrite>
 80006da:	4603      	mov	r3, r0
 80006dc:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 80006de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80006e0:	68ba      	ldr	r2, [r7, #8]
 80006e2:	4413      	add	r3, r2
 80006e4:	8af9      	ldrh	r1, [r7, #22]
 80006e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006ea:	9202      	str	r2, [sp, #8]
 80006ec:	8aba      	ldrh	r2, [r7, #20]
 80006ee:	9201      	str	r2, [sp, #4]
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2302      	movs	r3, #2
 80006f4:	460a      	mov	r2, r1
 80006f6:	21a0      	movs	r1, #160	@ 0xa0
 80006f8:	480d      	ldr	r0, [pc, #52]	@ (8000730 <EEPROM_Read+0xc0>)
 80006fa:	f004 f829 	bl	8004750 <HAL_I2C_Mem_Read>
		startPage += 1;
 80006fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000700:	3301      	adds	r3, #1
 8000702:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;
 8000704:	2300      	movs	r3, #0
 8000706:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8000708:	88fa      	ldrh	r2, [r7, #6]
 800070a:	8abb      	ldrh	r3, [r7, #20]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000710:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000712:	8abb      	ldrh	r3, [r7, #20]
 8000714:	4413      	add	r3, r2
 8000716:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i=0; i<numofpages; i++)
 8000718:	6a3b      	ldr	r3, [r7, #32]
 800071a:	3301      	adds	r3, #1
 800071c:	623b      	str	r3, [r7, #32]
 800071e:	8b3b      	ldrh	r3, [r7, #24]
 8000720:	6a3a      	ldr	r2, [r7, #32]
 8000722:	429a      	cmp	r2, r3
 8000724:	dbc9      	blt.n	80006ba <EEPROM_Read+0x4a>
	}
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	@ 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200001d0 	.word	0x200001d0

08000734 <EEPROM_Write_UART_Params>:

	HAL_Delay (5);  // write cycle delay 
}


void EEPROM_Write_UART_Params(uint8_t page, uint16_t address, UART_Params* params) {
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	603a      	str	r2, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	460b      	mov	r3, r1
 8000742:	80bb      	strh	r3, [r7, #4]
    // Copie de la structure dans un tableau de bytes
    memcpy(uartParamsData, params, sizeof(UART_Params));
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <EEPROM_Write_UART_Params+0x3c>)
 8000746:	683a      	ldr	r2, [r7, #0]
 8000748:	6814      	ldr	r4, [r2, #0]
 800074a:	6850      	ldr	r0, [r2, #4]
 800074c:	6891      	ldr	r1, [r2, #8]
 800074e:	68d2      	ldr	r2, [r2, #12]
 8000750:	601c      	str	r4, [r3, #0]
 8000752:	6058      	str	r0, [r3, #4]
 8000754:	6099      	str	r1, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
    // Écrire dans l'EEPROM
    EEPROM_Write(page, address, uartParamsData, sizeof(UART_Params));
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	b298      	uxth	r0, r3
 800075c:	88b9      	ldrh	r1, [r7, #4]
 800075e:	2310      	movs	r3, #16
 8000760:	4a03      	ldr	r2, [pc, #12]	@ (8000770 <EEPROM_Write_UART_Params+0x3c>)
 8000762:	f7ff ff1f 	bl	80005a4 <EEPROM_Write>
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bd90      	pop	{r4, r7, pc}
 800076e:	bf00      	nop
 8000770:	200007ec 	.word	0x200007ec

08000774 <EEPROM_Read_UART_Params>:

void EEPROM_Read_UART_Params(uint8_t page, uint16_t address, UART_Params* params) {
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	603a      	str	r2, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	460b      	mov	r3, r1
 8000782:	80bb      	strh	r3, [r7, #4]
    // Lire les données de l'EEPROM
    EEPROM_Read(page, address, uartParamsData, sizeof(UART_Params));
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	b298      	uxth	r0, r3
 8000788:	88b9      	ldrh	r1, [r7, #4]
 800078a:	2310      	movs	r3, #16
 800078c:	4a08      	ldr	r2, [pc, #32]	@ (80007b0 <EEPROM_Read_UART_Params+0x3c>)
 800078e:	f7ff ff6f 	bl	8000670 <EEPROM_Read>
    // Copier les données lues dans la structure
    memcpy(params, uartParamsData, sizeof(UART_Params));
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	4a06      	ldr	r2, [pc, #24]	@ (80007b0 <EEPROM_Read_UART_Params+0x3c>)
 8000796:	6814      	ldr	r4, [r2, #0]
 8000798:	6850      	ldr	r0, [r2, #4]
 800079a:	6891      	ldr	r1, [r2, #8]
 800079c:	68d2      	ldr	r2, [r2, #12]
 800079e:	601c      	str	r4, [r3, #0]
 80007a0:	6058      	str	r0, [r3, #4]
 80007a2:	6099      	str	r1, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd90      	pop	{r4, r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200007ec 	.word	0x200007ec

080007b4 <HAL_UARTEx_RxEventCallback>:
  * @brief  The application entry point.
  * @retval int
  */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]
	if (RxData[0] == SLAVE_ID)
 80007c0:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <HAL_UARTEx_RxEventCallback+0xb0>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d143      	bne.n	8000850 <HAL_UARTEx_RxEventCallback+0x9c>
	{
		switch (RxData[1]){
 80007c8:	4b26      	ldr	r3, [pc, #152]	@ (8000864 <HAL_UARTEx_RxEventCallback+0xb0>)
 80007ca:	785b      	ldrb	r3, [r3, #1]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	2b0f      	cmp	r3, #15
 80007d0:	d83a      	bhi.n	8000848 <HAL_UARTEx_RxEventCallback+0x94>
 80007d2:	a201      	add	r2, pc, #4	@ (adr r2, 80007d8 <HAL_UARTEx_RxEventCallback+0x24>)
 80007d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d8:	08000825 	.word	0x08000825
 80007dc:	0800082b 	.word	0x0800082b
 80007e0:	08000819 	.word	0x08000819
 80007e4:	0800081f 	.word	0x0800081f
 80007e8:	0800083d 	.word	0x0800083d
 80007ec:	08000831 	.word	0x08000831
 80007f0:	08000849 	.word	0x08000849
 80007f4:	08000849 	.word	0x08000849
 80007f8:	08000849 	.word	0x08000849
 80007fc:	08000849 	.word	0x08000849
 8000800:	08000849 	.word	0x08000849
 8000804:	08000849 	.word	0x08000849
 8000808:	08000849 	.word	0x08000849
 800080c:	08000849 	.word	0x08000849
 8000810:	08000843 	.word	0x08000843
 8000814:	08000837 	.word	0x08000837
		case 0x03:
			readHoldingRegs();
 8000818:	f001 fa3e 	bl	8001c98 <readHoldingRegs>
			break;
 800081c:	e018      	b.n	8000850 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x04:
			readInputRegs();
 800081e:	f001 faad 	bl	8001d7c <readInputRegs>
			break;
 8000822:	e015      	b.n	8000850 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x01:
			readCoils();
 8000824:	f001 fb1c 	bl	8001e60 <readCoils>
			break;
 8000828:	e012      	b.n	8000850 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x02:
			readInputs();
 800082a:	f001 fbc7 	bl	8001fbc <readInputs>
			break;
 800082e:	e00f      	b.n	8000850 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x06:
			writeSingleReg();
 8000830:	f001 fcec 	bl	800220c <writeSingleReg>
			break;
 8000834:	e00c      	b.n	8000850 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x10:
			writeHoldingRegs();
 8000836:	f001 fc6f 	bl	8002118 <writeHoldingRegs>
			break;
 800083a:	e009      	b.n	8000850 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x05:
			writeSingleCoil();
 800083c:	f001 fd30 	bl	80022a0 <writeSingleCoil>
			break;
 8000840:	e006      	b.n	8000850 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x0F:
			writeMultiCoils();
 8000842:	f001 fda7 	bl	8002394 <writeMultiCoils>
			break;
 8000846:	e003      	b.n	8000850 <HAL_UARTEx_RxEventCallback+0x9c>
		default:
			modbusException(ILLEGAL_FUNCTION);
 8000848:	2001      	movs	r0, #1
 800084a:	f001 fa05 	bl	8001c58 <modbusException>
			break;
 800084e:	bf00      	nop
		}
	}

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData, 256);
 8000850:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000854:	4903      	ldr	r1, [pc, #12]	@ (8000864 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000856:	4804      	ldr	r0, [pc, #16]	@ (8000868 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000858:	f006 fa20 	bl	8006c9c <HAL_UARTEx_ReceiveToIdle_IT>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200003dc 	.word	0x200003dc
 8000868:	200002fc 	.word	0x200002fc

0800086c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	@ 0x30
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
        // Mise à jour des broches du Port D (sortie) depuis Coils_Database[0] et Coils_Database[1]
		uint8_t lower_byte_out = Coils_Database[0]; // PD0 à PD7
 8000874:	4b7a      	ldr	r3, [pc, #488]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	76fb      	strb	r3, [r7, #27]
        uint8_t upper_byte_out = Coils_Database[1]; // PD8 à PD15
 800087a:	4b79      	ldr	r3, [pc, #484]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800087c:	785b      	ldrb	r3, [r3, #1]
 800087e:	76bb      	strb	r3, [r7, #26]

        for (int i = 0; i < 8; i++) {
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000884:	e013      	b.n	80008ae <HAL_TIM_PeriodElapsedCallback+0x42>
            HAL_GPIO_WritePin(GPIOD, (1 << i), (lower_byte_out & (1 << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000886:	2201      	movs	r2, #1
 8000888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	b299      	uxth	r1, r3
 8000890:	7efa      	ldrb	r2, [r7, #27]
 8000892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000894:	fa42 f303 	asr.w	r3, r2, r3
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	461a      	mov	r2, r3
 80008a2:	4870      	ldr	r0, [pc, #448]	@ (8000a64 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80008a4:	f003 fcfc 	bl	80042a0 <HAL_GPIO_WritePin>
        for (int i = 0; i < 8; i++) {
 80008a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008aa:	3301      	adds	r3, #1
 80008ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008b0:	2b07      	cmp	r3, #7
 80008b2:	dde8      	ble.n	8000886 <HAL_TIM_PeriodElapsedCallback+0x1a>
        }

        for (int i = 0; i < 8; i++) {
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008b8:	e014      	b.n	80008e4 <HAL_TIM_PeriodElapsedCallback+0x78>
            HAL_GPIO_WritePin(GPIOD, (1 << (i + 8)), (upper_byte_out & (1 << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008bc:	3308      	adds	r3, #8
 80008be:	2201      	movs	r2, #1
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	b299      	uxth	r1, r3
 80008c6:	7eba      	ldrb	r2, [r7, #26]
 80008c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008ca:	fa42 f303 	asr.w	r3, r2, r3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	461a      	mov	r2, r3
 80008d8:	4862      	ldr	r0, [pc, #392]	@ (8000a64 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80008da:	f003 fce1 	bl	80042a0 <HAL_GPIO_WritePin>
        for (int i = 0; i < 8; i++) {
 80008de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008e0:	3301      	adds	r3, #1
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008e6:	2b07      	cmp	r3, #7
 80008e8:	dde7      	ble.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x4e>
        }

        // Lecture des broches du Port C (entrée) et mise à jour de Coils_Database[2] et Coils_Database[3]
        uint8_t lower_byte_in = 0; // PC0 à PC7
 80008ea:	2300      	movs	r3, #0
 80008ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        uint8_t upper_byte_in = 0; // PC8 à PC15
 80008f0:	2300      	movs	r3, #0
 80008f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

        for (int i = 0; i < 8; i++) {
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
 80008fa:	e019      	b.n	8000930 <HAL_TIM_PeriodElapsedCallback+0xc4>
            if (HAL_GPIO_ReadPin(GPIOC, (1 << i)) == GPIO_PIN_SET) {
 80008fc:	2201      	movs	r2, #1
 80008fe:	6a3b      	ldr	r3, [r7, #32]
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	b29b      	uxth	r3, r3
 8000906:	4619      	mov	r1, r3
 8000908:	4857      	ldr	r0, [pc, #348]	@ (8000a68 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800090a:	f003 fcb1 	bl	8004270 <HAL_GPIO_ReadPin>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	d10a      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0xbe>
                lower_byte_in |= (1 << i); // Ajouter 1 au bit correspondant
 8000914:	2201      	movs	r2, #1
 8000916:	6a3b      	ldr	r3, [r7, #32]
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	b25a      	sxtb	r2, r3
 800091e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000922:	4313      	orrs	r3, r2
 8000924:	b25b      	sxtb	r3, r3
 8000926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (int i = 0; i < 8; i++) {
 800092a:	6a3b      	ldr	r3, [r7, #32]
 800092c:	3301      	adds	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
 8000930:	6a3b      	ldr	r3, [r7, #32]
 8000932:	2b07      	cmp	r3, #7
 8000934:	dde2      	ble.n	80008fc <HAL_TIM_PeriodElapsedCallback+0x90>
            }
        }

        for (int i = 0; i < 8; i++) {
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	e01a      	b.n	8000972 <HAL_TIM_PeriodElapsedCallback+0x106>
            if (HAL_GPIO_ReadPin(GPIOC, (1 << (i + 8))) == GPIO_PIN_SET) {
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	3308      	adds	r3, #8
 8000940:	2201      	movs	r2, #1
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	b29b      	uxth	r3, r3
 8000948:	4619      	mov	r1, r3
 800094a:	4847      	ldr	r0, [pc, #284]	@ (8000a68 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800094c:	f003 fc90 	bl	8004270 <HAL_GPIO_ReadPin>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d10a      	bne.n	800096c <HAL_TIM_PeriodElapsedCallback+0x100>
                upper_byte_in |= (1 << i); // Ajouter 1 au bit correspondant
 8000956:	2201      	movs	r2, #1
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	b25a      	sxtb	r2, r3
 8000960:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8000964:	4313      	orrs	r3, r2
 8000966:	b25b      	sxtb	r3, r3
 8000968:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (int i = 0; i < 8; i++) {
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	3301      	adds	r3, #1
 8000970:	61fb      	str	r3, [r7, #28]
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	2b07      	cmp	r3, #7
 8000976:	dde1      	ble.n	800093c <HAL_TIM_PeriodElapsedCallback+0xd0>
            }
        }

        // Mise à jour de la base de données Coils
        Coils_Database[2] = lower_byte_in; // PC0 à PC7
 8000978:	4a39      	ldr	r2, [pc, #228]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800097a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800097e:	7093      	strb	r3, [r2, #2]
        Coils_Database[3] = upper_byte_in; // PC8 à PC15
 8000980:	4a37      	ldr	r2, [pc, #220]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000982:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000986:	70d3      	strb	r3, [r2, #3]
        Inputs_Database[0] = lower_byte_in; // PC0 à PC7 (même valeur que Coils_Database[2])
 8000988:	4a38      	ldr	r2, [pc, #224]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x200>)
 800098a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800098e:	7013      	strb	r3, [r2, #0]
        Inputs_Database[1] = upper_byte_in; // PC8 à PC15 (même valeur que Coils_Database[3])
 8000990:	4a36      	ldr	r2, [pc, #216]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000992:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000996:	7053      	strb	r3, [r2, #1]

        Update_Input_Registers();
 8000998:	f001 f90c 	bl	8001bb4 <Update_Input_Registers>
//Scenario  de test
       // Scenario 1: Lire l'état de PC0 et contrôler la LED sur PD0
        //une variable globale pour suivre si la LED a été allumée
        static uint8_t led_on = 0;

        if (Coils_Database[0] & 0x01) {
 800099c:	4b30      	ldr	r3, [pc, #192]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d016      	beq.n	80009d6 <HAL_TIM_PeriodElapsedCallback+0x16a>
            // Si la LED est allumée
            if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80009a8:	2101      	movs	r1, #1
 80009aa:	482f      	ldr	r0, [pc, #188]	@ (8000a68 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80009ac:	f003 fc60 	bl	8004270 <HAL_GPIO_ReadPin>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d129      	bne.n	8000a0a <HAL_TIM_PeriodElapsedCallback+0x19e>
                // Si le bouton est pressé, éteindre la LED
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET); // Éteindre la LED
 80009b6:	2200      	movs	r2, #0
 80009b8:	2101      	movs	r1, #1
 80009ba:	482a      	ldr	r0, [pc, #168]	@ (8000a64 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80009bc:	f003 fc70 	bl	80042a0 <HAL_GPIO_WritePin>
                Coils_Database[0] &= ~0x01; // Mettre à jour Coils_Database[0] pour éteindre la LED (mettre le premier bit à 0)
 80009c0:	4b27      	ldr	r3, [pc, #156]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	f023 0301 	bic.w	r3, r3, #1
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b25      	ldr	r3, [pc, #148]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80009cc:	701a      	strb	r2, [r3, #0]
                led_on = 1;  // Indiquer que la LED a été allumée au moins une fois
 80009ce:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
 80009d4:	e019      	b.n	8000a0a <HAL_TIM_PeriodElapsedCallback+0x19e>
            }
        } else if (led_on) { // Cette condition ne sera vraie que si la LED a été allumée une fois
 80009d6:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d015      	beq.n	8000a0a <HAL_TIM_PeriodElapsedCallback+0x19e>
            // Si la LED était éteinte dans Coils_Database[0] et si elle a été allumée au moins une fois
            if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET) {
 80009de:	2101      	movs	r1, #1
 80009e0:	4821      	ldr	r0, [pc, #132]	@ (8000a68 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80009e2:	f003 fc45 	bl	8004270 <HAL_GPIO_ReadPin>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d10e      	bne.n	8000a0a <HAL_TIM_PeriodElapsedCallback+0x19e>
                // Rallumer la LED
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2101      	movs	r1, #1
 80009f0:	481c      	ldr	r0, [pc, #112]	@ (8000a64 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80009f2:	f003 fc55 	bl	80042a0 <HAL_GPIO_WritePin>
                Coils_Database[0] |= 0x01; // Mettre à jour Coils_Database[0] pour allumer la LED (mettre le premier bit à 1)
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000a02:	701a      	strb	r2, [r3, #0]
                led_on = 0; // Réinitialiser le flag après avoir rallumé la LED
 8000a04:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
        }


        // Scenario 2: Ajuster la luminosité de la LED sur PD1 en fonction du potentiomètre
        // Utiliser la valeur du potentiomètre pour contrôler la luminosité de la LED via PWM PA5
           uint16_t pot_value = Holding_Registers_Database[0]; // Valeur du potentiomètre stockée dans le Holding registre
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	833b      	strh	r3, [r7, #24]
           uint32_t pwm_duty_cycle = (pot_value * 100) / 4095; // Convertir la valeur du potentiomètre en pourcentage (12 bits = 0 à 4095)
 8000a10:	8b3b      	ldrh	r3, [r7, #24]
 8000a12:	2264      	movs	r2, #100	@ 0x64
 8000a14:	fb02 f303 	mul.w	r3, r2, r3
 8000a18:	4a17      	ldr	r2, [pc, #92]	@ (8000a78 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000a1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a1e:	441a      	add	r2, r3
 8000a20:	12d2      	asrs	r2, r2, #11
 8000a22:	17db      	asrs	r3, r3, #31
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	617b      	str	r3, [r7, #20]

        // Appliquer le duty cycle PWM à la LED sur PA5 (par exemple via TIM1 PWM)
           __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_duty_cycle); // Appliquer le PWM à la LED sur PA5
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	635a      	str	r2, [r3, #52]	@ 0x34

          ////////////////////////////////////////////////////////////////////////////////

           uint16_t pot_value2 = Holding_Registers_Database[2]; // Valeur du potentiomètre stockée dans le Holding registre
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000a32:	889b      	ldrh	r3, [r3, #4]
 8000a34:	827b      	strh	r3, [r7, #18]
           uint32_t pwm_duty_cycle2 = (pot_value2 * 100) / 4095; // Convertir la valeur du potentiomètre en pourcentage (12 bits = 0 à 4095)
 8000a36:	8a7b      	ldrh	r3, [r7, #18]
 8000a38:	2264      	movs	r2, #100	@ 0x64
 8000a3a:	fb02 f303 	mul.w	r3, r2, r3
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a78 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000a40:	fb82 1203 	smull	r1, r2, r2, r3
 8000a44:	441a      	add	r2, r3
 8000a46:	12d2      	asrs	r2, r2, #11
 8000a48:	17db      	asrs	r3, r3, #31
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	60fb      	str	r3, [r7, #12]

        // Appliquer le duty cycle PWM à la LED sur PA6 (par exemple via TIM3 ch1 PWM)
           __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_duty_cycle2); // Appliquer le PWM à la LED sur PA6
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8000a56:	bf00      	nop
 8000a58:	3730      	adds	r7, #48	@ 0x30
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000d8 	.word	0x200000d8
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	200000f4 	.word	0x200000f4
 8000a70:	200007fc 	.word	0x200007fc
 8000a74:	20000010 	.word	0x20000010
 8000a78:	80080081 	.word	0x80080081
 8000a7c:	20000224 	.word	0x20000224
 8000a80:	2000026c 	.word	0x2000026c

08000a84 <main>:

int main(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8a:	f002 faed 	bl	8003068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8e:	f000 fdbf 	bl	8001610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a92:	f000 fff1 	bl	8001a78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a96:	f000 ff9b 	bl	80019d0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a9a:	f000 ffc3 	bl	8001a24 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000a9e:	f000 ff61 	bl	8001964 <MX_TIM6_Init>
  MX_ADC1_Init();
 8000aa2:	f000 fe1f 	bl	80016e4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000aa6:	f000 feab 	bl	8001800 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000aaa:	f000 fe7b 	bl	80017a4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000aae:	f000 feff 	bl	80018b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6); // Démarrer le timer en mode interruption
 8000ab2:	4816      	ldr	r0, [pc, #88]	@ (8000b0c <main+0x88>)
 8000ab4:	f005 f8da 	bl	8005c6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4815      	ldr	r0, [pc, #84]	@ (8000b10 <main+0x8c>)
 8000abc:	f005 f996 	bl	8005dec <HAL_TIM_PWM_Start>
  //HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData, 256);

  // Lire les paramètres UART au redémarrage
  EEPROM_Read_UART_Params(5, 0, &uartParams);
 8000ac0:	4a14      	ldr	r2, [pc, #80]	@ (8000b14 <main+0x90>)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2005      	movs	r0, #5
 8000ac6:	f7ff fe55 	bl	8000774 <EEPROM_Read_UART_Params>
  ConfigureUART2();
 8000aca:	f000 faa5 	bl	8001018 <ConfigureUART2>
  // Afficher le menu initial
  ShowMenu();
 8000ace:	f000 f82d 	bl	8000b2c <ShowMenu>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (mode == 0)
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <main+0x94>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d105      	bne.n	8000ae6 <main+0x62>
	  	  {
	 	  HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData, 256);
 8000ada:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ade:	490f      	ldr	r1, [pc, #60]	@ (8000b1c <main+0x98>)
 8000ae0:	480f      	ldr	r0, [pc, #60]	@ (8000b20 <main+0x9c>)
 8000ae2:	f006 f8db 	bl	8006c9c <HAL_UARTEx_ReceiveToIdle_IT>
	 	  }
	  if (HAL_UART_Receive(&huart3, rx_buffer, 1, HAL_MAX_DELAY) == HAL_OK)
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	2201      	movs	r2, #1
 8000aec:	490d      	ldr	r1, [pc, #52]	@ (8000b24 <main+0xa0>)
 8000aee:	480e      	ldr	r0, [pc, #56]	@ (8000b28 <main+0xa4>)
 8000af0:	f006 f83d 	bl	8006b6e <HAL_UART_Receive>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1eb      	bne.n	8000ad2 <main+0x4e>
	  	  {
	 	  char option = rx_buffer[0];
 8000afa:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <main+0xa0>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
	 	  ProcessOption(option); // Traiter l'option choisie
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f82c 	bl	8000b60 <ProcessOption>
	  if (mode == 0)
 8000b08:	e7e3      	b.n	8000ad2 <main+0x4e>
 8000b0a:	bf00      	nop
 8000b0c:	200002b4 	.word	0x200002b4
 8000b10:	20000224 	.word	0x20000224
 8000b14:	20000000 	.word	0x20000000
 8000b18:	200007e8 	.word	0x200007e8
 8000b1c:	200003dc 	.word	0x200003dc
 8000b20:	200002fc 	.word	0x200002fc
 8000b24:	200005dc 	.word	0x200005dc
 8000b28:	20000344 	.word	0x20000344

08000b2c <ShowMenu>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
// Afficher le menu
void ShowMenu(void) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
    sprintf((char *)tx_buffer,
 8000b30:	4908      	ldr	r1, [pc, #32]	@ (8000b54 <ShowMenu+0x28>)
 8000b32:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <ShowMenu+0x2c>)
 8000b34:	f007 f90a 	bl	8007d4c <siprintf>
    	"6: Menu Modbus Master\r\n"
    	"\n"
    	"===========================\r\n"
    	"\n"
        "Entrez votre choix:");
    HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000b38:	4807      	ldr	r0, [pc, #28]	@ (8000b58 <ShowMenu+0x2c>)
 8000b3a:	f7ff fb49 	bl	80001d0 <strlen>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	4904      	ldr	r1, [pc, #16]	@ (8000b58 <ShowMenu+0x2c>)
 8000b48:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <ShowMenu+0x30>)
 8000b4a:	f005 ff85 	bl	8006a58 <HAL_UART_Transmit>
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	080086a4 	.word	0x080086a4
 8000b58:	200005e0 	.word	0x200005e0
 8000b5c:	20000344 	.word	0x20000344

08000b60 <ProcessOption>:

// Traiter une option utilisateur
void ProcessOption(char option) {
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
    switch (option) {
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	3b30      	subs	r3, #48	@ 0x30
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	f200 821e 	bhi.w	8000fb0 <ProcessOption+0x450>
 8000b74:	a201      	add	r2, pc, #4	@ (adr r2, 8000b7c <ProcessOption+0x1c>)
 8000b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7a:	bf00      	nop
 8000b7c:	08000b99 	.word	0x08000b99
 8000b80:	08000b9f 	.word	0x08000b9f
 8000b84:	08000c4f 	.word	0x08000c4f
 8000b88:	08000d81 	.word	0x08000d81
 8000b8c:	08000dff 	.word	0x08000dff
 8000b90:	08000f01 	.word	0x08000f01
 8000b94:	08000f7f 	.word	0x08000f7f
        case '0': // Rafraichir le menu
               ShowMenu();
 8000b98:	f7ff ffc8 	bl	8000b2c <ShowMenu>
               break;
 8000b9c:	e21a      	b.n	8000fd4 <ProcessOption+0x474>
            	"\n"
                "\r\nOptions Mode:\r\n"
                "0: Mode Slave\r\n"
                "1: Mode Master\r\n"
            	"Votre choix actuel : %s\r\n"
            	"Entrez votre choix: ", (mode == 0) ? "Slave" : "Master");
 8000b9e:	4b9e      	ldr	r3, [pc, #632]	@ (8000e18 <ProcessOption+0x2b8>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
            sprintf((char *)tx_buffer,
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <ProcessOption+0x4a>
 8000ba6:	4b9d      	ldr	r3, [pc, #628]	@ (8000e1c <ProcessOption+0x2bc>)
 8000ba8:	e000      	b.n	8000bac <ProcessOption+0x4c>
 8000baa:	4b9d      	ldr	r3, [pc, #628]	@ (8000e20 <ProcessOption+0x2c0>)
 8000bac:	461a      	mov	r2, r3
 8000bae:	499d      	ldr	r1, [pc, #628]	@ (8000e24 <ProcessOption+0x2c4>)
 8000bb0:	489d      	ldr	r0, [pc, #628]	@ (8000e28 <ProcessOption+0x2c8>)
 8000bb2:	f007 f8cb 	bl	8007d4c <siprintf>
            HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000bb6:	489c      	ldr	r0, [pc, #624]	@ (8000e28 <ProcessOption+0x2c8>)
 8000bb8:	f7ff fb0a 	bl	80001d0 <strlen>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc4:	4998      	ldr	r1, [pc, #608]	@ (8000e28 <ProcessOption+0x2c8>)
 8000bc6:	4899      	ldr	r0, [pc, #612]	@ (8000e2c <ProcessOption+0x2cc>)
 8000bc8:	f005 ff46 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, rx_buffer, 1, HAL_MAX_DELAY);
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4997      	ldr	r1, [pc, #604]	@ (8000e30 <ProcessOption+0x2d0>)
 8000bd4:	4895      	ldr	r0, [pc, #596]	@ (8000e2c <ProcessOption+0x2cc>)
 8000bd6:	f005 ffca 	bl	8006b6e <HAL_UART_Receive>

            if (rx_buffer[0] == '0') {
 8000bda:	4b95      	ldr	r3, [pc, #596]	@ (8000e30 <ProcessOption+0x2d0>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b30      	cmp	r3, #48	@ 0x30
 8000be0:	d103      	bne.n	8000bea <ProcessOption+0x8a>
                mode = 0; // Slave
 8000be2:	4b8d      	ldr	r3, [pc, #564]	@ (8000e18 <ProcessOption+0x2b8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
 8000be8:	e017      	b.n	8000c1a <ProcessOption+0xba>
            } else if (rx_buffer[0] == '1') {
 8000bea:	4b91      	ldr	r3, [pc, #580]	@ (8000e30 <ProcessOption+0x2d0>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b31      	cmp	r3, #49	@ 0x31
 8000bf0:	d103      	bne.n	8000bfa <ProcessOption+0x9a>
                mode = 1; // Master
 8000bf2:	4b89      	ldr	r3, [pc, #548]	@ (8000e18 <ProcessOption+0x2b8>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e00f      	b.n	8000c1a <ProcessOption+0xba>
            } else {
                sprintf((char *)tx_buffer, "Option invalide.\r\n");
 8000bfa:	498e      	ldr	r1, [pc, #568]	@ (8000e34 <ProcessOption+0x2d4>)
 8000bfc:	488a      	ldr	r0, [pc, #552]	@ (8000e28 <ProcessOption+0x2c8>)
 8000bfe:	f007 f8a5 	bl	8007d4c <siprintf>
                HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000c02:	4889      	ldr	r0, [pc, #548]	@ (8000e28 <ProcessOption+0x2c8>)
 8000c04:	f7ff fae4 	bl	80001d0 <strlen>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	4985      	ldr	r1, [pc, #532]	@ (8000e28 <ProcessOption+0x2c8>)
 8000c12:	4886      	ldr	r0, [pc, #536]	@ (8000e2c <ProcessOption+0x2cc>)
 8000c14:	f005 ff20 	bl	8006a58 <HAL_UART_Transmit>
                return;
 8000c18:	e1de      	b.n	8000fd8 <ProcessOption+0x478>
            }
            sprintf((char *)tx_buffer, "Mode configure a %s.\r\n", (mode == 0) ? "Slave" : "Master");
 8000c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e18 <ProcessOption+0x2b8>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <ProcessOption+0xc6>
 8000c22:	4b7e      	ldr	r3, [pc, #504]	@ (8000e1c <ProcessOption+0x2bc>)
 8000c24:	e000      	b.n	8000c28 <ProcessOption+0xc8>
 8000c26:	4b7e      	ldr	r3, [pc, #504]	@ (8000e20 <ProcessOption+0x2c0>)
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4983      	ldr	r1, [pc, #524]	@ (8000e38 <ProcessOption+0x2d8>)
 8000c2c:	487e      	ldr	r0, [pc, #504]	@ (8000e28 <ProcessOption+0x2c8>)
 8000c2e:	f007 f88d 	bl	8007d4c <siprintf>
            HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000c32:	487d      	ldr	r0, [pc, #500]	@ (8000e28 <ProcessOption+0x2c8>)
 8000c34:	f7ff facc 	bl	80001d0 <strlen>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	4979      	ldr	r1, [pc, #484]	@ (8000e28 <ProcessOption+0x2c8>)
 8000c42:	487a      	ldr	r0, [pc, #488]	@ (8000e2c <ProcessOption+0x2cc>)
 8000c44:	f005 ff08 	bl	8006a58 <HAL_UART_Transmit>
            ShowMenu(); // Rafraîchir le menu après la configuration
 8000c48:	f7ff ff70 	bl	8000b2c <ShowMenu>
            break;
 8000c4c:	e1c2      	b.n	8000fd4 <ProcessOption+0x474>

        case '2': // Configuration Baudrate
            sprintf((char *)tx_buffer,
 8000c4e:	4b7b      	ldr	r3, [pc, #492]	@ (8000e3c <ProcessOption+0x2dc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	497a      	ldr	r1, [pc, #488]	@ (8000e40 <ProcessOption+0x2e0>)
 8000c56:	4874      	ldr	r0, [pc, #464]	@ (8000e28 <ProcessOption+0x2c8>)
 8000c58:	f007 f878 	bl	8007d4c <siprintf>
                "4: 57600\r\n"
                "5: 115200\r\n"
                "6: Saisir manuellement\r\n"
            	"Votre choix actuel : %lu\r\n"
            	"Entrez votre choix: ", uartParams.baudrate);
            HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000c5c:	4872      	ldr	r0, [pc, #456]	@ (8000e28 <ProcessOption+0x2c8>)
 8000c5e:	f7ff fab7 	bl	80001d0 <strlen>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	496f      	ldr	r1, [pc, #444]	@ (8000e28 <ProcessOption+0x2c8>)
 8000c6c:	486f      	ldr	r0, [pc, #444]	@ (8000e2c <ProcessOption+0x2cc>)
 8000c6e:	f005 fef3 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, rx_buffer, 1, HAL_MAX_DELAY);
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	2201      	movs	r2, #1
 8000c78:	496d      	ldr	r1, [pc, #436]	@ (8000e30 <ProcessOption+0x2d0>)
 8000c7a:	486c      	ldr	r0, [pc, #432]	@ (8000e2c <ProcessOption+0x2cc>)
 8000c7c:	f005 ff77 	bl	8006b6e <HAL_UART_Receive>

            if (rx_buffer[0] >= '1' && rx_buffer[0] <= '5') {
 8000c80:	4b6b      	ldr	r3, [pc, #428]	@ (8000e30 <ProcessOption+0x2d0>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b30      	cmp	r3, #48	@ 0x30
 8000c86:	d917      	bls.n	8000cb8 <ProcessOption+0x158>
 8000c88:	4b69      	ldr	r3, [pc, #420]	@ (8000e30 <ProcessOption+0x2d0>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b35      	cmp	r3, #53	@ 0x35
 8000c8e:	d813      	bhi.n	8000cb8 <ProcessOption+0x158>
                int baud_choices[] = {9600, 19200, 38400, 57600, 115200};
 8000c90:	4b6c      	ldr	r3, [pc, #432]	@ (8000e44 <ProcessOption+0x2e4>)
 8000c92:	f107 040c 	add.w	r4, r7, #12
 8000c96:	461d      	mov	r5, r3
 8000c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	6023      	str	r3, [r4, #0]
                uartParams.baudrate = baud_choices[rx_buffer[0] - '1'];
 8000ca0:	4b63      	ldr	r3, [pc, #396]	@ (8000e30 <ProcessOption+0x2d0>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	3b31      	subs	r3, #49	@ 0x31
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	3320      	adds	r3, #32
 8000caa:	443b      	add	r3, r7
 8000cac:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b62      	ldr	r3, [pc, #392]	@ (8000e3c <ProcessOption+0x2dc>)
 8000cb4:	601a      	str	r2, [r3, #0]
            if (rx_buffer[0] >= '1' && rx_buffer[0] <= '5') {
 8000cb6:	e049      	b.n	8000d4c <ProcessOption+0x1ec>
            } else if (rx_buffer[0] == '6') {
 8000cb8:	4b5d      	ldr	r3, [pc, #372]	@ (8000e30 <ProcessOption+0x2d0>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b36      	cmp	r3, #54	@ 0x36
 8000cbe:	d135      	bne.n	8000d2c <ProcessOption+0x1cc>
                sprintf((char *)tx_buffer, "Entrez le baudrate (par exemple 9600): ");
 8000cc0:	4961      	ldr	r1, [pc, #388]	@ (8000e48 <ProcessOption+0x2e8>)
 8000cc2:	4859      	ldr	r0, [pc, #356]	@ (8000e28 <ProcessOption+0x2c8>)
 8000cc4:	f007 f842 	bl	8007d4c <siprintf>
                HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000cc8:	4857      	ldr	r0, [pc, #348]	@ (8000e28 <ProcessOption+0x2c8>)
 8000cca:	f7ff fa81 	bl	80001d0 <strlen>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	4954      	ldr	r1, [pc, #336]	@ (8000e28 <ProcessOption+0x2c8>)
 8000cd8:	4854      	ldr	r0, [pc, #336]	@ (8000e2c <ProcessOption+0x2cc>)
 8000cda:	f005 febd 	bl	8006a58 <HAL_UART_Transmit>

                // Lire l'entrée complète de l'utilisateur jusqu'à "Entrée"
                memset(input_buffer, 0, sizeof(input_buffer));
 8000cde:	2214      	movs	r2, #20
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	485a      	ldr	r0, [pc, #360]	@ (8000e4c <ProcessOption+0x2ec>)
 8000ce4:	f007 f852 	bl	8007d8c <memset>
                HAL_UART_Receive(&huart3, (uint8_t *)input_buffer, sizeof(input_buffer)-1, HAL_MAX_DELAY); // Lire jusqu'à ce que l'utilisateur appuie sur "Entrée"
 8000ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cec:	2213      	movs	r2, #19
 8000cee:	4957      	ldr	r1, [pc, #348]	@ (8000e4c <ProcessOption+0x2ec>)
 8000cf0:	484e      	ldr	r0, [pc, #312]	@ (8000e2c <ProcessOption+0x2cc>)
 8000cf2:	f005 ff3c 	bl	8006b6e <HAL_UART_Receive>

                uartParams.baudrate = atoi(input_buffer);  // Convertir en entier
 8000cf6:	4855      	ldr	r0, [pc, #340]	@ (8000e4c <ProcessOption+0x2ec>)
 8000cf8:	f006 ffa0 	bl	8007c3c <atoi>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b4e      	ldr	r3, [pc, #312]	@ (8000e3c <ProcessOption+0x2dc>)
 8000d02:	601a      	str	r2, [r3, #0]
                if (uartParams.baudrate <= 0) {
 8000d04:	4b4d      	ldr	r3, [pc, #308]	@ (8000e3c <ProcessOption+0x2dc>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d11f      	bne.n	8000d4c <ProcessOption+0x1ec>
                    sprintf((char *)tx_buffer, "Valeur de baudrate invalide.\r\n");
 8000d0c:	4950      	ldr	r1, [pc, #320]	@ (8000e50 <ProcessOption+0x2f0>)
 8000d0e:	4846      	ldr	r0, [pc, #280]	@ (8000e28 <ProcessOption+0x2c8>)
 8000d10:	f007 f81c 	bl	8007d4c <siprintf>
                    HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000d14:	4844      	ldr	r0, [pc, #272]	@ (8000e28 <ProcessOption+0x2c8>)
 8000d16:	f7ff fa5b 	bl	80001d0 <strlen>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	4941      	ldr	r1, [pc, #260]	@ (8000e28 <ProcessOption+0x2c8>)
 8000d24:	4841      	ldr	r0, [pc, #260]	@ (8000e2c <ProcessOption+0x2cc>)
 8000d26:	f005 fe97 	bl	8006a58 <HAL_UART_Transmit>
                    return;
 8000d2a:	e155      	b.n	8000fd8 <ProcessOption+0x478>
                }
            } else {
                sprintf((char *)tx_buffer, "Option invalide.\r\n");
 8000d2c:	4941      	ldr	r1, [pc, #260]	@ (8000e34 <ProcessOption+0x2d4>)
 8000d2e:	483e      	ldr	r0, [pc, #248]	@ (8000e28 <ProcessOption+0x2c8>)
 8000d30:	f007 f80c 	bl	8007d4c <siprintf>
                HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000d34:	483c      	ldr	r0, [pc, #240]	@ (8000e28 <ProcessOption+0x2c8>)
 8000d36:	f7ff fa4b 	bl	80001d0 <strlen>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	4939      	ldr	r1, [pc, #228]	@ (8000e28 <ProcessOption+0x2c8>)
 8000d44:	4839      	ldr	r0, [pc, #228]	@ (8000e2c <ProcessOption+0x2cc>)
 8000d46:	f005 fe87 	bl	8006a58 <HAL_UART_Transmit>
                return;
 8000d4a:	e145      	b.n	8000fd8 <ProcessOption+0x478>
            }
            // Sauvegarder ces paramètres dans l'EEPROM
            EEPROM_Write_UART_Params(5, 0, &uartParams);
 8000d4c:	4a3b      	ldr	r2, [pc, #236]	@ (8000e3c <ProcessOption+0x2dc>)
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2005      	movs	r0, #5
 8000d52:	f7ff fcef 	bl	8000734 <EEPROM_Write_UART_Params>
            sprintf((char *)tx_buffer, "Baudrate configure a %lu.\r\n", uartParams.baudrate);
 8000d56:	4b39      	ldr	r3, [pc, #228]	@ (8000e3c <ProcessOption+0x2dc>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	493d      	ldr	r1, [pc, #244]	@ (8000e54 <ProcessOption+0x2f4>)
 8000d5e:	4832      	ldr	r0, [pc, #200]	@ (8000e28 <ProcessOption+0x2c8>)
 8000d60:	f006 fff4 	bl	8007d4c <siprintf>
            HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000d64:	4830      	ldr	r0, [pc, #192]	@ (8000e28 <ProcessOption+0x2c8>)
 8000d66:	f7ff fa33 	bl	80001d0 <strlen>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	492d      	ldr	r1, [pc, #180]	@ (8000e28 <ProcessOption+0x2c8>)
 8000d74:	482d      	ldr	r0, [pc, #180]	@ (8000e2c <ProcessOption+0x2cc>)
 8000d76:	f005 fe6f 	bl	8006a58 <HAL_UART_Transmit>
            ShowMenu(); // Rafraîchir le menu après la configuration
 8000d7a:	f7ff fed7 	bl	8000b2c <ShowMenu>
            break;
 8000d7e:	e129      	b.n	8000fd4 <ProcessOption+0x474>
            	"\n"
            	"\r\nOptions Longueur des mots:\r\n"
                "1: 8 bits\r\n"
                "2: 9 bits\r\n"
            	"Votre choix actuel : %s\r\n"
            	"Entrez votre choix: ", (uartParams.wordLength == UART_WORDLENGTH_8B) ? "8 bits" : "9 bits");
 8000d80:	4b2e      	ldr	r3, [pc, #184]	@ (8000e3c <ProcessOption+0x2dc>)
 8000d82:	689b      	ldr	r3, [r3, #8]
            sprintf((char *)tx_buffer,
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <ProcessOption+0x22c>
 8000d88:	4b33      	ldr	r3, [pc, #204]	@ (8000e58 <ProcessOption+0x2f8>)
 8000d8a:	e000      	b.n	8000d8e <ProcessOption+0x22e>
 8000d8c:	4b33      	ldr	r3, [pc, #204]	@ (8000e5c <ProcessOption+0x2fc>)
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4933      	ldr	r1, [pc, #204]	@ (8000e60 <ProcessOption+0x300>)
 8000d92:	4825      	ldr	r0, [pc, #148]	@ (8000e28 <ProcessOption+0x2c8>)
 8000d94:	f006 ffda 	bl	8007d4c <siprintf>
            HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000d98:	4823      	ldr	r0, [pc, #140]	@ (8000e28 <ProcessOption+0x2c8>)
 8000d9a:	f7ff fa19 	bl	80001d0 <strlen>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	4920      	ldr	r1, [pc, #128]	@ (8000e28 <ProcessOption+0x2c8>)
 8000da8:	4820      	ldr	r0, [pc, #128]	@ (8000e2c <ProcessOption+0x2cc>)
 8000daa:	f005 fe55 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, rx_buffer, 1, HAL_MAX_DELAY);
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	2201      	movs	r2, #1
 8000db4:	491e      	ldr	r1, [pc, #120]	@ (8000e30 <ProcessOption+0x2d0>)
 8000db6:	481d      	ldr	r0, [pc, #116]	@ (8000e2c <ProcessOption+0x2cc>)
 8000db8:	f005 fed9 	bl	8006b6e <HAL_UART_Receive>

            uartParams.wordLength = (rx_buffer[0] == '1') ? UART_WORDLENGTH_8B : UART_WORDLENGTH_9B;
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <ProcessOption+0x2d0>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b31      	cmp	r3, #49	@ 0x31
 8000dc2:	d101      	bne.n	8000dc8 <ProcessOption+0x268>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e001      	b.n	8000dcc <ProcessOption+0x26c>
 8000dc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e3c <ProcessOption+0x2dc>)
 8000dce:	6093      	str	r3, [r2, #8]
            // Sauvegarder ces paramètres dans l'EEPROM
            EEPROM_Write_UART_Params(5, 0, &uartParams);
 8000dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e3c <ProcessOption+0x2dc>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2005      	movs	r0, #5
 8000dd6:	f7ff fcad 	bl	8000734 <EEPROM_Write_UART_Params>
            sprintf((char *)tx_buffer, "Longueur des mots configuree.\r\n");
 8000dda:	4922      	ldr	r1, [pc, #136]	@ (8000e64 <ProcessOption+0x304>)
 8000ddc:	4812      	ldr	r0, [pc, #72]	@ (8000e28 <ProcessOption+0x2c8>)
 8000dde:	f006 ffb5 	bl	8007d4c <siprintf>
            HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000de2:	4811      	ldr	r0, [pc, #68]	@ (8000e28 <ProcessOption+0x2c8>)
 8000de4:	f7ff f9f4 	bl	80001d0 <strlen>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	490d      	ldr	r1, [pc, #52]	@ (8000e28 <ProcessOption+0x2c8>)
 8000df2:	480e      	ldr	r0, [pc, #56]	@ (8000e2c <ProcessOption+0x2cc>)
 8000df4:	f005 fe30 	bl	8006a58 <HAL_UART_Transmit>
            ShowMenu(); // Rafraîchir le menu après la configuration
 8000df8:	f7ff fe98 	bl	8000b2c <ShowMenu>
            break;
 8000dfc:	e0ea      	b.n	8000fd4 <ProcessOption+0x474>
            	"\r\nOptions Parite:\r\n"
                "1: Aucune\r\n"
                "2: Paire\r\n"
                "3: Impaire\r\n"
            	"Votre choix actuel : %s\r\n"
                "Entrez votre choix: ", (uartParams.parity == UART_PARITY_NONE) ? "Aucune" : (uartParams.parity == UART_PARITY_EVEN) ? "Paire" : "Impaire");
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <ProcessOption+0x2dc>)
 8000e00:	685b      	ldr	r3, [r3, #4]
            sprintf((char *)tx_buffer,
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d034      	beq.n	8000e70 <ProcessOption+0x310>
                "Entrez votre choix: ", (uartParams.parity == UART_PARITY_NONE) ? "Aucune" : (uartParams.parity == UART_PARITY_EVEN) ? "Paire" : "Impaire");
 8000e06:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <ProcessOption+0x2dc>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e0e:	d101      	bne.n	8000e14 <ProcessOption+0x2b4>
 8000e10:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <ProcessOption+0x308>)
 8000e12:	e02e      	b.n	8000e72 <ProcessOption+0x312>
 8000e14:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <ProcessOption+0x30c>)
 8000e16:	e02c      	b.n	8000e72 <ProcessOption+0x312>
 8000e18:	200007e8 	.word	0x200007e8
 8000e1c:	080087ac 	.word	0x080087ac
 8000e20:	080087b4 	.word	0x080087b4
 8000e24:	080087bc 	.word	0x080087bc
 8000e28:	200005e0 	.word	0x200005e0
 8000e2c:	20000344 	.word	0x20000344
 8000e30:	200005dc 	.word	0x200005dc
 8000e34:	0800881c 	.word	0x0800881c
 8000e38:	08008830 	.word	0x08008830
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	08008848 	.word	0x08008848
 8000e44:	08008b28 	.word	0x08008b28
 8000e48:	080088d8 	.word	0x080088d8
 8000e4c:	200007d4 	.word	0x200007d4
 8000e50:	08008900 	.word	0x08008900
 8000e54:	08008920 	.word	0x08008920
 8000e58:	0800893c 	.word	0x0800893c
 8000e5c:	08008944 	.word	0x08008944
 8000e60:	0800894c 	.word	0x0800894c
 8000e64:	080089b0 	.word	0x080089b0
 8000e68:	080089d0 	.word	0x080089d0
 8000e6c:	080089d8 	.word	0x080089d8
            sprintf((char *)tx_buffer,
 8000e70:	4b5b      	ldr	r3, [pc, #364]	@ (8000fe0 <ProcessOption+0x480>)
 8000e72:	461a      	mov	r2, r3
 8000e74:	495b      	ldr	r1, [pc, #364]	@ (8000fe4 <ProcessOption+0x484>)
 8000e76:	485c      	ldr	r0, [pc, #368]	@ (8000fe8 <ProcessOption+0x488>)
 8000e78:	f006 ff68 	bl	8007d4c <siprintf>
            HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000e7c:	485a      	ldr	r0, [pc, #360]	@ (8000fe8 <ProcessOption+0x488>)
 8000e7e:	f7ff f9a7 	bl	80001d0 <strlen>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	4957      	ldr	r1, [pc, #348]	@ (8000fe8 <ProcessOption+0x488>)
 8000e8c:	4857      	ldr	r0, [pc, #348]	@ (8000fec <ProcessOption+0x48c>)
 8000e8e:	f005 fde3 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, rx_buffer, 1, HAL_MAX_DELAY);
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	2201      	movs	r2, #1
 8000e98:	4955      	ldr	r1, [pc, #340]	@ (8000ff0 <ProcessOption+0x490>)
 8000e9a:	4854      	ldr	r0, [pc, #336]	@ (8000fec <ProcessOption+0x48c>)
 8000e9c:	f005 fe67 	bl	8006b6e <HAL_UART_Receive>

            if (rx_buffer[0] == '1') uartParams.parity = UART_PARITY_NONE;
 8000ea0:	4b53      	ldr	r3, [pc, #332]	@ (8000ff0 <ProcessOption+0x490>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b31      	cmp	r3, #49	@ 0x31
 8000ea6:	d103      	bne.n	8000eb0 <ProcessOption+0x350>
 8000ea8:	4b52      	ldr	r3, [pc, #328]	@ (8000ff4 <ProcessOption+0x494>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	e010      	b.n	8000ed2 <ProcessOption+0x372>
            else if (rx_buffer[0] == '2') uartParams.parity = UART_PARITY_EVEN;
 8000eb0:	4b4f      	ldr	r3, [pc, #316]	@ (8000ff0 <ProcessOption+0x490>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b32      	cmp	r3, #50	@ 0x32
 8000eb6:	d104      	bne.n	8000ec2 <ProcessOption+0x362>
 8000eb8:	4b4e      	ldr	r3, [pc, #312]	@ (8000ff4 <ProcessOption+0x494>)
 8000eba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	e007      	b.n	8000ed2 <ProcessOption+0x372>
            else if (rx_buffer[0] == '3') uartParams.parity = UART_PARITY_ODD;
 8000ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8000ff0 <ProcessOption+0x490>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b33      	cmp	r3, #51	@ 0x33
 8000ec8:	d103      	bne.n	8000ed2 <ProcessOption+0x372>
 8000eca:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff4 <ProcessOption+0x494>)
 8000ecc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000ed0:	605a      	str	r2, [r3, #4]
            // Sauvegarder ces paramètres dans l'EEPROM
            EEPROM_Write_UART_Params(5, 0, &uartParams);
 8000ed2:	4a48      	ldr	r2, [pc, #288]	@ (8000ff4 <ProcessOption+0x494>)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2005      	movs	r0, #5
 8000ed8:	f7ff fc2c 	bl	8000734 <EEPROM_Write_UART_Params>
            sprintf((char *)tx_buffer, "Parite configuree.\r\n");
 8000edc:	4946      	ldr	r1, [pc, #280]	@ (8000ff8 <ProcessOption+0x498>)
 8000ede:	4842      	ldr	r0, [pc, #264]	@ (8000fe8 <ProcessOption+0x488>)
 8000ee0:	f006 ff34 	bl	8007d4c <siprintf>
            HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000ee4:	4840      	ldr	r0, [pc, #256]	@ (8000fe8 <ProcessOption+0x488>)
 8000ee6:	f7ff f973 	bl	80001d0 <strlen>
 8000eea:	4603      	mov	r3, r0
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	493d      	ldr	r1, [pc, #244]	@ (8000fe8 <ProcessOption+0x488>)
 8000ef4:	483d      	ldr	r0, [pc, #244]	@ (8000fec <ProcessOption+0x48c>)
 8000ef6:	f005 fdaf 	bl	8006a58 <HAL_UART_Transmit>
            ShowMenu(); // Rafraîchir le menu après la configuration
 8000efa:	f7ff fe17 	bl	8000b2c <ShowMenu>
            break;
 8000efe:	e069      	b.n	8000fd4 <ProcessOption+0x474>
            	"\n"
            	"\r\nOptions Bits d'arret:\r\n"
                "1: 1 bit\r\n"
                "2: 2 bits\r\n"
            	"Votre choix actuel : %s\r\n"
                "Entrez votre choix: ", (uartParams.stopBits == UART_STOPBITS_1) ? "1 bit" : "2 bits");
 8000f00:	4b3c      	ldr	r3, [pc, #240]	@ (8000ff4 <ProcessOption+0x494>)
 8000f02:	68db      	ldr	r3, [r3, #12]
            sprintf((char *)tx_buffer,
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <ProcessOption+0x3ac>
 8000f08:	4b3c      	ldr	r3, [pc, #240]	@ (8000ffc <ProcessOption+0x49c>)
 8000f0a:	e000      	b.n	8000f0e <ProcessOption+0x3ae>
 8000f0c:	4b3c      	ldr	r3, [pc, #240]	@ (8001000 <ProcessOption+0x4a0>)
 8000f0e:	461a      	mov	r2, r3
 8000f10:	493c      	ldr	r1, [pc, #240]	@ (8001004 <ProcessOption+0x4a4>)
 8000f12:	4835      	ldr	r0, [pc, #212]	@ (8000fe8 <ProcessOption+0x488>)
 8000f14:	f006 ff1a 	bl	8007d4c <siprintf>
            HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000f18:	4833      	ldr	r0, [pc, #204]	@ (8000fe8 <ProcessOption+0x488>)
 8000f1a:	f7ff f959 	bl	80001d0 <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	4930      	ldr	r1, [pc, #192]	@ (8000fe8 <ProcessOption+0x488>)
 8000f28:	4830      	ldr	r0, [pc, #192]	@ (8000fec <ProcessOption+0x48c>)
 8000f2a:	f005 fd95 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, rx_buffer, 1, HAL_MAX_DELAY);
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	2201      	movs	r2, #1
 8000f34:	492e      	ldr	r1, [pc, #184]	@ (8000ff0 <ProcessOption+0x490>)
 8000f36:	482d      	ldr	r0, [pc, #180]	@ (8000fec <ProcessOption+0x48c>)
 8000f38:	f005 fe19 	bl	8006b6e <HAL_UART_Receive>

            uartParams.stopBits = (rx_buffer[0] == '1') ? UART_STOPBITS_1 : UART_STOPBITS_2;
 8000f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff0 <ProcessOption+0x490>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b31      	cmp	r3, #49	@ 0x31
 8000f42:	d101      	bne.n	8000f48 <ProcessOption+0x3e8>
 8000f44:	2300      	movs	r3, #0
 8000f46:	e001      	b.n	8000f4c <ProcessOption+0x3ec>
 8000f48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f4c:	4a29      	ldr	r2, [pc, #164]	@ (8000ff4 <ProcessOption+0x494>)
 8000f4e:	60d3      	str	r3, [r2, #12]
            // Sauvegarder ces paramètres dans l'EEPROM
            EEPROM_Write_UART_Params(5, 0, &uartParams);
 8000f50:	4a28      	ldr	r2, [pc, #160]	@ (8000ff4 <ProcessOption+0x494>)
 8000f52:	2100      	movs	r1, #0
 8000f54:	2005      	movs	r0, #5
 8000f56:	f7ff fbed 	bl	8000734 <EEPROM_Write_UART_Params>
            sprintf((char *)tx_buffer, "Bits d'arret configurees.\r\n");
 8000f5a:	492b      	ldr	r1, [pc, #172]	@ (8001008 <ProcessOption+0x4a8>)
 8000f5c:	4822      	ldr	r0, [pc, #136]	@ (8000fe8 <ProcessOption+0x488>)
 8000f5e:	f006 fef5 	bl	8007d4c <siprintf>
            HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000f62:	4821      	ldr	r0, [pc, #132]	@ (8000fe8 <ProcessOption+0x488>)
 8000f64:	f7ff f934 	bl	80001d0 <strlen>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	491d      	ldr	r1, [pc, #116]	@ (8000fe8 <ProcessOption+0x488>)
 8000f72:	481e      	ldr	r0, [pc, #120]	@ (8000fec <ProcessOption+0x48c>)
 8000f74:	f005 fd70 	bl	8006a58 <HAL_UART_Transmit>
            ShowMenu(); // Rafraîchir le menu après la configuration
 8000f78:	f7ff fdd8 	bl	8000b2c <ShowMenu>
            break;
 8000f7c:	e02a      	b.n	8000fd4 <ProcessOption+0x474>
        case '6': // Interaction avec le menu Modbus Master
                   if (mode == 1) { // Vérifier que le mode est "Master"
 8000f7e:	4b23      	ldr	r3, [pc, #140]	@ (800100c <ProcessOption+0x4ac>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d102      	bne.n	8000f8c <ProcessOption+0x42c>
                       ModbusMenuInteraction();
 8000f86:	f000 f881 	bl	800108c <ModbusMenuInteraction>
 8000f8a:	e00e      	b.n	8000faa <ProcessOption+0x44a>
                   } else {
                       sprintf((char *)tx_buffer, "Mode non valide. Configurez d'abord en mode Master.\r\n");
 8000f8c:	4920      	ldr	r1, [pc, #128]	@ (8001010 <ProcessOption+0x4b0>)
 8000f8e:	4816      	ldr	r0, [pc, #88]	@ (8000fe8 <ProcessOption+0x488>)
 8000f90:	f006 fedc 	bl	8007d4c <siprintf>
                       HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000f94:	4814      	ldr	r0, [pc, #80]	@ (8000fe8 <ProcessOption+0x488>)
 8000f96:	f7ff f91b 	bl	80001d0 <strlen>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	4911      	ldr	r1, [pc, #68]	@ (8000fe8 <ProcessOption+0x488>)
 8000fa4:	4811      	ldr	r0, [pc, #68]	@ (8000fec <ProcessOption+0x48c>)
 8000fa6:	f005 fd57 	bl	8006a58 <HAL_UART_Transmit>
                   }
                   ShowMenu();// Afficher à nouveau le menu après l'interaction
 8000faa:	f7ff fdbf 	bl	8000b2c <ShowMenu>
                   break;
 8000fae:	e011      	b.n	8000fd4 <ProcessOption+0x474>
        default:
            sprintf((char *)tx_buffer, "Option invalide.\r\n");
 8000fb0:	4918      	ldr	r1, [pc, #96]	@ (8001014 <ProcessOption+0x4b4>)
 8000fb2:	480d      	ldr	r0, [pc, #52]	@ (8000fe8 <ProcessOption+0x488>)
 8000fb4:	f006 feca 	bl	8007d4c <siprintf>
            HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8000fb8:	480b      	ldr	r0, [pc, #44]	@ (8000fe8 <ProcessOption+0x488>)
 8000fba:	f7ff f909 	bl	80001d0 <strlen>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	4908      	ldr	r1, [pc, #32]	@ (8000fe8 <ProcessOption+0x488>)
 8000fc8:	4808      	ldr	r0, [pc, #32]	@ (8000fec <ProcessOption+0x48c>)
 8000fca:	f005 fd45 	bl	8006a58 <HAL_UART_Transmit>
            ShowMenu(); // Rafraîchir le menu après la configuration
 8000fce:	f7ff fdad 	bl	8000b2c <ShowMenu>
            break;
 8000fd2:	bf00      	nop
    }

    // Appliquer la configuration
    ConfigureUART2();
 8000fd4:	f000 f820 	bl	8001018 <ConfigureUART2>
}
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	080089e0 	.word	0x080089e0
 8000fe4:	080089e8 	.word	0x080089e8
 8000fe8:	200005e0 	.word	0x200005e0
 8000fec:	20000344 	.word	0x20000344
 8000ff0:	200005dc 	.word	0x200005dc
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	08008a4c 	.word	0x08008a4c
 8000ffc:	08008a64 	.word	0x08008a64
 8001000:	08008a6c 	.word	0x08008a6c
 8001004:	08008a74 	.word	0x08008a74
 8001008:	08008ad4 	.word	0x08008ad4
 800100c:	200007e8 	.word	0x200007e8
 8001010:	08008af0 	.word	0x08008af0
 8001014:	0800881c 	.word	0x0800881c

08001018 <ConfigureUART2>:

void ConfigureUART2(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

	// 1. Désactiver l'UART2 pour éviter toute interférence
    HAL_UART_DeInit(&huart2); // Désactive l'UART
 800101c:	4816      	ldr	r0, [pc, #88]	@ (8001078 <ConfigureUART2+0x60>)
 800101e:	f005 fce9 	bl	80069f4 <HAL_UART_DeInit>

    // 2. Appliquer la nouvelle configuration
    huart2.Init.BaudRate = uartParams.baudrate;
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <ConfigureUART2+0x64>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <ConfigureUART2+0x60>)
 8001028:	6053      	str	r3, [r2, #4]
    huart2.Init.WordLength = uartParams.wordLength;
 800102a:	4b14      	ldr	r3, [pc, #80]	@ (800107c <ConfigureUART2+0x64>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <ConfigureUART2+0x60>)
 8001030:	6093      	str	r3, [r2, #8]
    huart2.Init.StopBits = uartParams.stopBits;
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <ConfigureUART2+0x64>)
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	4a10      	ldr	r2, [pc, #64]	@ (8001078 <ConfigureUART2+0x60>)
 8001038:	60d3      	str	r3, [r2, #12]
    huart2.Init.Parity = uartParams.parity;
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <ConfigureUART2+0x64>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4a0e      	ldr	r2, [pc, #56]	@ (8001078 <ConfigureUART2+0x60>)
 8001040:	6113      	str	r3, [r2, #16]

    // 3. Réinitialiser l'UART pour appliquer les changements de configuration
    HAL_UART_Init(&huart2); // Appliquer la configuration
 8001042:	480d      	ldr	r0, [pc, #52]	@ (8001078 <ConfigureUART2+0x60>)
 8001044:	f005 fc86 	bl	8006954 <HAL_UART_Init>

    // 4. Optionnel : Assurez-vous que l'UART est prêt à communiquer (si nécessaire)
    // Vérifiez si l'UART est correctement initialisé et prêt pour la communication
    if (HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY) {
 8001048:	480b      	ldr	r0, [pc, #44]	@ (8001078 <ConfigureUART2+0x60>)
 800104a:	f006 f935 	bl	80072b8 <HAL_UART_GetState>
 800104e:	4603      	mov	r3, r0
 8001050:	2b20      	cmp	r3, #32
 8001052:	d00e      	beq.n	8001072 <ConfigureUART2+0x5a>
    // Si l'UART n'est pas prêt, vous pouvez gérer l'erreur ici
    // Par exemple, afficher un message d'erreur ou tenter une réinitialisation
        sprintf((char *)tx_buffer, "Erreur d'initialisation de l'UART.\r\n");
 8001054:	490a      	ldr	r1, [pc, #40]	@ (8001080 <ConfigureUART2+0x68>)
 8001056:	480b      	ldr	r0, [pc, #44]	@ (8001084 <ConfigureUART2+0x6c>)
 8001058:	f006 fe78 	bl	8007d4c <siprintf>
        HAL_UART_Transmit(&huart3, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 800105c:	4809      	ldr	r0, [pc, #36]	@ (8001084 <ConfigureUART2+0x6c>)
 800105e:	f7ff f8b7 	bl	80001d0 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	4906      	ldr	r1, [pc, #24]	@ (8001084 <ConfigureUART2+0x6c>)
 800106c:	4806      	ldr	r0, [pc, #24]	@ (8001088 <ConfigureUART2+0x70>)
 800106e:	f005 fcf3 	bl	8006a58 <HAL_UART_Transmit>
    }
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200002fc 	.word	0x200002fc
 800107c:	20000000 	.word	0x20000000
 8001080:	08008b3c 	.word	0x08008b3c
 8001084:	200005e0 	.word	0x200005e0
 8001088:	20000344 	.word	0x20000344

0800108c <ModbusMenuInteraction>:
void ModbusMenuInteraction()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0ce      	sub	sp, #312	@ 0x138
 8001090:	af00      	add	r7, sp, #0
    char menu[] =
 8001092:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001096:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800109a:	4aa9      	ldr	r2, [pc, #676]	@ (8001340 <ModbusMenuInteraction+0x2b4>)
 800109c:	4618      	mov	r0, r3
 800109e:	4611      	mov	r1, r2
 80010a0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80010a4:	461a      	mov	r2, r3
 80010a6:	f006 fea5 	bl	8007df4 <memcpy>
        "7. Write Single Coil (0x05)\r\n"
        "8. Write Multiple Coils (0x0F)\r\n"
        "Enter your choice: ";

    // Display the menu
    HAL_UART_Transmit(&huart3, (uint8_t*)menu, strlen(menu), HAL_MAX_DELAY);
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f88f 	bl	80001d0 <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	1d39      	adds	r1, r7, #4
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	48a1      	ldr	r0, [pc, #644]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 80010be:	f005 fccb 	bl	8006a58 <HAL_UART_Transmit>

    // Read user input (choice)
    HAL_UART_Receive(&huart3, (uint8_t*)buffer, 1, HAL_MAX_DELAY);
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	2201      	movs	r2, #1
 80010c8:	499f      	ldr	r1, [pc, #636]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 80010ca:	489e      	ldr	r0, [pc, #632]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 80010cc:	f005 fd4f 	bl	8006b6e <HAL_UART_Receive>
    choice = buffer[0] - '0';
 80010d0:	4b9d      	ldr	r3, [pc, #628]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	3b30      	subs	r3, #48	@ 0x30
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b9c      	ldr	r3, [pc, #624]	@ (800134c <ModbusMenuInteraction+0x2c0>)
 80010da:	701a      	strb	r2, [r3, #0]

    // Get slave address
    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Slave Address (1-247): ", 31, HAL_MAX_DELAY);
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	221f      	movs	r2, #31
 80010e2:	499b      	ldr	r1, [pc, #620]	@ (8001350 <ModbusMenuInteraction+0x2c4>)
 80010e4:	4897      	ldr	r0, [pc, #604]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 80010e6:	f005 fcb7 	bl	8006a58 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart3, (uint8_t*)buffer, 3, HAL_MAX_DELAY);
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	2203      	movs	r2, #3
 80010f0:	4995      	ldr	r1, [pc, #596]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 80010f2:	4894      	ldr	r0, [pc, #592]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 80010f4:	f005 fd3b 	bl	8006b6e <HAL_UART_Receive>
    slaveAddr = atoi(buffer);
 80010f8:	4893      	ldr	r0, [pc, #588]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 80010fa:	f006 fd9f 	bl	8007c3c <atoi>
 80010fe:	4603      	mov	r3, r0
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b94      	ldr	r3, [pc, #592]	@ (8001354 <ModbusMenuInteraction+0x2c8>)
 8001104:	701a      	strb	r2, [r3, #0]

    // Execute based on choice
    switch (choice)
 8001106:	4b91      	ldr	r3, [pc, #580]	@ (800134c <ModbusMenuInteraction+0x2c0>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	3b01      	subs	r3, #1
 800110c:	2b07      	cmp	r3, #7
 800110e:	f200 8246 	bhi.w	800159e <ModbusMenuInteraction+0x512>
 8001112:	a201      	add	r2, pc, #4	@ (adr r2, 8001118 <ModbusMenuInteraction+0x8c>)
 8001114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001118:	08001139 	.word	0x08001139
 800111c:	080011a1 	.word	0x080011a1
 8001120:	08001209 	.word	0x08001209
 8001124:	08001271 	.word	0x08001271
 8001128:	080012d9 	.word	0x080012d9
 800112c:	0800137d 	.word	0x0800137d
 8001130:	08001443 	.word	0x08001443
 8001134:	080014cd 	.word	0x080014cd
    {
        case 1:  // Read Holding Registers
            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Start Address: ", 23, HAL_MAX_DELAY);
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
 800113c:	2217      	movs	r2, #23
 800113e:	4986      	ldr	r1, [pc, #536]	@ (8001358 <ModbusMenuInteraction+0x2cc>)
 8001140:	4880      	ldr	r0, [pc, #512]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 8001142:	f005 fc89 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	2205      	movs	r2, #5
 800114c:	497e      	ldr	r1, [pc, #504]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 800114e:	487d      	ldr	r0, [pc, #500]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 8001150:	f005 fd0d 	bl	8006b6e <HAL_UART_Receive>
            startAddr = atoi(buffer);
 8001154:	487c      	ldr	r0, [pc, #496]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 8001156:	f006 fd71 	bl	8007c3c <atoi>
 800115a:	4603      	mov	r3, r0
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b7f      	ldr	r3, [pc, #508]	@ (800135c <ModbusMenuInteraction+0x2d0>)
 8001160:	801a      	strh	r2, [r3, #0]

            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Number of Registers: ", 29, HAL_MAX_DELAY);
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	221d      	movs	r2, #29
 8001168:	497d      	ldr	r1, [pc, #500]	@ (8001360 <ModbusMenuInteraction+0x2d4>)
 800116a:	4876      	ldr	r0, [pc, #472]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 800116c:	f005 fc74 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	2205      	movs	r2, #5
 8001176:	4974      	ldr	r1, [pc, #464]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 8001178:	4872      	ldr	r0, [pc, #456]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 800117a:	f005 fcf8 	bl	8006b6e <HAL_UART_Receive>
            numRegs = atoi(buffer);
 800117e:	4872      	ldr	r0, [pc, #456]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 8001180:	f006 fd5c 	bl	8007c3c <atoi>
 8001184:	4603      	mov	r3, r0
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b76      	ldr	r3, [pc, #472]	@ (8001364 <ModbusMenuInteraction+0x2d8>)
 800118a:	801a      	strh	r2, [r3, #0]

            readHoldingRegisters_M(slaveAddr, startAddr, numRegs);
 800118c:	4b71      	ldr	r3, [pc, #452]	@ (8001354 <ModbusMenuInteraction+0x2c8>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4a72      	ldr	r2, [pc, #456]	@ (800135c <ModbusMenuInteraction+0x2d0>)
 8001192:	8811      	ldrh	r1, [r2, #0]
 8001194:	4a73      	ldr	r2, [pc, #460]	@ (8001364 <ModbusMenuInteraction+0x2d8>)
 8001196:	8812      	ldrh	r2, [r2, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f001 f9e7 	bl	800256c <readHoldingRegisters_M>
            break;
 800119e:	e206      	b.n	80015ae <ModbusMenuInteraction+0x522>

        case 2:  // Read Input Registers
            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Start Address: ", 23, HAL_MAX_DELAY);
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	2217      	movs	r2, #23
 80011a6:	496c      	ldr	r1, [pc, #432]	@ (8001358 <ModbusMenuInteraction+0x2cc>)
 80011a8:	4866      	ldr	r0, [pc, #408]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 80011aa:	f005 fc55 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	2205      	movs	r2, #5
 80011b4:	4964      	ldr	r1, [pc, #400]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 80011b6:	4863      	ldr	r0, [pc, #396]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 80011b8:	f005 fcd9 	bl	8006b6e <HAL_UART_Receive>
            startAddr = atoi(buffer);
 80011bc:	4862      	ldr	r0, [pc, #392]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 80011be:	f006 fd3d 	bl	8007c3c <atoi>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b65      	ldr	r3, [pc, #404]	@ (800135c <ModbusMenuInteraction+0x2d0>)
 80011c8:	801a      	strh	r2, [r3, #0]

            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Number of Registers: ", 29, HAL_MAX_DELAY);
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	221d      	movs	r2, #29
 80011d0:	4963      	ldr	r1, [pc, #396]	@ (8001360 <ModbusMenuInteraction+0x2d4>)
 80011d2:	485c      	ldr	r0, [pc, #368]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 80011d4:	f005 fc40 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	2205      	movs	r2, #5
 80011de:	495a      	ldr	r1, [pc, #360]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 80011e0:	4858      	ldr	r0, [pc, #352]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 80011e2:	f005 fcc4 	bl	8006b6e <HAL_UART_Receive>
            numRegs = atoi(buffer);
 80011e6:	4858      	ldr	r0, [pc, #352]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 80011e8:	f006 fd28 	bl	8007c3c <atoi>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b5c      	ldr	r3, [pc, #368]	@ (8001364 <ModbusMenuInteraction+0x2d8>)
 80011f2:	801a      	strh	r2, [r3, #0]

            readInputRegisters_M(slaveAddr, startAddr, numRegs);
 80011f4:	4b57      	ldr	r3, [pc, #348]	@ (8001354 <ModbusMenuInteraction+0x2c8>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4a58      	ldr	r2, [pc, #352]	@ (800135c <ModbusMenuInteraction+0x2d0>)
 80011fa:	8811      	ldrh	r1, [r2, #0]
 80011fc:	4a59      	ldr	r2, [pc, #356]	@ (8001364 <ModbusMenuInteraction+0x2d8>)
 80011fe:	8812      	ldrh	r2, [r2, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f001 f9f5 	bl	80025f0 <readInputRegisters_M>
            break;
 8001206:	e1d2      	b.n	80015ae <ModbusMenuInteraction+0x522>

        case 3:  // Read Coils
            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Start Address: ", 23, HAL_MAX_DELAY);
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
 800120c:	2217      	movs	r2, #23
 800120e:	4952      	ldr	r1, [pc, #328]	@ (8001358 <ModbusMenuInteraction+0x2cc>)
 8001210:	484c      	ldr	r0, [pc, #304]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 8001212:	f005 fc21 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	2205      	movs	r2, #5
 800121c:	494a      	ldr	r1, [pc, #296]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 800121e:	4849      	ldr	r0, [pc, #292]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 8001220:	f005 fca5 	bl	8006b6e <HAL_UART_Receive>
            startAddr = atoi(buffer);
 8001224:	4848      	ldr	r0, [pc, #288]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 8001226:	f006 fd09 	bl	8007c3c <atoi>
 800122a:	4603      	mov	r3, r0
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b4b      	ldr	r3, [pc, #300]	@ (800135c <ModbusMenuInteraction+0x2d0>)
 8001230:	801a      	strh	r2, [r3, #0]

            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Number of Coils: ", 24, HAL_MAX_DELAY);
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	2218      	movs	r2, #24
 8001238:	494b      	ldr	r1, [pc, #300]	@ (8001368 <ModbusMenuInteraction+0x2dc>)
 800123a:	4842      	ldr	r0, [pc, #264]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 800123c:	f005 fc0c 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	2205      	movs	r2, #5
 8001246:	4940      	ldr	r1, [pc, #256]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 8001248:	483e      	ldr	r0, [pc, #248]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 800124a:	f005 fc90 	bl	8006b6e <HAL_UART_Receive>
            numRegs = atoi(buffer);
 800124e:	483e      	ldr	r0, [pc, #248]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 8001250:	f006 fcf4 	bl	8007c3c <atoi>
 8001254:	4603      	mov	r3, r0
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b42      	ldr	r3, [pc, #264]	@ (8001364 <ModbusMenuInteraction+0x2d8>)
 800125a:	801a      	strh	r2, [r3, #0]

            readCoils_M(slaveAddr, startAddr, numRegs);
 800125c:	4b3d      	ldr	r3, [pc, #244]	@ (8001354 <ModbusMenuInteraction+0x2c8>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4a3e      	ldr	r2, [pc, #248]	@ (800135c <ModbusMenuInteraction+0x2d0>)
 8001262:	8811      	ldrh	r1, [r2, #0]
 8001264:	4a3f      	ldr	r2, [pc, #252]	@ (8001364 <ModbusMenuInteraction+0x2d8>)
 8001266:	8812      	ldrh	r2, [r2, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f001 fa03 	bl	8002674 <readCoils_M>
            break;
 800126e:	e19e      	b.n	80015ae <ModbusMenuInteraction+0x522>

        case 4:  // Read Discrete Inputs
            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Start Address: ", 23, HAL_MAX_DELAY);
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	2217      	movs	r2, #23
 8001276:	4938      	ldr	r1, [pc, #224]	@ (8001358 <ModbusMenuInteraction+0x2cc>)
 8001278:	4832      	ldr	r0, [pc, #200]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 800127a:	f005 fbed 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	2205      	movs	r2, #5
 8001284:	4930      	ldr	r1, [pc, #192]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 8001286:	482f      	ldr	r0, [pc, #188]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 8001288:	f005 fc71 	bl	8006b6e <HAL_UART_Receive>
            startAddr = atoi(buffer);
 800128c:	482e      	ldr	r0, [pc, #184]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 800128e:	f006 fcd5 	bl	8007c3c <atoi>
 8001292:	4603      	mov	r3, r0
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b31      	ldr	r3, [pc, #196]	@ (800135c <ModbusMenuInteraction+0x2d0>)
 8001298:	801a      	strh	r2, [r3, #0]

            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Number of Inputs: ", 26, HAL_MAX_DELAY);
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	221a      	movs	r2, #26
 80012a0:	4932      	ldr	r1, [pc, #200]	@ (800136c <ModbusMenuInteraction+0x2e0>)
 80012a2:	4828      	ldr	r0, [pc, #160]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 80012a4:	f005 fbd8 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ac:	2205      	movs	r2, #5
 80012ae:	4926      	ldr	r1, [pc, #152]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 80012b0:	4824      	ldr	r0, [pc, #144]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 80012b2:	f005 fc5c 	bl	8006b6e <HAL_UART_Receive>
            numRegs = atoi(buffer);
 80012b6:	4824      	ldr	r0, [pc, #144]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 80012b8:	f006 fcc0 	bl	8007c3c <atoi>
 80012bc:	4603      	mov	r3, r0
 80012be:	b29a      	uxth	r2, r3
 80012c0:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <ModbusMenuInteraction+0x2d8>)
 80012c2:	801a      	strh	r2, [r3, #0]

            readDiscreteInputs_M(slaveAddr, startAddr, numRegs);
 80012c4:	4b23      	ldr	r3, [pc, #140]	@ (8001354 <ModbusMenuInteraction+0x2c8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4a24      	ldr	r2, [pc, #144]	@ (800135c <ModbusMenuInteraction+0x2d0>)
 80012ca:	8811      	ldrh	r1, [r2, #0]
 80012cc:	4a25      	ldr	r2, [pc, #148]	@ (8001364 <ModbusMenuInteraction+0x2d8>)
 80012ce:	8812      	ldrh	r2, [r2, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f001 fa11 	bl	80026f8 <readDiscreteInputs_M>
            break;
 80012d6:	e16a      	b.n	80015ae <ModbusMenuInteraction+0x522>

        case 5:  // Write Single Register
            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Address: ", 17, HAL_MAX_DELAY);
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	2211      	movs	r2, #17
 80012de:	4924      	ldr	r1, [pc, #144]	@ (8001370 <ModbusMenuInteraction+0x2e4>)
 80012e0:	4818      	ldr	r0, [pc, #96]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 80012e2:	f005 fbb9 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	2205      	movs	r2, #5
 80012ec:	4916      	ldr	r1, [pc, #88]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 80012ee:	4815      	ldr	r0, [pc, #84]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 80012f0:	f005 fc3d 	bl	8006b6e <HAL_UART_Receive>
            startAddr = atoi(buffer);
 80012f4:	4814      	ldr	r0, [pc, #80]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 80012f6:	f006 fca1 	bl	8007c3c <atoi>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b17      	ldr	r3, [pc, #92]	@ (800135c <ModbusMenuInteraction+0x2d0>)
 8001300:	801a      	strh	r2, [r3, #0]

            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Value: ", 15, HAL_MAX_DELAY);
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	220f      	movs	r2, #15
 8001308:	491a      	ldr	r1, [pc, #104]	@ (8001374 <ModbusMenuInteraction+0x2e8>)
 800130a:	480e      	ldr	r0, [pc, #56]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 800130c:	f005 fba4 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	2205      	movs	r2, #5
 8001316:	490c      	ldr	r1, [pc, #48]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 8001318:	480a      	ldr	r0, [pc, #40]	@ (8001344 <ModbusMenuInteraction+0x2b8>)
 800131a:	f005 fc28 	bl	8006b6e <HAL_UART_Receive>
            value = atoi(buffer);
 800131e:	480a      	ldr	r0, [pc, #40]	@ (8001348 <ModbusMenuInteraction+0x2bc>)
 8001320:	f006 fc8c 	bl	8007c3c <atoi>
 8001324:	4603      	mov	r3, r0
 8001326:	b29a      	uxth	r2, r3
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <ModbusMenuInteraction+0x2ec>)
 800132a:	801a      	strh	r2, [r3, #0]

            writeSingleRegister_M(slaveAddr, startAddr, value);
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <ModbusMenuInteraction+0x2c8>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <ModbusMenuInteraction+0x2d0>)
 8001332:	8811      	ldrh	r1, [r2, #0]
 8001334:	4a10      	ldr	r2, [pc, #64]	@ (8001378 <ModbusMenuInteraction+0x2ec>)
 8001336:	8812      	ldrh	r2, [r2, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f001 fa1f 	bl	800277c <writeSingleRegister_M>
            break;
 800133e:	e136      	b.n	80015ae <ModbusMenuInteraction+0x522>
 8001340:	08008cd4 	.word	0x08008cd4
 8001344:	20000344 	.word	0x20000344
 8001348:	2000038c 	.word	0x2000038c
 800134c:	200003ac 	.word	0x200003ac
 8001350:	08008b64 	.word	0x08008b64
 8001354:	200003ad 	.word	0x200003ad
 8001358:	08008b84 	.word	0x08008b84
 800135c:	200003ae 	.word	0x200003ae
 8001360:	08008b9c 	.word	0x08008b9c
 8001364:	200003b0 	.word	0x200003b0
 8001368:	08008bbc 	.word	0x08008bbc
 800136c:	08008bd8 	.word	0x08008bd8
 8001370:	08008bf4 	.word	0x08008bf4
 8001374:	08008c08 	.word	0x08008c08
 8001378:	200003b2 	.word	0x200003b2

        case 6:  // Write Multiple Registers
            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Start Address: ", 23, HAL_MAX_DELAY);
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	2217      	movs	r2, #23
 8001382:	4991      	ldr	r1, [pc, #580]	@ (80015c8 <ModbusMenuInteraction+0x53c>)
 8001384:	4891      	ldr	r0, [pc, #580]	@ (80015cc <ModbusMenuInteraction+0x540>)
 8001386:	f005 fb67 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	2205      	movs	r2, #5
 8001390:	498f      	ldr	r1, [pc, #572]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 8001392:	488e      	ldr	r0, [pc, #568]	@ (80015cc <ModbusMenuInteraction+0x540>)
 8001394:	f005 fbeb 	bl	8006b6e <HAL_UART_Receive>
            startAddr = atoi(buffer);
 8001398:	488d      	ldr	r0, [pc, #564]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 800139a:	f006 fc4f 	bl	8007c3c <atoi>
 800139e:	4603      	mov	r3, r0
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b8c      	ldr	r3, [pc, #560]	@ (80015d4 <ModbusMenuInteraction+0x548>)
 80013a4:	801a      	strh	r2, [r3, #0]

            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Number of Registers: ", 29, HAL_MAX_DELAY);
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	221d      	movs	r2, #29
 80013ac:	498a      	ldr	r1, [pc, #552]	@ (80015d8 <ModbusMenuInteraction+0x54c>)
 80013ae:	4887      	ldr	r0, [pc, #540]	@ (80015cc <ModbusMenuInteraction+0x540>)
 80013b0:	f005 fb52 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295
 80013b8:	2205      	movs	r2, #5
 80013ba:	4985      	ldr	r1, [pc, #532]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 80013bc:	4883      	ldr	r0, [pc, #524]	@ (80015cc <ModbusMenuInteraction+0x540>)
 80013be:	f005 fbd6 	bl	8006b6e <HAL_UART_Receive>
            numRegs = atoi(buffer);
 80013c2:	4883      	ldr	r0, [pc, #524]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 80013c4:	f006 fc3a 	bl	8007c3c <atoi>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b83      	ldr	r3, [pc, #524]	@ (80015dc <ModbusMenuInteraction+0x550>)
 80013ce:	801a      	strh	r2, [r3, #0]

            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Values (space separated): ", 34, HAL_MAX_DELAY);
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
 80013d4:	2222      	movs	r2, #34	@ 0x22
 80013d6:	4982      	ldr	r1, [pc, #520]	@ (80015e0 <ModbusMenuInteraction+0x554>)
 80013d8:	487c      	ldr	r0, [pc, #496]	@ (80015cc <ModbusMenuInteraction+0x540>)
 80013da:	f005 fb3d 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 32, HAL_MAX_DELAY);  // Example: "100 200 300"
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	2220      	movs	r2, #32
 80013e4:	497a      	ldr	r1, [pc, #488]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 80013e6:	4879      	ldr	r0, [pc, #484]	@ (80015cc <ModbusMenuInteraction+0x540>)
 80013e8:	f005 fbc1 	bl	8006b6e <HAL_UART_Receive>
            for (int i = 0; i < numRegs; i++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80013f2:	e015      	b.n	8001420 <ModbusMenuInteraction+0x394>
                values[i] = atoi(&buffer[i * 5]);  // Convert each value (space separated)
 80013f4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	4a74      	ldr	r2, [pc, #464]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 8001400:	4413      	add	r3, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f006 fc1a 	bl	8007c3c <atoi>
 8001408:	4603      	mov	r3, r0
 800140a:	b299      	uxth	r1, r3
 800140c:	4a75      	ldr	r2, [pc, #468]	@ (80015e4 <ModbusMenuInteraction+0x558>)
 800140e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001412:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (int i = 0; i < numRegs; i++) {
 8001416:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800141a:	3301      	adds	r3, #1
 800141c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001420:	4b6e      	ldr	r3, [pc, #440]	@ (80015dc <ModbusMenuInteraction+0x550>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800142a:	4293      	cmp	r3, r2
 800142c:	dbe2      	blt.n	80013f4 <ModbusMenuInteraction+0x368>
            }

            writeMultipleRegisters_M(slaveAddr, startAddr, numRegs, values);
 800142e:	4b6e      	ldr	r3, [pc, #440]	@ (80015e8 <ModbusMenuInteraction+0x55c>)
 8001430:	7818      	ldrb	r0, [r3, #0]
 8001432:	4b68      	ldr	r3, [pc, #416]	@ (80015d4 <ModbusMenuInteraction+0x548>)
 8001434:	8819      	ldrh	r1, [r3, #0]
 8001436:	4b69      	ldr	r3, [pc, #420]	@ (80015dc <ModbusMenuInteraction+0x550>)
 8001438:	881a      	ldrh	r2, [r3, #0]
 800143a:	4b6a      	ldr	r3, [pc, #424]	@ (80015e4 <ModbusMenuInteraction+0x558>)
 800143c:	f001 f9e0 	bl	8002800 <writeMultipleRegisters_M>
            break;
 8001440:	e0b5      	b.n	80015ae <ModbusMenuInteraction+0x522>

        case 7:  // Write Single Coil
            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Address: ", 17, HAL_MAX_DELAY);
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	2211      	movs	r2, #17
 8001448:	4968      	ldr	r1, [pc, #416]	@ (80015ec <ModbusMenuInteraction+0x560>)
 800144a:	4860      	ldr	r0, [pc, #384]	@ (80015cc <ModbusMenuInteraction+0x540>)
 800144c:	f005 fb04 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
 8001454:	2205      	movs	r2, #5
 8001456:	495e      	ldr	r1, [pc, #376]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 8001458:	485c      	ldr	r0, [pc, #368]	@ (80015cc <ModbusMenuInteraction+0x540>)
 800145a:	f005 fb88 	bl	8006b6e <HAL_UART_Receive>
            startAddr = atoi(buffer);
 800145e:	485c      	ldr	r0, [pc, #368]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 8001460:	f006 fbec 	bl	8007c3c <atoi>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	4b5a      	ldr	r3, [pc, #360]	@ (80015d4 <ModbusMenuInteraction+0x548>)
 800146a:	801a      	strh	r2, [r3, #0]

            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Value (0 or 1): ", 24, HAL_MAX_DELAY);
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	2218      	movs	r2, #24
 8001472:	495f      	ldr	r1, [pc, #380]	@ (80015f0 <ModbusMenuInteraction+0x564>)
 8001474:	4855      	ldr	r0, [pc, #340]	@ (80015cc <ModbusMenuInteraction+0x540>)
 8001476:	f005 faef 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	2205      	movs	r2, #5
 8001480:	4953      	ldr	r1, [pc, #332]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 8001482:	4852      	ldr	r0, [pc, #328]	@ (80015cc <ModbusMenuInteraction+0x540>)
 8001484:	f005 fb73 	bl	8006b6e <HAL_UART_Receive>
            value = atoi(buffer);
 8001488:	4851      	ldr	r0, [pc, #324]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 800148a:	f006 fbd7 	bl	8007c3c <atoi>
 800148e:	4603      	mov	r3, r0
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b58      	ldr	r3, [pc, #352]	@ (80015f4 <ModbusMenuInteraction+0x568>)
 8001494:	801a      	strh	r2, [r3, #0]

            if (value != 0 && value != 1) {
 8001496:	4b57      	ldr	r3, [pc, #348]	@ (80015f4 <ModbusMenuInteraction+0x568>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <ModbusMenuInteraction+0x42a>
 800149e:	4b55      	ldr	r3, [pc, #340]	@ (80015f4 <ModbusMenuInteraction+0x568>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d007      	beq.n	80014b6 <ModbusMenuInteraction+0x42a>
                HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nInvalid value. Only 0 or 1 allowed.", 37, HAL_MAX_DELAY);
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	2225      	movs	r2, #37	@ 0x25
 80014ac:	4952      	ldr	r1, [pc, #328]	@ (80015f8 <ModbusMenuInteraction+0x56c>)
 80014ae:	4847      	ldr	r0, [pc, #284]	@ (80015cc <ModbusMenuInteraction+0x540>)
 80014b0:	f005 fad2 	bl	8006a58 <HAL_UART_Transmit>
            } else {
                writeSingleCoil_M(slaveAddr, startAddr, value);
            }
            break;
 80014b4:	e07b      	b.n	80015ae <ModbusMenuInteraction+0x522>
                writeSingleCoil_M(slaveAddr, startAddr, value);
 80014b6:	4b4c      	ldr	r3, [pc, #304]	@ (80015e8 <ModbusMenuInteraction+0x55c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4a46      	ldr	r2, [pc, #280]	@ (80015d4 <ModbusMenuInteraction+0x548>)
 80014bc:	8811      	ldrh	r1, [r2, #0]
 80014be:	4a4d      	ldr	r2, [pc, #308]	@ (80015f4 <ModbusMenuInteraction+0x568>)
 80014c0:	8812      	ldrh	r2, [r2, #0]
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 fa13 	bl	80028f0 <writeSingleCoil_M>
            break;
 80014ca:	e070      	b.n	80015ae <ModbusMenuInteraction+0x522>

        case 8:  // Write Multiple Coils
            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Start Address: ", 23, HAL_MAX_DELAY);
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
 80014d0:	2217      	movs	r2, #23
 80014d2:	493d      	ldr	r1, [pc, #244]	@ (80015c8 <ModbusMenuInteraction+0x53c>)
 80014d4:	483d      	ldr	r0, [pc, #244]	@ (80015cc <ModbusMenuInteraction+0x540>)
 80014d6:	f005 fabf 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	2205      	movs	r2, #5
 80014e0:	493b      	ldr	r1, [pc, #236]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 80014e2:	483a      	ldr	r0, [pc, #232]	@ (80015cc <ModbusMenuInteraction+0x540>)
 80014e4:	f005 fb43 	bl	8006b6e <HAL_UART_Receive>
            startAddr = atoi(buffer);
 80014e8:	4839      	ldr	r0, [pc, #228]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 80014ea:	f006 fba7 	bl	8007c3c <atoi>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b38      	ldr	r3, [pc, #224]	@ (80015d4 <ModbusMenuInteraction+0x548>)
 80014f4:	801a      	strh	r2, [r3, #0]

            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Number of Coils: ", 24, HAL_MAX_DELAY);
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	2218      	movs	r2, #24
 80014fc:	493f      	ldr	r1, [pc, #252]	@ (80015fc <ModbusMenuInteraction+0x570>)
 80014fe:	4833      	ldr	r0, [pc, #204]	@ (80015cc <ModbusMenuInteraction+0x540>)
 8001500:	f005 faaa 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 5, HAL_MAX_DELAY);
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	2205      	movs	r2, #5
 800150a:	4931      	ldr	r1, [pc, #196]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 800150c:	482f      	ldr	r0, [pc, #188]	@ (80015cc <ModbusMenuInteraction+0x540>)
 800150e:	f005 fb2e 	bl	8006b6e <HAL_UART_Receive>
            numRegs = atoi(buffer);
 8001512:	482f      	ldr	r0, [pc, #188]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 8001514:	f006 fb92 	bl	8007c3c <atoi>
 8001518:	4603      	mov	r3, r0
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b2f      	ldr	r3, [pc, #188]	@ (80015dc <ModbusMenuInteraction+0x550>)
 800151e:	801a      	strh	r2, [r3, #0]

            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nEnter Coil Values (space separated): ", 37, HAL_MAX_DELAY);
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	2225      	movs	r2, #37	@ 0x25
 8001526:	4936      	ldr	r1, [pc, #216]	@ (8001600 <ModbusMenuInteraction+0x574>)
 8001528:	4828      	ldr	r0, [pc, #160]	@ (80015cc <ModbusMenuInteraction+0x540>)
 800152a:	f005 fa95 	bl	8006a58 <HAL_UART_Transmit>
            HAL_UART_Receive(&huart3, (uint8_t*)buffer, 32, HAL_MAX_DELAY);  // Example: "1 0 1"
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	2220      	movs	r2, #32
 8001534:	4926      	ldr	r1, [pc, #152]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 8001536:	4825      	ldr	r0, [pc, #148]	@ (80015cc <ModbusMenuInteraction+0x540>)
 8001538:	f005 fb19 	bl	8006b6e <HAL_UART_Receive>
            for (int i = 0; i < (numRegs + 7) / 8; i++) {
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001542:	e016      	b.n	8001572 <ModbusMenuInteraction+0x4e6>
                coils[i] = atoi(&buffer[i * 5]);  // Convert each value (space separated)
 8001544:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	4a20      	ldr	r2, [pc, #128]	@ (80015d0 <ModbusMenuInteraction+0x544>)
 8001550:	4413      	add	r3, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f006 fb72 	bl	8007c3c <atoi>
 8001558:	4603      	mov	r3, r0
 800155a:	b2d9      	uxtb	r1, r3
 800155c:	4a29      	ldr	r2, [pc, #164]	@ (8001604 <ModbusMenuInteraction+0x578>)
 800155e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001562:	4413      	add	r3, r2
 8001564:	460a      	mov	r2, r1
 8001566:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < (numRegs + 7) / 8; i++) {
 8001568:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800156c:	3301      	adds	r3, #1
 800156e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <ModbusMenuInteraction+0x550>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	3307      	adds	r3, #7
 8001578:	2b00      	cmp	r3, #0
 800157a:	da00      	bge.n	800157e <ModbusMenuInteraction+0x4f2>
 800157c:	3307      	adds	r3, #7
 800157e:	10db      	asrs	r3, r3, #3
 8001580:	461a      	mov	r2, r3
 8001582:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001586:	4293      	cmp	r3, r2
 8001588:	dbdc      	blt.n	8001544 <ModbusMenuInteraction+0x4b8>
            }

            writeMultipleCoils_M(slaveAddr, startAddr, numRegs, coils);
 800158a:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <ModbusMenuInteraction+0x55c>)
 800158c:	7818      	ldrb	r0, [r3, #0]
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <ModbusMenuInteraction+0x548>)
 8001590:	8819      	ldrh	r1, [r3, #0]
 8001592:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <ModbusMenuInteraction+0x550>)
 8001594:	881a      	ldrh	r2, [r3, #0]
 8001596:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <ModbusMenuInteraction+0x578>)
 8001598:	f001 f9ee 	bl	8002978 <writeMultipleCoils_M>
            break;
 800159c:	e007      	b.n	80015ae <ModbusMenuInteraction+0x522>

        default:
            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nInvalid choice.\r\n", 19, HAL_MAX_DELAY);
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	2213      	movs	r2, #19
 80015a4:	4918      	ldr	r1, [pc, #96]	@ (8001608 <ModbusMenuInteraction+0x57c>)
 80015a6:	4809      	ldr	r0, [pc, #36]	@ (80015cc <ModbusMenuInteraction+0x540>)
 80015a8:	f005 fa56 	bl	8006a58 <HAL_UART_Transmit>
            break;
 80015ac:	bf00      	nop
        }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\nOperation complete.\r\n", 23, HAL_MAX_DELAY);
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	2217      	movs	r2, #23
 80015b4:	4915      	ldr	r1, [pc, #84]	@ (800160c <ModbusMenuInteraction+0x580>)
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <ModbusMenuInteraction+0x540>)
 80015b8:	f005 fa4e 	bl	8006a58 <HAL_UART_Transmit>
    //ShowMenu();
}
 80015bc:	bf00      	nop
 80015be:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	08008b84 	.word	0x08008b84
 80015cc:	20000344 	.word	0x20000344
 80015d0:	2000038c 	.word	0x2000038c
 80015d4:	200003ae 	.word	0x200003ae
 80015d8:	08008b9c 	.word	0x08008b9c
 80015dc:	200003b0 	.word	0x200003b0
 80015e0:	08008c18 	.word	0x08008c18
 80015e4:	200003b4 	.word	0x200003b4
 80015e8:	200003ad 	.word	0x200003ad
 80015ec:	08008bf4 	.word	0x08008bf4
 80015f0:	08008c3c 	.word	0x08008c3c
 80015f4:	200003b2 	.word	0x200003b2
 80015f8:	08008c58 	.word	0x08008c58
 80015fc:	08008bbc 	.word	0x08008bbc
 8001600:	08008c80 	.word	0x08008c80
 8001604:	200003c8 	.word	0x200003c8
 8001608:	08008ca8 	.word	0x08008ca8
 800160c:	08008cbc 	.word	0x08008cbc

08001610 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b094      	sub	sp, #80	@ 0x50
 8001614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	2230      	movs	r2, #48	@ 0x30
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f006 fbb4 	bl	8007d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <SystemClock_Config+0xcc>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	4a27      	ldr	r2, [pc, #156]	@ (80016dc <SystemClock_Config+0xcc>)
 800163e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001642:	6413      	str	r3, [r2, #64]	@ 0x40
 8001644:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <SystemClock_Config+0xcc>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	4b22      	ldr	r3, [pc, #136]	@ (80016e0 <SystemClock_Config+0xd0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a21      	ldr	r2, [pc, #132]	@ (80016e0 <SystemClock_Config+0xd0>)
 800165a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <SystemClock_Config+0xd0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800166c:	2302      	movs	r3, #2
 800166e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001670:	2301      	movs	r3, #1
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001674:	2310      	movs	r3, #16
 8001676:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001678:	2302      	movs	r3, #2
 800167a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800167c:	2300      	movs	r3, #0
 800167e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001680:	2308      	movs	r3, #8
 8001682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001684:	23a8      	movs	r3, #168	@ 0xa8
 8001686:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001688:	2302      	movs	r3, #2
 800168a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800168c:	2304      	movs	r3, #4
 800168e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001690:	f107 0320 	add.w	r3, r7, #32
 8001694:	4618      	mov	r0, r3
 8001696:	f003 fe41 	bl	800531c <HAL_RCC_OscConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016a0:	f000 fa54 	bl	8001b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a4:	230f      	movs	r3, #15
 80016a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a8:	2302      	movs	r3, #2
 80016aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	2105      	movs	r1, #5
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 f8a2 	bl	800580c <HAL_RCC_ClockConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016ce:	f000 fa3d 	bl	8001b4c <Error_Handler>
  }
}
 80016d2:	bf00      	nop
 80016d4:	3750      	adds	r7, #80	@ 0x50
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40007000 	.word	0x40007000

080016e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ea:	463b      	mov	r3, r7
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016f6:	4b28      	ldr	r3, [pc, #160]	@ (8001798 <MX_ADC1_Init+0xb4>)
 80016f8:	4a28      	ldr	r2, [pc, #160]	@ (800179c <MX_ADC1_Init+0xb8>)
 80016fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016fc:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <MX_ADC1_Init+0xb4>)
 80016fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001702:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001704:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <MX_ADC1_Init+0xb4>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800170a:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <MX_ADC1_Init+0xb4>)
 800170c:	2201      	movs	r2, #1
 800170e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001710:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <MX_ADC1_Init+0xb4>)
 8001712:	2200      	movs	r2, #0
 8001714:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001716:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <MX_ADC1_Init+0xb4>)
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800171e:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <MX_ADC1_Init+0xb4>)
 8001720:	2200      	movs	r2, #0
 8001722:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001724:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <MX_ADC1_Init+0xb4>)
 8001726:	4a1e      	ldr	r2, [pc, #120]	@ (80017a0 <MX_ADC1_Init+0xbc>)
 8001728:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800172a:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <MX_ADC1_Init+0xb4>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001730:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <MX_ADC1_Init+0xb4>)
 8001732:	2202      	movs	r2, #2
 8001734:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001736:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <MX_ADC1_Init+0xb4>)
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800173e:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <MX_ADC1_Init+0xb4>)
 8001740:	2201      	movs	r2, #1
 8001742:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001744:	4814      	ldr	r0, [pc, #80]	@ (8001798 <MX_ADC1_Init+0xb4>)
 8001746:	f001 fd25 	bl	8003194 <HAL_ADC_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001750:	f000 f9fc 	bl	8001b4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001754:	2308      	movs	r3, #8
 8001756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001758:	2301      	movs	r3, #1
 800175a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800175c:	2307      	movs	r3, #7
 800175e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001760:	463b      	mov	r3, r7
 8001762:	4619      	mov	r1, r3
 8001764:	480c      	ldr	r0, [pc, #48]	@ (8001798 <MX_ADC1_Init+0xb4>)
 8001766:	f001 fef7 	bl	8003558 <HAL_ADC_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001770:	f000 f9ec 	bl	8001b4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001774:	2309      	movs	r3, #9
 8001776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001778:	2302      	movs	r3, #2
 800177a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800177c:	463b      	mov	r3, r7
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	@ (8001798 <MX_ADC1_Init+0xb4>)
 8001782:	f001 fee9 	bl	8003558 <HAL_ADC_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800178c:	f000 f9de 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000188 	.word	0x20000188
 800179c:	40012000 	.word	0x40012000
 80017a0:	0f000001 	.word	0x0f000001

080017a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017aa:	4a13      	ldr	r2, [pc, #76]	@ (80017f8 <MX_I2C1_Init+0x54>)
 80017ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017b0:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <MX_I2C1_Init+0x58>)
 80017b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ce:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d4:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017e2:	f002 fd77 	bl	80042d4 <HAL_I2C_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017ec:	f000 f9ae 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200001d0 	.word	0x200001d0
 80017f8:	40005400 	.word	0x40005400
 80017fc:	00061a80 	.word	0x00061a80

08001800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	@ 0x28
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001806:	f107 0320 	add.w	r3, r7, #32
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	615a      	str	r2, [r3, #20]
 8001820:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001822:	4b22      	ldr	r3, [pc, #136]	@ (80018ac <MX_TIM2_Init+0xac>)
 8001824:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001828:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800182a:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <MX_TIM2_Init+0xac>)
 800182c:	2253      	movs	r2, #83	@ 0x53
 800182e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001830:	4b1e      	ldr	r3, [pc, #120]	@ (80018ac <MX_TIM2_Init+0xac>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001836:	4b1d      	ldr	r3, [pc, #116]	@ (80018ac <MX_TIM2_Init+0xac>)
 8001838:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800183c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <MX_TIM2_Init+0xac>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001844:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <MX_TIM2_Init+0xac>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800184a:	4818      	ldr	r0, [pc, #96]	@ (80018ac <MX_TIM2_Init+0xac>)
 800184c:	f004 fa7e 	bl	8005d4c <HAL_TIM_PWM_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001856:	f000 f979 	bl	8001b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001862:	f107 0320 	add.w	r3, r7, #32
 8001866:	4619      	mov	r1, r3
 8001868:	4810      	ldr	r0, [pc, #64]	@ (80018ac <MX_TIM2_Init+0xac>)
 800186a:	f004 ffe3 	bl	8006834 <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001874:	f000 f96a 	bl	8001b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001878:	2360      	movs	r3, #96	@ 0x60
 800187a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2200      	movs	r2, #0
 800188c:	4619      	mov	r1, r3
 800188e:	4807      	ldr	r0, [pc, #28]	@ (80018ac <MX_TIM2_Init+0xac>)
 8001890:	f004 fc64 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800189a:	f000 f957 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800189e:	4803      	ldr	r0, [pc, #12]	@ (80018ac <MX_TIM2_Init+0xac>)
 80018a0:	f001 f9fe 	bl	8002ca0 <HAL_TIM_MspPostInit>

}
 80018a4:	bf00      	nop
 80018a6:	3728      	adds	r7, #40	@ 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000224 	.word	0x20000224

080018b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	@ 0x28
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]
 80018ce:	615a      	str	r2, [r3, #20]
 80018d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018d2:	4b22      	ldr	r3, [pc, #136]	@ (800195c <MX_TIM3_Init+0xac>)
 80018d4:	4a22      	ldr	r2, [pc, #136]	@ (8001960 <MX_TIM3_Init+0xb0>)
 80018d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80018d8:	4b20      	ldr	r3, [pc, #128]	@ (800195c <MX_TIM3_Init+0xac>)
 80018da:	2253      	movs	r2, #83	@ 0x53
 80018dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018de:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <MX_TIM3_Init+0xac>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80018e4:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <MX_TIM3_Init+0xac>)
 80018e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <MX_TIM3_Init+0xac>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <MX_TIM3_Init+0xac>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018f8:	4818      	ldr	r0, [pc, #96]	@ (800195c <MX_TIM3_Init+0xac>)
 80018fa:	f004 fa27 	bl	8005d4c <HAL_TIM_PWM_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001904:	f000 f922 	bl	8001b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	4619      	mov	r1, r3
 8001916:	4811      	ldr	r0, [pc, #68]	@ (800195c <MX_TIM3_Init+0xac>)
 8001918:	f004 ff8c 	bl	8006834 <HAL_TIMEx_MasterConfigSynchronization>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001922:	f000 f913 	bl	8001b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001926:	2360      	movs	r3, #96	@ 0x60
 8001928:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2200      	movs	r2, #0
 800193a:	4619      	mov	r1, r3
 800193c:	4807      	ldr	r0, [pc, #28]	@ (800195c <MX_TIM3_Init+0xac>)
 800193e:	f004 fc0d 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001948:	f000 f900 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800194c:	4803      	ldr	r0, [pc, #12]	@ (800195c <MX_TIM3_Init+0xac>)
 800194e:	f001 f9a7 	bl	8002ca0 <HAL_TIM_MspPostInit>

}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	@ 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000026c 	.word	0x2000026c
 8001960:	40000400 	.word	0x40000400

08001964 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196a:	463b      	mov	r3, r7
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001972:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <MX_TIM6_Init+0x64>)
 8001974:	4a15      	ldr	r2, [pc, #84]	@ (80019cc <MX_TIM6_Init+0x68>)
 8001976:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 8001978:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <MX_TIM6_Init+0x64>)
 800197a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800197e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <MX_TIM6_Init+0x64>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <MX_TIM6_Init+0x64>)
 8001988:	f242 720f 	movw	r2, #9999	@ 0x270f
 800198c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198e:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <MX_TIM6_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001994:	480c      	ldr	r0, [pc, #48]	@ (80019c8 <MX_TIM6_Init+0x64>)
 8001996:	f004 f919 	bl	8005bcc <HAL_TIM_Base_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80019a0:	f000 f8d4 	bl	8001b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019ac:	463b      	mov	r3, r7
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <MX_TIM6_Init+0x64>)
 80019b2:	f004 ff3f 	bl	8006834 <HAL_TIMEx_MasterConfigSynchronization>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80019bc:	f000 f8c6 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200002b4 	.word	0x200002b4
 80019cc:	40001000 	.word	0x40001000

080019d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	@ (8001a20 <MX_USART2_UART_Init+0x50>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <MX_USART2_UART_Init+0x4c>)
 8001a08:	f004 ffa4 	bl	8006954 <HAL_UART_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a12:	f000 f89b 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002fc 	.word	0x200002fc
 8001a20:	40004400 	.word	0x40004400

08001a24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a28:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	@ (8001a74 <MX_USART3_UART_Init+0x50>)
 8001a2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a2e:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a30:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a48:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a5a:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a5c:	f004 ff7a 	bl	8006954 <HAL_UART_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a66:	f000 f871 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000344 	.word	0x20000344
 8001a74:	40004800 	.word	0x40004800

08001a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	@ 0x28
 8001a7c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	4b2f      	ldr	r3, [pc, #188]	@ (8001b40 <MX_GPIO_Init+0xc8>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	4a2e      	ldr	r2, [pc, #184]	@ (8001b40 <MX_GPIO_Init+0xc8>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <MX_GPIO_Init+0xc8>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <MX_GPIO_Init+0xc8>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a27      	ldr	r2, [pc, #156]	@ (8001b40 <MX_GPIO_Init+0xc8>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <MX_GPIO_Init+0xc8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]

  // Activer les horloges pour les Ports D et C
  	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	4b21      	ldr	r3, [pc, #132]	@ (8001b40 <MX_GPIO_Init+0xc8>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a20      	ldr	r2, [pc, #128]	@ (8001b40 <MX_GPIO_Init+0xc8>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b40 <MX_GPIO_Init+0xc8>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
  	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <MX_GPIO_Init+0xc8>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a19      	ldr	r2, [pc, #100]	@ (8001b40 <MX_GPIO_Init+0xc8>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <MX_GPIO_Init+0xc8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]

  	  // Configuration des broches du Port D (PD0 à PD15) en sortie
  	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]
  	  GPIO_InitStruct.Pin = GPIO_PIN_All; // PD0 à PD15
 8001afe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b02:	617b      	str	r3, [r7, #20]
  	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Mode sortie Push-Pull
 8001b04:	2301      	movs	r3, #1
 8001b06:	61bb      	str	r3, [r7, #24]
  	  GPIO_InitStruct.Pull = GPIO_NOPULL; // Pas de résistance interne
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
  	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Vitesse basse
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
  	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	480b      	ldr	r0, [pc, #44]	@ (8001b44 <MX_GPIO_Init+0xcc>)
 8001b18:	f002 f912 	bl	8003d40 <HAL_GPIO_Init>

  	  // Configuration des broches du Port C (PC0 à PC15) en entrée
  	  GPIO_InitStruct.Pin = GPIO_PIN_All; // PC0 à PC15
 8001b1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b20:	617b      	str	r3, [r7, #20]
  	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Mode entrée
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  	  GPIO_InitStruct.Pull = GPIO_PULLUP; // Résistance Pull-Up pour éviter des états flottants
 8001b26:	2301      	movs	r3, #1
 8001b28:	61fb      	str	r3, [r7, #28]
  	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	@ (8001b48 <MX_GPIO_Init+0xd0>)
 8001b32:	f002 f905 	bl	8003d40 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	@ 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020c00 	.word	0x40020c00
 8001b48:	40020800 	.word	0x40020800

08001b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b50:	b672      	cpsid	i
}
 8001b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <Error_Handler+0x8>

08001b58 <Read_ADC_Channel>:
		0b11001100, 0b01101100, 0b01010011, 0b11111111, 0b00000000,    // 80-119  10081-10120
		0b01010101, 0b00111100, 0b00001111, 0b11110000, 0b10001111,    // 120-159 10121-10160
		0b01010100, 0b10011001, 0b11111000, 0b00001101, 0b00101010,    // 160-199 10161-10200
};

uint16_t Read_ADC_Channel(ADC_HandleTypeDef *hadc, uint32_t channel) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
    // Démarrer la conversion (effectuer une conversion sur les deux canaux en séquence)
    HAL_ADC_Start(hadc);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f001 fb5a 	bl	800321c <HAL_ADC_Start>

    // Attendre la fin de la conversion
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f001 fc5a 	bl	8003426 <HAL_ADC_PollForConversion>

    // Lire la valeur du premier canal (canal 8)
    uint16_t value1 = HAL_ADC_GetValue(hadc);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f001 fce2 	bl	800353c <HAL_ADC_GetValue>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	81fb      	strh	r3, [r7, #14]

    // Attendre la fin de la conversion pour le deuxième canal (canal 9)
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f001 fc50 	bl	8003426 <HAL_ADC_PollForConversion>
    uint16_t value2 = HAL_ADC_GetValue(hadc);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f001 fcd8 	bl	800353c <HAL_ADC_GetValue>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	81bb      	strh	r3, [r7, #12]

    // Arrêter l'ADC
    HAL_ADC_Stop(hadc);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f001 fc15 	bl	80033c0 <HAL_ADC_Stop>

    // Retourner une valeur selon le canal demandé
    if (channel == ADC_CHANNEL_8) {
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d101      	bne.n	8001ba0 <Read_ADC_Channel+0x48>
        return value1; // Retourner la valeur de PB0
 8001b9c:	89fb      	ldrh	r3, [r7, #14]
 8001b9e:	e005      	b.n	8001bac <Read_ADC_Channel+0x54>
    } else if (channel == ADC_CHANNEL_9) {
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b09      	cmp	r3, #9
 8001ba4:	d101      	bne.n	8001baa <Read_ADC_Channel+0x52>
        return value2; // Retourner la valeur de PB1
 8001ba6:	89bb      	ldrh	r3, [r7, #12]
 8001ba8:	e000      	b.n	8001bac <Read_ADC_Channel+0x54>
    }

    return 0;  // Par défaut, retourner 0 si aucun canal ne correspond
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <Update_Input_Registers>:

void Update_Input_Registers(void) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
    extern ADC_HandleTypeDef hadc1;

    // Lire les valeurs analogiques des potentiomètres
    uint16_t pot1_value = Read_ADC_Channel(&hadc1, ADC_CHANNEL_8); // PB0
 8001bba:	2108      	movs	r1, #8
 8001bbc:	480d      	ldr	r0, [pc, #52]	@ (8001bf4 <Update_Input_Registers+0x40>)
 8001bbe:	f7ff ffcb 	bl	8001b58 <Read_ADC_Channel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	80fb      	strh	r3, [r7, #6]
    uint16_t pot2_value = Read_ADC_Channel(&hadc1, ADC_CHANNEL_9); // PB1
 8001bc6:	2109      	movs	r1, #9
 8001bc8:	480a      	ldr	r0, [pc, #40]	@ (8001bf4 <Update_Input_Registers+0x40>)
 8001bca:	f7ff ffc5 	bl	8001b58 <Read_ADC_Channel>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	80bb      	strh	r3, [r7, #4]

    // Mettre à jour Input_Registers_Database
    Input_Registers_Database[0] = pot1_value; // Stockage pour PB0
 8001bd2:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <Update_Input_Registers+0x44>)
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	8013      	strh	r3, [r2, #0]
    Input_Registers_Database[1] = pot2_value; // Stockage pour PB1
 8001bd8:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <Update_Input_Registers+0x44>)
 8001bda:	88bb      	ldrh	r3, [r7, #4]
 8001bdc:	8053      	strh	r3, [r2, #2]
    Holding_Registers_Database[0] = pot1_value; // Stockage des parametres de PB0
 8001bde:	4a07      	ldr	r2, [pc, #28]	@ (8001bfc <Update_Input_Registers+0x48>)
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	8013      	strh	r3, [r2, #0]
    Holding_Registers_Database[1] = pot2_value; // Stockage des parametres de PB1
 8001be4:	4a05      	ldr	r2, [pc, #20]	@ (8001bfc <Update_Input_Registers+0x48>)
 8001be6:	88bb      	ldrh	r3, [r7, #4]
 8001be8:	8053      	strh	r3, [r2, #2]
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000188 	.word	0x20000188
 8001bf8:	20000074 	.word	0x20000074
 8001bfc:	20000010 	.word	0x20000010

08001c00 <sendData>:

void sendData (uint8_t *data, int size)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
	// we will calculate the CRC in this function itself
	uint16_t crc = crc16(data, size);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 fc75 	bl	8002500 <crc16>
 8001c16:	4603      	mov	r3, r0
 8001c18:	81fb      	strh	r3, [r7, #14]
	data[size] = crc&0xFF;   // CRC LOW
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	89fa      	ldrh	r2, [r7, #14]
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8001c26:	89fb      	ldrh	r3, [r7, #14]
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	b299      	uxth	r1, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	b2ca      	uxtb	r2, r1
 8001c36:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, data, size+2, 1000);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4803      	ldr	r0, [pc, #12]	@ (8001c54 <sendData+0x54>)
 8001c48:	f004 ff06 	bl	8006a58 <HAL_UART_Transmit>
}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200002fc 	.word	0x200002fc

08001c58 <modbusException>:

void modbusException (uint8_t exceptioncode)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	TxData[0] = RxData[0];       // slave ID
 8001c62:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <modbusException+0x38>)
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <modbusException+0x3c>)
 8001c68:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1]|0x80;  // adding 1 to the MSB of the function code
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <modbusException+0x38>)
 8001c6c:	785b      	ldrb	r3, [r3, #1]
 8001c6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	4b07      	ldr	r3, [pc, #28]	@ (8001c94 <modbusException+0x3c>)
 8001c76:	705a      	strb	r2, [r3, #1]
	TxData[2] = exceptioncode;   // Load the Exception code
 8001c78:	4a06      	ldr	r2, [pc, #24]	@ (8001c94 <modbusException+0x3c>)
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	7093      	strb	r3, [r2, #2]
	sendData(TxData, 3);         // send Data... CRC will be calculated in the function
 8001c7e:	2103      	movs	r1, #3
 8001c80:	4804      	ldr	r0, [pc, #16]	@ (8001c94 <modbusException+0x3c>)
 8001c82:	f7ff ffbd 	bl	8001c00 <sendData>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200003dc 	.word	0x200003dc
 8001c94:	200004dc 	.word	0x200004dc

08001c98 <readHoldingRegs>:


uint8_t readHoldingRegs (void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8001c9e:	4b34      	ldr	r3, [pc, #208]	@ (8001d70 <readHoldingRegs+0xd8>)
 8001ca0:	789b      	ldrb	r3, [r3, #2]
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	b21a      	sxth	r2, r3
 8001ca6:	4b32      	ldr	r3, [pc, #200]	@ (8001d70 <readHoldingRegs+0xd8>)
 8001ca8:	78db      	ldrb	r3, [r3, #3]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	4313      	orrs	r3, r2
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d70 <readHoldingRegs+0xd8>)
 8001cb4:	791b      	ldrb	r3, [r3, #4]
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	b21a      	sxth	r2, r3
 8001cba:	4b2d      	ldr	r3, [pc, #180]	@ (8001d70 <readHoldingRegs+0xd8>)
 8001cbc:	795b      	ldrb	r3, [r3, #5]
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <readHoldingRegs+0x3a>
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	2b7d      	cmp	r3, #125	@ 0x7d
 8001cd0:	d904      	bls.n	8001cdc <readHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f7ff ffc0 	bl	8001c58 <modbusException>
		return 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e044      	b.n	8001d66 <readHoldingRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8001cdc:	89fa      	ldrh	r2, [r7, #14]
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8001ce8:	883b      	ldrh	r3, [r7, #0]
 8001cea:	2b31      	cmp	r3, #49	@ 0x31
 8001cec:	d904      	bls.n	8001cf8 <readHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8001cee:	2002      	movs	r0, #2
 8001cf0:	f7ff ffb2 	bl	8001c58 <modbusException>
		return 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e036      	b.n	8001d66 <readHoldingRegs+0xce>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d74 <readHoldingRegs+0xdc>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001d70 <readHoldingRegs+0xd8>)
 8001d00:	785a      	ldrb	r2, [r3, #1]
 8001d02:	4b1c      	ldr	r3, [pc, #112]	@ (8001d74 <readHoldingRegs+0xdc>)
 8001d04:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b19      	ldr	r3, [pc, #100]	@ (8001d74 <readHoldingRegs+0xdc>)
 8001d10:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8001d12:	2303      	movs	r3, #3
 8001d14:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	e01b      	b.n	8001d54 <readHoldingRegs+0xbc>
	{
		TxData[indx++] = (Holding_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8001d1c:	89fb      	ldrh	r3, [r7, #14]
 8001d1e:	4a16      	ldr	r2, [pc, #88]	@ (8001d78 <readHoldingRegs+0xe0>)
 8001d20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	b299      	uxth	r1, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	60ba      	str	r2, [r7, #8]
 8001d2e:	b2c9      	uxtb	r1, r1
 8001d30:	4a10      	ldr	r2, [pc, #64]	@ (8001d74 <readHoldingRegs+0xdc>)
 8001d32:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Holding_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8001d34:	89fb      	ldrh	r3, [r7, #14]
 8001d36:	4a10      	ldr	r2, [pc, #64]	@ (8001d78 <readHoldingRegs+0xe0>)
 8001d38:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	60ba      	str	r2, [r7, #8]
 8001d42:	b2c9      	uxtb	r1, r1
 8001d44:	4a0b      	ldr	r2, [pc, #44]	@ (8001d74 <readHoldingRegs+0xdc>)
 8001d46:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 8001d48:	89fb      	ldrh	r3, [r7, #14]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3301      	adds	r3, #1
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	887b      	ldrh	r3, [r7, #2]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	dbdf      	blt.n	8001d1c <readHoldingRegs+0x84>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	4805      	ldr	r0, [pc, #20]	@ (8001d74 <readHoldingRegs+0xdc>)
 8001d60:	f7ff ff4e 	bl	8001c00 <sendData>
	return 1;   // success
 8001d64:	2301      	movs	r3, #1
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200003dc 	.word	0x200003dc
 8001d74:	200004dc 	.word	0x200004dc
 8001d78:	20000010 	.word	0x20000010

08001d7c <readInputRegs>:

uint8_t readInputRegs (void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8001d82:	4b34      	ldr	r3, [pc, #208]	@ (8001e54 <readInputRegs+0xd8>)
 8001d84:	789b      	ldrb	r3, [r3, #2]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	b21a      	sxth	r2, r3
 8001d8a:	4b32      	ldr	r3, [pc, #200]	@ (8001e54 <readInputRegs+0xd8>)
 8001d8c:	78db      	ldrb	r3, [r3, #3]
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8001d96:	4b2f      	ldr	r3, [pc, #188]	@ (8001e54 <readInputRegs+0xd8>)
 8001d98:	791b      	ldrb	r3, [r3, #4]
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	b21a      	sxth	r2, r3
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e54 <readInputRegs+0xd8>)
 8001da0:	795b      	ldrb	r3, [r3, #5]
 8001da2:	b21b      	sxth	r3, r3
 8001da4:	4313      	orrs	r3, r2
 8001da6:	b21b      	sxth	r3, r3
 8001da8:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <readInputRegs+0x3a>
 8001db0:	887b      	ldrh	r3, [r7, #2]
 8001db2:	2b7d      	cmp	r3, #125	@ 0x7d
 8001db4:	d904      	bls.n	8001dc0 <readInputRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8001db6:	2003      	movs	r0, #3
 8001db8:	f7ff ff4e 	bl	8001c58 <modbusException>
		return 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e044      	b.n	8001e4a <readInputRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8001dc0:	89fa      	ldrh	r2, [r7, #14]
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8001dcc:	883b      	ldrh	r3, [r7, #0]
 8001dce:	2b31      	cmp	r3, #49	@ 0x31
 8001dd0:	d904      	bls.n	8001ddc <readInputRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	f7ff ff40 	bl	8001c58 <modbusException>
		return 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e036      	b.n	8001e4a <readInputRegs+0xce>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e58 <readInputRegs+0xdc>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8001de2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <readInputRegs+0xd8>)
 8001de4:	785a      	ldrb	r2, [r3, #1]
 8001de6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <readInputRegs+0xdc>)
 8001de8:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 8001dea:	887b      	ldrh	r3, [r7, #2]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <readInputRegs+0xdc>)
 8001df4:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8001df6:	2303      	movs	r3, #3
 8001df8:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	e01b      	b.n	8001e38 <readInputRegs+0xbc>
	{
		TxData[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8001e00:	89fb      	ldrh	r3, [r7, #14]
 8001e02:	4a16      	ldr	r2, [pc, #88]	@ (8001e5c <readInputRegs+0xe0>)
 8001e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	b299      	uxth	r1, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	60ba      	str	r2, [r7, #8]
 8001e12:	b2c9      	uxtb	r1, r1
 8001e14:	4a10      	ldr	r2, [pc, #64]	@ (8001e58 <readInputRegs+0xdc>)
 8001e16:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8001e18:	89fb      	ldrh	r3, [r7, #14]
 8001e1a:	4a10      	ldr	r2, [pc, #64]	@ (8001e5c <readInputRegs+0xe0>)
 8001e1c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	b2c9      	uxtb	r1, r1
 8001e28:	4a0b      	ldr	r2, [pc, #44]	@ (8001e58 <readInputRegs+0xdc>)
 8001e2a:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 8001e2c:	89fb      	ldrh	r3, [r7, #14]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3301      	adds	r3, #1
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	887b      	ldrh	r3, [r7, #2]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dbdf      	blt.n	8001e00 <readInputRegs+0x84>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	4805      	ldr	r0, [pc, #20]	@ (8001e58 <readInputRegs+0xdc>)
 8001e44:	f7ff fedc 	bl	8001c00 <sendData>
	return 1;   // success
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200003dc 	.word	0x200003dc
 8001e58:	200004dc 	.word	0x200004dc
 8001e5c:	20000074 	.word	0x20000074

08001e60 <readCoils>:

uint8_t readCoils (void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 8001e66:	4b52      	ldr	r3, [pc, #328]	@ (8001fb0 <readCoils+0x150>)
 8001e68:	789b      	ldrb	r3, [r3, #2]
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	4b50      	ldr	r3, [pc, #320]	@ (8001fb0 <readCoils+0x150>)
 8001e70:	78db      	ldrb	r3, [r3, #3]
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	4313      	orrs	r3, r2
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 8001e7a:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb0 <readCoils+0x150>)
 8001e7c:	791b      	ldrb	r3, [r3, #4]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	b21a      	sxth	r2, r3
 8001e82:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb0 <readCoils+0x150>)
 8001e84:	795b      	ldrb	r3, [r3, #5]
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 8001e8e:	893b      	ldrh	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <readCoils+0x3c>
 8001e94:	893b      	ldrh	r3, [r7, #8]
 8001e96:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001e9a:	d904      	bls.n	8001ea6 <readCoils+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f7ff fedb 	bl	8001c58 <modbusException>
		return 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e080      	b.n	8001fa8 <readCoils+0x148>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 8001ea6:	897a      	ldrh	r2, [r7, #10]
 8001ea8:	893b      	ldrh	r3, [r7, #8]
 8001eaa:	4413      	add	r3, r2
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	2bc7      	cmp	r3, #199	@ 0xc7
 8001eb6:	d904      	bls.n	8001ec2 <readCoils+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8001eb8:	2002      	movs	r0, #2
 8001eba:	f7ff fecd 	bl	8001c58 <modbusException>
		return 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e072      	b.n	8001fa8 <readCoils+0x148>
	}


	//reset TxData buffer
	memset (TxData, '\0', 256);
 8001ec2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	483a      	ldr	r0, [pc, #232]	@ (8001fb4 <readCoils+0x154>)
 8001eca:	f005 ff5f 	bl	8007d8c <memset>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 8001ece:	4b39      	ldr	r3, [pc, #228]	@ (8001fb4 <readCoils+0x154>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8001ed4:	4b36      	ldr	r3, [pc, #216]	@ (8001fb0 <readCoils+0x150>)
 8001ed6:	785a      	ldrb	r2, [r3, #1]
 8001ed8:	4b36      	ldr	r3, [pc, #216]	@ (8001fb4 <readCoils+0x154>)
 8001eda:	705a      	strb	r2, [r3, #1]
	TxData[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 8001edc:	893b      	ldrh	r3, [r7, #8]
 8001ede:	08db      	lsrs	r3, r3, #3
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	893a      	ldrh	r2, [r7, #8]
 8001ee6:	f002 0207 	and.w	r2, r2, #7
 8001eea:	b292      	uxth	r2, r2
 8001eec:	2a00      	cmp	r2, #0
 8001eee:	bf14      	ite	ne
 8001ef0:	2201      	movne	r2, #1
 8001ef2:	2200      	moveq	r2, #0
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb4 <readCoils+0x154>)
 8001efc:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8001efe:	2303      	movs	r3, #3
 8001f00:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 8001f02:	897b      	ldrh	r3, [r7, #10]
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 8001f0a:	897b      	ldrh	r3, [r7, #10]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData buffer
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData buffer
	for (int i=0; i<numCoils; i++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	e033      	b.n	8001f84 <readCoils+0x124>
	{
		TxData[indx] |= ((Coils_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 8001f1c:	4a25      	ldr	r2, [pc, #148]	@ (8001fb4 <readCoils+0x154>)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	4413      	add	r3, r2
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b25a      	sxtb	r2, r3
 8001f26:	4924      	ldr	r1, [pc, #144]	@ (8001fb8 <readCoils+0x158>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	440b      	add	r3, r1
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	8afb      	ldrh	r3, [r7, #22]
 8001f32:	fa41 f303 	asr.w	r3, r1, r3
 8001f36:	f003 0101 	and.w	r1, r3, #1
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	b25b      	sxtb	r3, r3
 8001f42:	4313      	orrs	r3, r2
 8001f44:	b25b      	sxtb	r3, r3
 8001f46:	b2d9      	uxtb	r1, r3
 8001f48:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb4 <readCoils+0x154>)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	460a      	mov	r2, r1
 8001f50:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	3301      	adds	r3, #1
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	8afb      	ldrh	r3, [r7, #22]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b07      	cmp	r3, #7
 8001f62:	dd04      	ble.n	8001f6e <readCoils+0x10e>
		{
			indxPosition = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
			indx++;
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 8001f6e:	8afb      	ldrh	r3, [r7, #22]
 8001f70:	2b07      	cmp	r3, #7
 8001f72:	d904      	bls.n	8001f7e <readCoils+0x11e>
		{
			bitPosition=0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	82fb      	strh	r3, [r7, #22]
			startByte++;
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	3301      	adds	r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	893b      	ldrh	r3, [r7, #8]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dbc7      	blt.n	8001f1c <readCoils+0xbc>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 8001f8c:	893b      	ldrh	r3, [r7, #8]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <readCoils+0x13e>
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	61fb      	str	r3, [r7, #28]
	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8001f9e:	69f9      	ldr	r1, [r7, #28]
 8001fa0:	4804      	ldr	r0, [pc, #16]	@ (8001fb4 <readCoils+0x154>)
 8001fa2:	f7ff fe2d 	bl	8001c00 <sendData>
	return 1;   // success
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200003dc 	.word	0x200003dc
 8001fb4:	200004dc 	.word	0x200004dc
 8001fb8:	200000d8 	.word	0x200000d8

08001fbc <readInputs>:

uint8_t readInputs (void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8001fc2:	4b52      	ldr	r3, [pc, #328]	@ (800210c <readInputs+0x150>)
 8001fc4:	789b      	ldrb	r3, [r3, #2]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	4b50      	ldr	r3, [pc, #320]	@ (800210c <readInputs+0x150>)
 8001fcc:	78db      	ldrb	r3, [r3, #3]
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 8001fd6:	4b4d      	ldr	r3, [pc, #308]	@ (800210c <readInputs+0x150>)
 8001fd8:	791b      	ldrb	r3, [r3, #4]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	4b4b      	ldr	r3, [pc, #300]	@ (800210c <readInputs+0x150>)
 8001fe0:	795b      	ldrb	r3, [r3, #5]
 8001fe2:	b21b      	sxth	r3, r3
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 8001fea:	893b      	ldrh	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <readInputs+0x3c>
 8001ff0:	893b      	ldrh	r3, [r7, #8]
 8001ff2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001ff6:	d904      	bls.n	8002002 <readInputs+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f7ff fe2d 	bl	8001c58 <modbusException>
		return 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e080      	b.n	8002104 <readInputs+0x148>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 8002002:	897a      	ldrh	r2, [r7, #10]
 8002004:	893b      	ldrh	r3, [r7, #8]
 8002006:	4413      	add	r3, r2
 8002008:	b29b      	uxth	r3, r3
 800200a:	3b01      	subs	r3, #1
 800200c:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	2bc7      	cmp	r3, #199	@ 0xc7
 8002012:	d904      	bls.n	800201e <readInputs+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8002014:	2002      	movs	r0, #2
 8002016:	f7ff fe1f 	bl	8001c58 <modbusException>
		return 0;
 800201a:	2300      	movs	r3, #0
 800201c:	e072      	b.n	8002104 <readInputs+0x148>
	}


	//reset TxData buffer
	memset (TxData, '\0', 256);
 800201e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002022:	2100      	movs	r1, #0
 8002024:	483a      	ldr	r0, [pc, #232]	@ (8002110 <readInputs+0x154>)
 8002026:	f005 feb1 	bl	8007d8c <memset>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 800202a:	4b39      	ldr	r3, [pc, #228]	@ (8002110 <readInputs+0x154>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8002030:	4b36      	ldr	r3, [pc, #216]	@ (800210c <readInputs+0x150>)
 8002032:	785a      	ldrb	r2, [r3, #1]
 8002034:	4b36      	ldr	r3, [pc, #216]	@ (8002110 <readInputs+0x154>)
 8002036:	705a      	strb	r2, [r3, #1]
	TxData[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 8002038:	893b      	ldrh	r3, [r7, #8]
 800203a:	08db      	lsrs	r3, r3, #3
 800203c:	b29b      	uxth	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	893a      	ldrh	r2, [r7, #8]
 8002042:	f002 0207 	and.w	r2, r2, #7
 8002046:	b292      	uxth	r2, r2
 8002048:	2a00      	cmp	r2, #0
 800204a:	bf14      	ite	ne
 800204c:	2201      	movne	r2, #1
 800204e:	2200      	moveq	r2, #0
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	4413      	add	r3, r2
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b2e      	ldr	r3, [pc, #184]	@ (8002110 <readInputs+0x154>)
 8002058:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 800205a:	2303      	movs	r3, #3
 800205c:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 800205e:	897b      	ldrh	r3, [r7, #10]
 8002060:	08db      	lsrs	r3, r3, #3
 8002062:	b29b      	uxth	r3, r3
 8002064:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 8002066:	897b      	ldrh	r3, [r7, #10]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData buffer
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData buffer
	for (int i=0; i<numCoils; i++)
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e033      	b.n	80020e0 <readInputs+0x124>
	{
		TxData[indx] |= ((Inputs_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 8002078:	4a25      	ldr	r2, [pc, #148]	@ (8002110 <readInputs+0x154>)
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	4413      	add	r3, r2
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b25a      	sxtb	r2, r3
 8002082:	4924      	ldr	r1, [pc, #144]	@ (8002114 <readInputs+0x158>)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	440b      	add	r3, r1
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	4619      	mov	r1, r3
 800208c:	8afb      	ldrh	r3, [r7, #22]
 800208e:	fa41 f303 	asr.w	r3, r1, r3
 8002092:	f003 0101 	and.w	r1, r3, #1
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	b25b      	sxtb	r3, r3
 800209e:	4313      	orrs	r3, r2
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	b2d9      	uxtb	r1, r3
 80020a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002110 <readInputs+0x154>)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	4413      	add	r3, r2
 80020aa:	460a      	mov	r2, r1
 80020ac:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	3301      	adds	r3, #1
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	8afb      	ldrh	r3, [r7, #22]
 80020b6:	3301      	adds	r3, #1
 80020b8:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b07      	cmp	r3, #7
 80020be:	dd04      	ble.n	80020ca <readInputs+0x10e>
		{
			indxPosition = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
			indx++;
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	3301      	adds	r3, #1
 80020c8:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 80020ca:	8afb      	ldrh	r3, [r7, #22]
 80020cc:	2b07      	cmp	r3, #7
 80020ce:	d904      	bls.n	80020da <readInputs+0x11e>
		{
			bitPosition=0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	82fb      	strh	r3, [r7, #22]
			startByte++;
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	3301      	adds	r3, #1
 80020d8:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3301      	adds	r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	893b      	ldrh	r3, [r7, #8]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	dbc7      	blt.n	8002078 <readInputs+0xbc>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 80020e8:	893b      	ldrh	r3, [r7, #8]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <readInputs+0x13e>
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	3301      	adds	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 80020fa:	69f9      	ldr	r1, [r7, #28]
 80020fc:	4804      	ldr	r0, [pc, #16]	@ (8002110 <readInputs+0x154>)
 80020fe:	f7ff fd7f 	bl	8001c00 <sendData>
	return 1;   // success
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200003dc 	.word	0x200003dc
 8002110:	200004dc 	.word	0x200004dc
 8002114:	200000f4 	.word	0x200000f4

08002118 <writeHoldingRegs>:

uint8_t writeHoldingRegs (void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 800211e:	4b38      	ldr	r3, [pc, #224]	@ (8002200 <writeHoldingRegs+0xe8>)
 8002120:	789b      	ldrb	r3, [r3, #2]
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	b21a      	sxth	r2, r3
 8002126:	4b36      	ldr	r3, [pc, #216]	@ (8002200 <writeHoldingRegs+0xe8>)
 8002128:	78db      	ldrb	r3, [r3, #3]
 800212a:	b21b      	sxth	r3, r3
 800212c:	4313      	orrs	r3, r2
 800212e:	b21b      	sxth	r3, r3
 8002130:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8002132:	4b33      	ldr	r3, [pc, #204]	@ (8002200 <writeHoldingRegs+0xe8>)
 8002134:	791b      	ldrb	r3, [r3, #4]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	b21a      	sxth	r2, r3
 800213a:	4b31      	ldr	r3, [pc, #196]	@ (8002200 <writeHoldingRegs+0xe8>)
 800213c:	795b      	ldrb	r3, [r3, #5]
 800213e:	b21b      	sxth	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	b21b      	sxth	r3, r3
 8002144:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per the PDF
 8002146:	887b      	ldrh	r3, [r7, #2]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <writeHoldingRegs+0x3a>
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	2b7b      	cmp	r3, #123	@ 0x7b
 8002150:	d904      	bls.n	800215c <writeHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8002152:	2003      	movs	r0, #3
 8002154:	f7ff fd80 	bl	8001c58 <modbusException>
		return 0;
 8002158:	2300      	movs	r3, #0
 800215a:	e04c      	b.n	80021f6 <writeHoldingRegs+0xde>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 800215c:	89fa      	ldrh	r2, [r7, #14]
 800215e:	887b      	ldrh	r3, [r7, #2]
 8002160:	4413      	add	r3, r2
 8002162:	b29b      	uxth	r3, r3
 8002164:	3b01      	subs	r3, #1
 8002166:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8002168:	883b      	ldrh	r3, [r7, #0]
 800216a:	2b31      	cmp	r3, #49	@ 0x31
 800216c:	d904      	bls.n	8002178 <writeHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800216e:	2002      	movs	r0, #2
 8002170:	f7ff fd72 	bl	8001c58 <modbusException>
		return 0;
 8002174:	2300      	movs	r3, #0
 8002176:	e03e      	b.n	80021f6 <writeHoldingRegs+0xde>

	/* start saving 16 bit data
	 * Data starts from RxData[7] and we need to combine 2 bytes together
	 * 16 bit Data = firstByte<<8|secondByte
	 */
	int indx = 7;  // we need to keep track of index in RxData
 8002178:	2307      	movs	r3, #7
 800217a:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<numRegs; i++)
 800217c:	2300      	movs	r3, #0
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	e019      	b.n	80021b6 <writeHoldingRegs+0x9e>
	{
		Holding_Registers_Database[startAddr++] = (RxData[indx++]<<8)|RxData[indx++];
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	60ba      	str	r2, [r7, #8]
 8002188:	4a1d      	ldr	r2, [pc, #116]	@ (8002200 <writeHoldingRegs+0xe8>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	b21a      	sxth	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	1c59      	adds	r1, r3, #1
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	491a      	ldr	r1, [pc, #104]	@ (8002200 <writeHoldingRegs+0xe8>)
 8002198:	5ccb      	ldrb	r3, [r1, r3]
 800219a:	b21b      	sxth	r3, r3
 800219c:	4313      	orrs	r3, r2
 800219e:	b219      	sxth	r1, r3
 80021a0:	89fb      	ldrh	r3, [r7, #14]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	81fa      	strh	r2, [r7, #14]
 80021a6:	461a      	mov	r2, r3
 80021a8:	b289      	uxth	r1, r1
 80021aa:	4b16      	ldr	r3, [pc, #88]	@ (8002204 <writeHoldingRegs+0xec>)
 80021ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i=0; i<numRegs; i++)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3301      	adds	r3, #1
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	887b      	ldrh	r3, [r7, #2]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	dbe1      	blt.n	8002182 <writeHoldingRegs+0x6a>
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | num of Regs    | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES      | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 80021be:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <writeHoldingRegs+0xf0>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 80021c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <writeHoldingRegs+0xe8>)
 80021c6:	785a      	ldrb	r2, [r3, #1]
 80021c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002208 <writeHoldingRegs+0xf0>)
 80021ca:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 80021cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <writeHoldingRegs+0xe8>)
 80021ce:	789a      	ldrb	r2, [r3, #2]
 80021d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <writeHoldingRegs+0xf0>)
 80021d2:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 80021d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <writeHoldingRegs+0xe8>)
 80021d6:	78da      	ldrb	r2, [r3, #3]
 80021d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <writeHoldingRegs+0xf0>)
 80021da:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // num of Regs HIGH Byte
 80021dc:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <writeHoldingRegs+0xe8>)
 80021de:	791a      	ldrb	r2, [r3, #4]
 80021e0:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <writeHoldingRegs+0xf0>)
 80021e2:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // num of Regs LOW Byte
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <writeHoldingRegs+0xe8>)
 80021e6:	795a      	ldrb	r2, [r3, #5]
 80021e8:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <writeHoldingRegs+0xf0>)
 80021ea:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 80021ec:	2106      	movs	r1, #6
 80021ee:	4806      	ldr	r0, [pc, #24]	@ (8002208 <writeHoldingRegs+0xf0>)
 80021f0:	f7ff fd06 	bl	8001c00 <sendData>
	return 1;   // success
 80021f4:	2301      	movs	r3, #1
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200003dc 	.word	0x200003dc
 8002204:	20000010 	.word	0x20000010
 8002208:	200004dc 	.word	0x200004dc

0800220c <writeSingleReg>:

uint8_t writeSingleReg (void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8002212:	4b20      	ldr	r3, [pc, #128]	@ (8002294 <writeSingleReg+0x88>)
 8002214:	789b      	ldrb	r3, [r3, #2]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	b21a      	sxth	r2, r3
 800221a:	4b1e      	ldr	r3, [pc, #120]	@ (8002294 <writeSingleReg+0x88>)
 800221c:	78db      	ldrb	r3, [r3, #3]
 800221e:	b21b      	sxth	r3, r3
 8002220:	4313      	orrs	r3, r2
 8002222:	b21b      	sxth	r3, r3
 8002224:	80fb      	strh	r3, [r7, #6]

	if (startAddr>49)  // The Register Address can not be more than 49 as we only have record of 50 Registers in total
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	2b31      	cmp	r3, #49	@ 0x31
 800222a:	d904      	bls.n	8002236 <writeSingleReg+0x2a>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800222c:	2002      	movs	r0, #2
 800222e:	f7ff fd13 	bl	8001c58 <modbusException>
		return 0;
 8002232:	2300      	movs	r3, #0
 8002234:	e029      	b.n	800228a <writeSingleReg+0x7e>

	/* Save the 16 bit data
	 * Data is the combination of 2 bytes, RxData[4] and RxData[5]
	 */

	Holding_Registers_Database[startAddr] = (RxData[4]<<8)|RxData[5];
 8002236:	4b17      	ldr	r3, [pc, #92]	@ (8002294 <writeSingleReg+0x88>)
 8002238:	791b      	ldrb	r3, [r3, #4]
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	b21a      	sxth	r2, r3
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <writeSingleReg+0x88>)
 8002240:	795b      	ldrb	r3, [r3, #5]
 8002242:	b21b      	sxth	r3, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	b21a      	sxth	r2, r3
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	b291      	uxth	r1, r2
 800224c:	4a12      	ldr	r2, [pc, #72]	@ (8002298 <writeSingleReg+0x8c>)
 800224e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 8002252:	4b12      	ldr	r3, [pc, #72]	@ (800229c <writeSingleReg+0x90>)
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 8002258:	4b0e      	ldr	r3, [pc, #56]	@ (8002294 <writeSingleReg+0x88>)
 800225a:	785a      	ldrb	r2, [r3, #1]
 800225c:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <writeSingleReg+0x90>)
 800225e:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 8002260:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <writeSingleReg+0x88>)
 8002262:	789a      	ldrb	r2, [r3, #2]
 8002264:	4b0d      	ldr	r3, [pc, #52]	@ (800229c <writeSingleReg+0x90>)
 8002266:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 8002268:	4b0a      	ldr	r3, [pc, #40]	@ (8002294 <writeSingleReg+0x88>)
 800226a:	78da      	ldrb	r2, [r3, #3]
 800226c:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <writeSingleReg+0x90>)
 800226e:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // Reg Data HIGH Byte
 8002270:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <writeSingleReg+0x88>)
 8002272:	791a      	ldrb	r2, [r3, #4]
 8002274:	4b09      	ldr	r3, [pc, #36]	@ (800229c <writeSingleReg+0x90>)
 8002276:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // Reg Data LOW  Byte
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <writeSingleReg+0x88>)
 800227a:	795a      	ldrb	r2, [r3, #5]
 800227c:	4b07      	ldr	r3, [pc, #28]	@ (800229c <writeSingleReg+0x90>)
 800227e:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 8002280:	2106      	movs	r1, #6
 8002282:	4806      	ldr	r0, [pc, #24]	@ (800229c <writeSingleReg+0x90>)
 8002284:	f7ff fcbc 	bl	8001c00 <sendData>
	return 1;   // success
 8002288:	2301      	movs	r3, #1
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200003dc 	.word	0x200003dc
 8002298:	20000010 	.word	0x20000010
 800229c:	200004dc 	.word	0x200004dc

080022a0 <writeSingleCoil>:

uint8_t writeSingleCoil (void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 80022a6:	4b38      	ldr	r3, [pc, #224]	@ (8002388 <writeSingleCoil+0xe8>)
 80022a8:	789b      	ldrb	r3, [r3, #2]
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	b21a      	sxth	r2, r3
 80022ae:	4b36      	ldr	r3, [pc, #216]	@ (8002388 <writeSingleCoil+0xe8>)
 80022b0:	78db      	ldrb	r3, [r3, #3]
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b21b      	sxth	r3, r3
 80022b8:	81fb      	strh	r3, [r7, #14]

	if (startAddr>199)  // The Coil Address can not be more than 199 as we only have record of 200 Coils in total
 80022ba:	89fb      	ldrh	r3, [r7, #14]
 80022bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80022be:	d904      	bls.n	80022ca <writeSingleCoil+0x2a>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80022c0:	2002      	movs	r0, #2
 80022c2:	f7ff fcc9 	bl	8001c58 <modbusException>
		return 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e05a      	b.n	8002380 <writeSingleCoil+0xe0>
	}

	/* Calculation for the bit in the database, where the modification will be done */
	int startByte = startAddr/8;  // which byte we have to start writing the data into
 80022ca:	89fb      	ldrh	r3, [r7, #14]
 80022cc:	08db      	lsrs	r3, r3, #3
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	60bb      	str	r3, [r7, #8]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 80022d2:	89fb      	ldrh	r3, [r7, #14]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	80fb      	strh	r3, [r7, #6]
	 * A value of FF 00 hex requests the coil to be ON.
	 * A value of 00 00 requests it to be OFF.
	 * All other values are illegal and will not affect the coil.
	 */

	if ((RxData[4] == 0xFF) && (RxData[5] == 0x00))
 80022da:	4b2b      	ldr	r3, [pc, #172]	@ (8002388 <writeSingleCoil+0xe8>)
 80022dc:	791b      	ldrb	r3, [r3, #4]
 80022de:	2bff      	cmp	r3, #255	@ 0xff
 80022e0:	d116      	bne.n	8002310 <writeSingleCoil+0x70>
 80022e2:	4b29      	ldr	r3, [pc, #164]	@ (8002388 <writeSingleCoil+0xe8>)
 80022e4:	795b      	ldrb	r3, [r3, #5]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d112      	bne.n	8002310 <writeSingleCoil+0x70>
	{
		Coils_Database[startByte] |= 1<<bitPosition; // Replace that bit with 1
 80022ea:	4a28      	ldr	r2, [pc, #160]	@ (800238c <writeSingleCoil+0xec>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b25a      	sxtb	r2, r3
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	2101      	movs	r1, #1
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	b25b      	sxtb	r3, r3
 80022fe:	4313      	orrs	r3, r2
 8002300:	b25b      	sxtb	r3, r3
 8002302:	b2d9      	uxtb	r1, r3
 8002304:	4a21      	ldr	r2, [pc, #132]	@ (800238c <writeSingleCoil+0xec>)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	4413      	add	r3, r2
 800230a:	460a      	mov	r2, r1
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	e01b      	b.n	8002348 <writeSingleCoil+0xa8>
	}

	else if ((RxData[4] == 0x00) && (RxData[5] == 0x00))
 8002310:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <writeSingleCoil+0xe8>)
 8002312:	791b      	ldrb	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d117      	bne.n	8002348 <writeSingleCoil+0xa8>
 8002318:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <writeSingleCoil+0xe8>)
 800231a:	795b      	ldrb	r3, [r3, #5]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d113      	bne.n	8002348 <writeSingleCoil+0xa8>
	{
		Coils_Database[startByte] &= ~(1<<bitPosition); // Replace that bit with 0
 8002320:	4a1a      	ldr	r2, [pc, #104]	@ (800238c <writeSingleCoil+0xec>)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4413      	add	r3, r2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	b25a      	sxtb	r2, r3
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	2101      	movs	r1, #1
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	b25b      	sxtb	r3, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	b25b      	sxtb	r3, r3
 8002338:	4013      	ands	r3, r2
 800233a:	b25b      	sxtb	r3, r3
 800233c:	b2d9      	uxtb	r1, r3
 800233e:	4a13      	ldr	r2, [pc, #76]	@ (800238c <writeSingleCoil+0xec>)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4413      	add	r3, r2
 8002344:	460a      	mov	r2, r1
 8002346:	701a      	strb	r2, [r3, #0]
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 8002348:	4b11      	ldr	r3, [pc, #68]	@ (8002390 <writeSingleCoil+0xf0>)
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 800234e:	4b0e      	ldr	r3, [pc, #56]	@ (8002388 <writeSingleCoil+0xe8>)
 8002350:	785a      	ldrb	r2, [r3, #1]
 8002352:	4b0f      	ldr	r3, [pc, #60]	@ (8002390 <writeSingleCoil+0xf0>)
 8002354:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 8002356:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <writeSingleCoil+0xe8>)
 8002358:	789a      	ldrb	r2, [r3, #2]
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <writeSingleCoil+0xf0>)
 800235c:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 800235e:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <writeSingleCoil+0xe8>)
 8002360:	78da      	ldrb	r2, [r3, #3]
 8002362:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <writeSingleCoil+0xf0>)
 8002364:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // Coil Data HIGH Byte
 8002366:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <writeSingleCoil+0xe8>)
 8002368:	791a      	ldrb	r2, [r3, #4]
 800236a:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <writeSingleCoil+0xf0>)
 800236c:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // Coil Data LOW  Byte
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <writeSingleCoil+0xe8>)
 8002370:	795a      	ldrb	r2, [r3, #5]
 8002372:	4b07      	ldr	r3, [pc, #28]	@ (8002390 <writeSingleCoil+0xf0>)
 8002374:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 8002376:	2106      	movs	r1, #6
 8002378:	4805      	ldr	r0, [pc, #20]	@ (8002390 <writeSingleCoil+0xf0>)
 800237a:	f7ff fc41 	bl	8001c00 <sendData>
	return 1;   // success
 800237e:	2301      	movs	r3, #1
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200003dc 	.word	0x200003dc
 800238c:	200000d8 	.word	0x200000d8
 8002390:	200004dc 	.word	0x200004dc

08002394 <writeMultiCoils>:

uint8_t writeMultiCoils (void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 800239a:	4b56      	ldr	r3, [pc, #344]	@ (80024f4 <writeMultiCoils+0x160>)
 800239c:	789b      	ldrb	r3, [r3, #2]
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	b21a      	sxth	r2, r3
 80023a2:	4b54      	ldr	r3, [pc, #336]	@ (80024f4 <writeMultiCoils+0x160>)
 80023a4:	78db      	ldrb	r3, [r3, #3]
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 80023ae:	4b51      	ldr	r3, [pc, #324]	@ (80024f4 <writeMultiCoils+0x160>)
 80023b0:	791b      	ldrb	r3, [r3, #4]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	b21a      	sxth	r2, r3
 80023b6:	4b4f      	ldr	r3, [pc, #316]	@ (80024f4 <writeMultiCoils+0x160>)
 80023b8:	795b      	ldrb	r3, [r3, #5]
 80023ba:	b21b      	sxth	r3, r3
 80023bc:	4313      	orrs	r3, r2
 80023be:	b21b      	sxth	r3, r3
 80023c0:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>1968))  // maximum no. of coils as per the PDF
 80023c2:	893b      	ldrh	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <writeMultiCoils+0x3c>
 80023c8:	893b      	ldrh	r3, [r7, #8]
 80023ca:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 80023ce:	d904      	bls.n	80023da <writeMultiCoils+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80023d0:	2003      	movs	r0, #3
 80023d2:	f7ff fc41 	bl	8001c58 <modbusException>
		return 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e088      	b.n	80024ec <writeMultiCoils+0x158>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 80023da:	897a      	ldrh	r2, [r7, #10]
 80023dc:	893b      	ldrh	r3, [r7, #8]
 80023de:	4413      	add	r3, r2
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80023ea:	d904      	bls.n	80023f6 <writeMultiCoils+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80023ec:	2002      	movs	r0, #2
 80023ee:	f7ff fc33 	bl	8001c58 <modbusException>
		return 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	e07a      	b.n	80024ec <writeMultiCoils+0x158>
	}

	/* Calculation for the bit in the database, where the modification will be done */
	int startByte = startAddr/8;  // which byte we have to start writing the data into
 80023f6:	897b      	ldrh	r3, [r7, #10]
 80023f8:	08db      	lsrs	r3, r3, #3
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	61fb      	str	r3, [r7, #28]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 80023fe:	897b      	ldrh	r3, [r7, #10]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	837b      	strh	r3, [r7, #26]
	int indxPosition = 0;  // The shift position in the current indx of the RxData buffer
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]

	int indx = 7;  // we need to keep track of index in RxData
 800240a:	2307      	movs	r3, #7
 800240c:	613b      	str	r3, [r7, #16]
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy from the next byte of the RxData
	 * This keeps going until the number of coils required have been modified
	 */

	// Modify the bits as per the Byte received
	for (int i=0; i<numCoils; i++)
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	e04b      	b.n	80024ac <writeMultiCoils+0x118>
	{
		if (((RxData[indx]>>indxPosition)&0x01) == 1)
 8002414:	4a37      	ldr	r2, [pc, #220]	@ (80024f4 <writeMultiCoils+0x160>)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4413      	add	r3, r2
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	fa42 f303 	asr.w	r3, r2, r3
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d012      	beq.n	8002452 <writeMultiCoils+0xbe>
		{
			Coils_Database[startByte] |= 1<<bitPosition;  // replace that bit with 1
 800242c:	4a32      	ldr	r2, [pc, #200]	@ (80024f8 <writeMultiCoils+0x164>)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	4413      	add	r3, r2
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	b25a      	sxtb	r2, r3
 8002436:	8b7b      	ldrh	r3, [r7, #26]
 8002438:	2101      	movs	r1, #1
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	b25b      	sxtb	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	b25b      	sxtb	r3, r3
 8002444:	b2d9      	uxtb	r1, r3
 8002446:	4a2c      	ldr	r2, [pc, #176]	@ (80024f8 <writeMultiCoils+0x164>)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	4413      	add	r3, r2
 800244c:	460a      	mov	r2, r1
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	e013      	b.n	800247a <writeMultiCoils+0xe6>
		}
		else
		{
			Coils_Database[startByte] &= ~(1<<bitPosition);  // replace that bit with 0
 8002452:	4a29      	ldr	r2, [pc, #164]	@ (80024f8 <writeMultiCoils+0x164>)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	4413      	add	r3, r2
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b25a      	sxtb	r2, r3
 800245c:	8b7b      	ldrh	r3, [r7, #26]
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	b25b      	sxtb	r3, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	b25b      	sxtb	r3, r3
 800246a:	4013      	ands	r3, r2
 800246c:	b25b      	sxtb	r3, r3
 800246e:	b2d9      	uxtb	r1, r3
 8002470:	4a21      	ldr	r2, [pc, #132]	@ (80024f8 <writeMultiCoils+0x164>)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4413      	add	r3, r2
 8002476:	460a      	mov	r2, r1
 8002478:	701a      	strb	r2, [r3, #0]
		}

		bitPosition++; indxPosition++;
 800247a:	8b7b      	ldrh	r3, [r7, #26]
 800247c:	3301      	adds	r3, #1
 800247e:	837b      	strh	r3, [r7, #26]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3301      	adds	r3, #1
 8002484:	617b      	str	r3, [r7, #20]

		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b07      	cmp	r3, #7
 800248a:	dd04      	ble.n	8002496 <writeMultiCoils+0x102>
		{
			indxPosition = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
			indx++;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	3301      	adds	r3, #1
 8002494:	613b      	str	r3, [r7, #16]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 8002496:	8b7b      	ldrh	r3, [r7, #26]
 8002498:	2b07      	cmp	r3, #7
 800249a:	d904      	bls.n	80024a6 <writeMultiCoils+0x112>
		{
			bitPosition=0;
 800249c:	2300      	movs	r3, #0
 800249e:	837b      	strh	r3, [r7, #26]
			startByte++;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	3301      	adds	r3, #1
 80024a4:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<numCoils; i++)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3301      	adds	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	893b      	ldrh	r3, [r7, #8]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	dbaf      	blt.n	8002414 <writeMultiCoils+0x80>
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 80024b4:	4b11      	ldr	r3, [pc, #68]	@ (80024fc <writeMultiCoils+0x168>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 80024ba:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <writeMultiCoils+0x160>)
 80024bc:	785a      	ldrb	r2, [r3, #1]
 80024be:	4b0f      	ldr	r3, [pc, #60]	@ (80024fc <writeMultiCoils+0x168>)
 80024c0:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 80024c2:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <writeMultiCoils+0x160>)
 80024c4:	789a      	ldrb	r2, [r3, #2]
 80024c6:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <writeMultiCoils+0x168>)
 80024c8:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 80024ca:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <writeMultiCoils+0x160>)
 80024cc:	78da      	ldrb	r2, [r3, #3]
 80024ce:	4b0b      	ldr	r3, [pc, #44]	@ (80024fc <writeMultiCoils+0x168>)
 80024d0:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // num of coils HIGH Byte
 80024d2:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <writeMultiCoils+0x160>)
 80024d4:	791a      	ldrb	r2, [r3, #4]
 80024d6:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <writeMultiCoils+0x168>)
 80024d8:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // num of coils LOW  Byte
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <writeMultiCoils+0x160>)
 80024dc:	795a      	ldrb	r2, [r3, #5]
 80024de:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <writeMultiCoils+0x168>)
 80024e0:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 80024e2:	2106      	movs	r1, #6
 80024e4:	4805      	ldr	r0, [pc, #20]	@ (80024fc <writeMultiCoils+0x168>)
 80024e6:	f7ff fb8b 	bl	8001c00 <sendData>
	return 1;   // success
 80024ea:	2301      	movs	r3, #1
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	200003dc 	.word	0x200003dc
 80024f8:	200000d8 	.word	0x200000d8
 80024fc:	200004dc 	.word	0x200004dc

08002500 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 800250c:	23ff      	movs	r3, #255	@ 0xff
 800250e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8002510:	23ff      	movs	r3, #255	@ 0xff
 8002512:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8002514:	e013      	b.n	800253e <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	7bbb      	ldrb	r3, [r7, #14]
 8002520:	4053      	eors	r3, r2
 8002522:	b2db      	uxtb	r3, r3
 8002524:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8002526:	4a0f      	ldr	r2, [pc, #60]	@ (8002564 <crc16+0x64>)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4413      	add	r3, r2
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	4053      	eors	r3, r2
 8002532:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8002534:	4a0c      	ldr	r2, [pc, #48]	@ (8002568 <crc16+0x68>)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4413      	add	r3, r2
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 800253e:	887b      	ldrh	r3, [r7, #2]
 8002540:	1e5a      	subs	r2, r3, #1
 8002542:	807a      	strh	r2, [r7, #2]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e6      	bne.n	8002516 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	b21a      	sxth	r2, r3
 800254e:	7bbb      	ldrb	r3, [r7, #14]
 8002550:	b21b      	sxth	r3, r3
 8002552:	4313      	orrs	r3, r2
 8002554:	b21b      	sxth	r3, r3
 8002556:	b29b      	uxth	r3, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	08008e00 	.word	0x08008e00
 8002568:	08008f00 	.word	0x08008f00

0800256c <readHoldingRegisters_M>:
 *      Author: NajdBS
 */
#include "modbusmaster.h"

void readHoldingRegisters_M(uint8_t slaveAddr, uint16_t startAddr, uint16_t numRegs)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
 8002576:	460b      	mov	r3, r1
 8002578:	80bb      	strh	r3, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	807b      	strh	r3, [r7, #2]
  TxData_M[0] = slaveAddr;
 800257e:	4a1a      	ldr	r2, [pc, #104]	@ (80025e8 <readHoldingRegisters_M+0x7c>)
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	7013      	strb	r3, [r2, #0]
  TxData_M[1] = 0x03;  // Function code for Read Holding Registers
 8002584:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <readHoldingRegisters_M+0x7c>)
 8002586:	2203      	movs	r2, #3
 8002588:	705a      	strb	r2, [r3, #1]
  TxData_M[2] = (startAddr >> 8) & 0xFF;
 800258a:	88bb      	ldrh	r3, [r7, #4]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	b29b      	uxth	r3, r3
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b15      	ldr	r3, [pc, #84]	@ (80025e8 <readHoldingRegisters_M+0x7c>)
 8002594:	709a      	strb	r2, [r3, #2]
  TxData_M[3] = startAddr & 0xFF;
 8002596:	88bb      	ldrh	r3, [r7, #4]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <readHoldingRegisters_M+0x7c>)
 800259c:	70da      	strb	r2, [r3, #3]
  TxData_M[4] = (numRegs >> 8) & 0xFF;
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <readHoldingRegisters_M+0x7c>)
 80025a8:	711a      	strb	r2, [r3, #4]
  TxData_M[5] = numRegs & 0xFF;
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4b0e      	ldr	r3, [pc, #56]	@ (80025e8 <readHoldingRegisters_M+0x7c>)
 80025b0:	715a      	strb	r2, [r3, #5]

  uint16_t crc = crc16(TxData_M, 6);
 80025b2:	2106      	movs	r1, #6
 80025b4:	480c      	ldr	r0, [pc, #48]	@ (80025e8 <readHoldingRegisters_M+0x7c>)
 80025b6:	f7ff ffa3 	bl	8002500 <crc16>
 80025ba:	4603      	mov	r3, r0
 80025bc:	81fb      	strh	r3, [r7, #14]
  TxData_M[6] = crc & 0xFF;
 80025be:	89fb      	ldrh	r3, [r7, #14]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <readHoldingRegisters_M+0x7c>)
 80025c4:	719a      	strb	r2, [r3, #6]
  TxData_M[7] = (crc >> 8) & 0xFF;
 80025c6:	89fb      	ldrh	r3, [r7, #14]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <readHoldingRegisters_M+0x7c>)
 80025d0:	71da      	strb	r2, [r3, #7]

  HAL_UART_Transmit(&huart2, TxData_M, 8, 1000);
 80025d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025d6:	2208      	movs	r2, #8
 80025d8:	4903      	ldr	r1, [pc, #12]	@ (80025e8 <readHoldingRegisters_M+0x7c>)
 80025da:	4804      	ldr	r0, [pc, #16]	@ (80025ec <readHoldingRegisters_M+0x80>)
 80025dc:	f004 fa3c 	bl	8006a58 <HAL_UART_Transmit>
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	200003d4 	.word	0x200003d4
 80025ec:	200002fc 	.word	0x200002fc

080025f0 <readInputRegisters_M>:

/**
  * @brief  Reads Input Registers (0x04)
  */
void readInputRegisters_M(uint8_t slaveAddr, uint16_t startAddr, uint16_t numRegs)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
 80025fa:	460b      	mov	r3, r1
 80025fc:	80bb      	strh	r3, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	807b      	strh	r3, [r7, #2]
  TxData_M[0] = slaveAddr;
 8002602:	4a1a      	ldr	r2, [pc, #104]	@ (800266c <readInputRegisters_M+0x7c>)
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	7013      	strb	r3, [r2, #0]
  TxData_M[1] = 0x04;  // Function code for Read Input Registers
 8002608:	4b18      	ldr	r3, [pc, #96]	@ (800266c <readInputRegisters_M+0x7c>)
 800260a:	2204      	movs	r2, #4
 800260c:	705a      	strb	r2, [r3, #1]
  TxData_M[2] = (startAddr >> 8) & 0xFF;
 800260e:	88bb      	ldrh	r3, [r7, #4]
 8002610:	0a1b      	lsrs	r3, r3, #8
 8002612:	b29b      	uxth	r3, r3
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4b15      	ldr	r3, [pc, #84]	@ (800266c <readInputRegisters_M+0x7c>)
 8002618:	709a      	strb	r2, [r3, #2]
  TxData_M[3] = startAddr & 0xFF;
 800261a:	88bb      	ldrh	r3, [r7, #4]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4b13      	ldr	r3, [pc, #76]	@ (800266c <readInputRegisters_M+0x7c>)
 8002620:	70da      	strb	r2, [r3, #3]
  TxData_M[4] = (numRegs >> 8) & 0xFF;
 8002622:	887b      	ldrh	r3, [r7, #2]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	b29b      	uxth	r3, r3
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b10      	ldr	r3, [pc, #64]	@ (800266c <readInputRegisters_M+0x7c>)
 800262c:	711a      	strb	r2, [r3, #4]
  TxData_M[5] = numRegs & 0xFF;
 800262e:	887b      	ldrh	r3, [r7, #2]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <readInputRegisters_M+0x7c>)
 8002634:	715a      	strb	r2, [r3, #5]

  uint16_t crc = crc16(TxData_M, 6);
 8002636:	2106      	movs	r1, #6
 8002638:	480c      	ldr	r0, [pc, #48]	@ (800266c <readInputRegisters_M+0x7c>)
 800263a:	f7ff ff61 	bl	8002500 <crc16>
 800263e:	4603      	mov	r3, r0
 8002640:	81fb      	strh	r3, [r7, #14]
  TxData_M[6] = crc & 0xFF;
 8002642:	89fb      	ldrh	r3, [r7, #14]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <readInputRegisters_M+0x7c>)
 8002648:	719a      	strb	r2, [r3, #6]
  TxData_M[7] = (crc >> 8) & 0xFF;
 800264a:	89fb      	ldrh	r3, [r7, #14]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	b29b      	uxth	r3, r3
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b06      	ldr	r3, [pc, #24]	@ (800266c <readInputRegisters_M+0x7c>)
 8002654:	71da      	strb	r2, [r3, #7]

  HAL_UART_Transmit(&huart2, TxData_M, 8, 1000);
 8002656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800265a:	2208      	movs	r2, #8
 800265c:	4903      	ldr	r1, [pc, #12]	@ (800266c <readInputRegisters_M+0x7c>)
 800265e:	4804      	ldr	r0, [pc, #16]	@ (8002670 <readInputRegisters_M+0x80>)
 8002660:	f004 f9fa 	bl	8006a58 <HAL_UART_Transmit>
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	200003d4 	.word	0x200003d4
 8002670:	200002fc 	.word	0x200002fc

08002674 <readCoils_M>:

/**
  * @brief  Reads Coils (0x01)
  */
void readCoils_M(uint8_t slaveAddr, uint16_t startAddr, uint16_t numCoils)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	71fb      	strb	r3, [r7, #7]
 800267e:	460b      	mov	r3, r1
 8002680:	80bb      	strh	r3, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	807b      	strh	r3, [r7, #2]
  TxData_M[0] = slaveAddr;
 8002686:	4a1a      	ldr	r2, [pc, #104]	@ (80026f0 <readCoils_M+0x7c>)
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	7013      	strb	r3, [r2, #0]
  TxData_M[1] = 0x01;  // Function code for Read Coils
 800268c:	4b18      	ldr	r3, [pc, #96]	@ (80026f0 <readCoils_M+0x7c>)
 800268e:	2201      	movs	r2, #1
 8002690:	705a      	strb	r2, [r3, #1]
  TxData_M[2] = (startAddr >> 8) & 0xFF;
 8002692:	88bb      	ldrh	r3, [r7, #4]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	b29b      	uxth	r3, r3
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <readCoils_M+0x7c>)
 800269c:	709a      	strb	r2, [r3, #2]
  TxData_M[3] = startAddr & 0xFF;
 800269e:	88bb      	ldrh	r3, [r7, #4]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b13      	ldr	r3, [pc, #76]	@ (80026f0 <readCoils_M+0x7c>)
 80026a4:	70da      	strb	r2, [r3, #3]
  TxData_M[4] = (numCoils >> 8) & 0xFF;
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4b10      	ldr	r3, [pc, #64]	@ (80026f0 <readCoils_M+0x7c>)
 80026b0:	711a      	strb	r2, [r3, #4]
  TxData_M[5] = numCoils & 0xFF;
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4b0e      	ldr	r3, [pc, #56]	@ (80026f0 <readCoils_M+0x7c>)
 80026b8:	715a      	strb	r2, [r3, #5]

  uint16_t crc = crc16(TxData_M, 6);
 80026ba:	2106      	movs	r1, #6
 80026bc:	480c      	ldr	r0, [pc, #48]	@ (80026f0 <readCoils_M+0x7c>)
 80026be:	f7ff ff1f 	bl	8002500 <crc16>
 80026c2:	4603      	mov	r3, r0
 80026c4:	81fb      	strh	r3, [r7, #14]
  TxData_M[6] = crc & 0xFF;
 80026c6:	89fb      	ldrh	r3, [r7, #14]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4b09      	ldr	r3, [pc, #36]	@ (80026f0 <readCoils_M+0x7c>)
 80026cc:	719a      	strb	r2, [r3, #6]
  TxData_M[7] = (crc >> 8) & 0xFF;
 80026ce:	89fb      	ldrh	r3, [r7, #14]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <readCoils_M+0x7c>)
 80026d8:	71da      	strb	r2, [r3, #7]

  HAL_UART_Transmit(&huart2, TxData_M, 8, 1000);
 80026da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026de:	2208      	movs	r2, #8
 80026e0:	4903      	ldr	r1, [pc, #12]	@ (80026f0 <readCoils_M+0x7c>)
 80026e2:	4804      	ldr	r0, [pc, #16]	@ (80026f4 <readCoils_M+0x80>)
 80026e4:	f004 f9b8 	bl	8006a58 <HAL_UART_Transmit>
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	200003d4 	.word	0x200003d4
 80026f4:	200002fc 	.word	0x200002fc

080026f8 <readDiscreteInputs_M>:

/**
  * @brief  Reads Discrete Inputs (0x02)
  */
void readDiscreteInputs_M(uint8_t slaveAddr, uint16_t startAddr, uint16_t numInputs)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
 8002702:	460b      	mov	r3, r1
 8002704:	80bb      	strh	r3, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	807b      	strh	r3, [r7, #2]
  TxData_M[0] = slaveAddr;
 800270a:	4a1a      	ldr	r2, [pc, #104]	@ (8002774 <readDiscreteInputs_M+0x7c>)
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	7013      	strb	r3, [r2, #0]
  TxData_M[1] = 0x02;  // Function code for Read Discrete Inputs
 8002710:	4b18      	ldr	r3, [pc, #96]	@ (8002774 <readDiscreteInputs_M+0x7c>)
 8002712:	2202      	movs	r2, #2
 8002714:	705a      	strb	r2, [r3, #1]
  TxData_M[2] = (startAddr >> 8) & 0xFF;
 8002716:	88bb      	ldrh	r3, [r7, #4]
 8002718:	0a1b      	lsrs	r3, r3, #8
 800271a:	b29b      	uxth	r3, r3
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <readDiscreteInputs_M+0x7c>)
 8002720:	709a      	strb	r2, [r3, #2]
  TxData_M[3] = startAddr & 0xFF;
 8002722:	88bb      	ldrh	r3, [r7, #4]
 8002724:	b2da      	uxtb	r2, r3
 8002726:	4b13      	ldr	r3, [pc, #76]	@ (8002774 <readDiscreteInputs_M+0x7c>)
 8002728:	70da      	strb	r2, [r3, #3]
  TxData_M[4] = (numInputs >> 8) & 0xFF;
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	b29b      	uxth	r3, r3
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <readDiscreteInputs_M+0x7c>)
 8002734:	711a      	strb	r2, [r3, #4]
  TxData_M[5] = numInputs & 0xFF;
 8002736:	887b      	ldrh	r3, [r7, #2]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b0e      	ldr	r3, [pc, #56]	@ (8002774 <readDiscreteInputs_M+0x7c>)
 800273c:	715a      	strb	r2, [r3, #5]

  uint16_t crc = crc16(TxData_M, 6);
 800273e:	2106      	movs	r1, #6
 8002740:	480c      	ldr	r0, [pc, #48]	@ (8002774 <readDiscreteInputs_M+0x7c>)
 8002742:	f7ff fedd 	bl	8002500 <crc16>
 8002746:	4603      	mov	r3, r0
 8002748:	81fb      	strh	r3, [r7, #14]
  TxData_M[6] = crc & 0xFF;
 800274a:	89fb      	ldrh	r3, [r7, #14]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4b09      	ldr	r3, [pc, #36]	@ (8002774 <readDiscreteInputs_M+0x7c>)
 8002750:	719a      	strb	r2, [r3, #6]
  TxData_M[7] = (crc >> 8) & 0xFF;
 8002752:	89fb      	ldrh	r3, [r7, #14]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	b29b      	uxth	r3, r3
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <readDiscreteInputs_M+0x7c>)
 800275c:	71da      	strb	r2, [r3, #7]

  HAL_UART_Transmit(&huart2, TxData_M, 8, 1000);
 800275e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002762:	2208      	movs	r2, #8
 8002764:	4903      	ldr	r1, [pc, #12]	@ (8002774 <readDiscreteInputs_M+0x7c>)
 8002766:	4804      	ldr	r0, [pc, #16]	@ (8002778 <readDiscreteInputs_M+0x80>)
 8002768:	f004 f976 	bl	8006a58 <HAL_UART_Transmit>
}
 800276c:	bf00      	nop
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	200003d4 	.word	0x200003d4
 8002778:	200002fc 	.word	0x200002fc

0800277c <writeSingleRegister_M>:

/**
  * @brief  Writes Single Register (0x06)
  */
void writeSingleRegister_M(uint8_t slaveAddr, uint16_t addr, uint16_t value)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
 8002786:	460b      	mov	r3, r1
 8002788:	80bb      	strh	r3, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	807b      	strh	r3, [r7, #2]
  TxData_M[0] = slaveAddr;
 800278e:	4a1a      	ldr	r2, [pc, #104]	@ (80027f8 <writeSingleRegister_M+0x7c>)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	7013      	strb	r3, [r2, #0]
  TxData_M[1] = 0x06;  // Function code for Write Single Register
 8002794:	4b18      	ldr	r3, [pc, #96]	@ (80027f8 <writeSingleRegister_M+0x7c>)
 8002796:	2206      	movs	r2, #6
 8002798:	705a      	strb	r2, [r3, #1]
  TxData_M[2] = (addr >> 8) & 0xFF;
 800279a:	88bb      	ldrh	r3, [r7, #4]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	b29b      	uxth	r3, r3
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <writeSingleRegister_M+0x7c>)
 80027a4:	709a      	strb	r2, [r3, #2]
  TxData_M[3] = addr & 0xFF;
 80027a6:	88bb      	ldrh	r3, [r7, #4]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <writeSingleRegister_M+0x7c>)
 80027ac:	70da      	strb	r2, [r3, #3]
  TxData_M[4] = (value >> 8) & 0xFF;
 80027ae:	887b      	ldrh	r3, [r7, #2]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <writeSingleRegister_M+0x7c>)
 80027b8:	711a      	strb	r2, [r3, #4]
  TxData_M[5] = value & 0xFF;
 80027ba:	887b      	ldrh	r3, [r7, #2]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b0e      	ldr	r3, [pc, #56]	@ (80027f8 <writeSingleRegister_M+0x7c>)
 80027c0:	715a      	strb	r2, [r3, #5]

  uint16_t crc = crc16(TxData_M, 6);
 80027c2:	2106      	movs	r1, #6
 80027c4:	480c      	ldr	r0, [pc, #48]	@ (80027f8 <writeSingleRegister_M+0x7c>)
 80027c6:	f7ff fe9b 	bl	8002500 <crc16>
 80027ca:	4603      	mov	r3, r0
 80027cc:	81fb      	strh	r3, [r7, #14]
  TxData_M[6] = crc & 0xFF;
 80027ce:	89fb      	ldrh	r3, [r7, #14]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <writeSingleRegister_M+0x7c>)
 80027d4:	719a      	strb	r2, [r3, #6]
  TxData_M[7] = (crc >> 8) & 0xFF;
 80027d6:	89fb      	ldrh	r3, [r7, #14]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	b29b      	uxth	r3, r3
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <writeSingleRegister_M+0x7c>)
 80027e0:	71da      	strb	r2, [r3, #7]

  HAL_UART_Transmit(&huart2, TxData_M, 8, 1000);
 80027e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027e6:	2208      	movs	r2, #8
 80027e8:	4903      	ldr	r1, [pc, #12]	@ (80027f8 <writeSingleRegister_M+0x7c>)
 80027ea:	4804      	ldr	r0, [pc, #16]	@ (80027fc <writeSingleRegister_M+0x80>)
 80027ec:	f004 f934 	bl	8006a58 <HAL_UART_Transmit>
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200003d4 	.word	0x200003d4
 80027fc:	200002fc 	.word	0x200002fc

08002800 <writeMultipleRegisters_M>:

/**
  * @brief  Writes Multiple Registers (0x10)
  */
void writeMultipleRegisters_M(uint8_t slaveAddr, uint16_t startAddr, uint16_t numRegs, uint16_t* values)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	4603      	mov	r3, r0
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	460b      	mov	r3, r1
 800280e:	81bb      	strh	r3, [r7, #12]
 8002810:	4613      	mov	r3, r2
 8002812:	817b      	strh	r3, [r7, #10]
  TxData_M[0] = slaveAddr;
 8002814:	4a34      	ldr	r2, [pc, #208]	@ (80028e8 <writeMultipleRegisters_M+0xe8>)
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	7013      	strb	r3, [r2, #0]
  TxData_M[1] = 0x10;  // Function code for Write Multiple Registers
 800281a:	4b33      	ldr	r3, [pc, #204]	@ (80028e8 <writeMultipleRegisters_M+0xe8>)
 800281c:	2210      	movs	r2, #16
 800281e:	705a      	strb	r2, [r3, #1]
  TxData_M[2] = (startAddr >> 8) & 0xFF;
 8002820:	89bb      	ldrh	r3, [r7, #12]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	b29b      	uxth	r3, r3
 8002826:	b2da      	uxtb	r2, r3
 8002828:	4b2f      	ldr	r3, [pc, #188]	@ (80028e8 <writeMultipleRegisters_M+0xe8>)
 800282a:	709a      	strb	r2, [r3, #2]
  TxData_M[3] = startAddr & 0xFF;
 800282c:	89bb      	ldrh	r3, [r7, #12]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	4b2d      	ldr	r3, [pc, #180]	@ (80028e8 <writeMultipleRegisters_M+0xe8>)
 8002832:	70da      	strb	r2, [r3, #3]
  TxData_M[4] = (numRegs >> 8) & 0xFF;
 8002834:	897b      	ldrh	r3, [r7, #10]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	b29b      	uxth	r3, r3
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b2a      	ldr	r3, [pc, #168]	@ (80028e8 <writeMultipleRegisters_M+0xe8>)
 800283e:	711a      	strb	r2, [r3, #4]
  TxData_M[5] = numRegs & 0xFF;
 8002840:	897b      	ldrh	r3, [r7, #10]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	4b28      	ldr	r3, [pc, #160]	@ (80028e8 <writeMultipleRegisters_M+0xe8>)
 8002846:	715a      	strb	r2, [r3, #5]
  TxData_M[6] = numRegs * 2;  // Number of bytes to write
 8002848:	897b      	ldrh	r3, [r7, #10]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	b2da      	uxtb	r2, r3
 8002850:	4b25      	ldr	r3, [pc, #148]	@ (80028e8 <writeMultipleRegisters_M+0xe8>)
 8002852:	719a      	strb	r2, [r3, #6]

  // Add values to TxData
  for (int i = 0; i < numRegs; i++) {
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	e01a      	b.n	8002890 <writeMultipleRegisters_M+0x90>
	TxData_M[7 + 2 * i] = (values[i] >> 8) & 0xFF;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	b29a      	uxth	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	3307      	adds	r3, #7
 800286e:	b2d1      	uxtb	r1, r2
 8002870:	4a1d      	ldr	r2, [pc, #116]	@ (80028e8 <writeMultipleRegisters_M+0xe8>)
 8002872:	54d1      	strb	r1, [r2, r3]
	TxData_M[8 + 2 * i] = values[i] & 0xFF;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3304      	adds	r3, #4
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	b2d1      	uxtb	r1, r2
 8002886:	4a18      	ldr	r2, [pc, #96]	@ (80028e8 <writeMultipleRegisters_M+0xe8>)
 8002888:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < numRegs; i++) {
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3301      	adds	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	897b      	ldrh	r3, [r7, #10]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	429a      	cmp	r2, r3
 8002896:	dbe0      	blt.n	800285a <writeMultipleRegisters_M+0x5a>
  }

  uint16_t crc = crc16(TxData_M, 6 + numRegs * 2);
 8002898:	897b      	ldrh	r3, [r7, #10]
 800289a:	3303      	adds	r3, #3
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4619      	mov	r1, r3
 80028a0:	4811      	ldr	r0, [pc, #68]	@ (80028e8 <writeMultipleRegisters_M+0xe8>)
 80028a2:	f7ff fe2d 	bl	8002500 <crc16>
 80028a6:	4603      	mov	r3, r0
 80028a8:	827b      	strh	r3, [r7, #18]
  TxData_M[6 + numRegs * 2] = crc & 0xFF;
 80028aa:	897b      	ldrh	r3, [r7, #10]
 80028ac:	3303      	adds	r3, #3
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	8a7a      	ldrh	r2, [r7, #18]
 80028b2:	b2d1      	uxtb	r1, r2
 80028b4:	4a0c      	ldr	r2, [pc, #48]	@ (80028e8 <writeMultipleRegisters_M+0xe8>)
 80028b6:	54d1      	strb	r1, [r2, r3]
  TxData_M[7 + numRegs * 2] = (crc >> 8) & 0xFF;
 80028b8:	8a7b      	ldrh	r3, [r7, #18]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	b29a      	uxth	r2, r3
 80028be:	897b      	ldrh	r3, [r7, #10]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	3307      	adds	r3, #7
 80028c4:	b2d1      	uxtb	r1, r2
 80028c6:	4a08      	ldr	r2, [pc, #32]	@ (80028e8 <writeMultipleRegisters_M+0xe8>)
 80028c8:	54d1      	strb	r1, [r2, r3]

  HAL_UART_Transmit(&huart2, TxData_M, 8 + numRegs * 2, 1000);
 80028ca:	897b      	ldrh	r3, [r7, #10]
 80028cc:	3304      	adds	r3, #4
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028d8:	4903      	ldr	r1, [pc, #12]	@ (80028e8 <writeMultipleRegisters_M+0xe8>)
 80028da:	4804      	ldr	r0, [pc, #16]	@ (80028ec <writeMultipleRegisters_M+0xec>)
 80028dc:	f004 f8bc 	bl	8006a58 <HAL_UART_Transmit>
}
 80028e0:	bf00      	nop
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	200003d4 	.word	0x200003d4
 80028ec:	200002fc 	.word	0x200002fc

080028f0 <writeSingleCoil_M>:

/**
  * @brief  Writes Single Coil (0x05)
  */
void writeSingleCoil_M(uint8_t slaveAddr, uint16_t addr, uint8_t value)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
 80028fa:	460b      	mov	r3, r1
 80028fc:	80bb      	strh	r3, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	71bb      	strb	r3, [r7, #6]
  TxData_M[0] = slaveAddr;
 8002902:	4a1b      	ldr	r2, [pc, #108]	@ (8002970 <writeSingleCoil_M+0x80>)
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	7013      	strb	r3, [r2, #0]
  TxData_M[1] = 0x05;  // Function code for Write Single Coil
 8002908:	4b19      	ldr	r3, [pc, #100]	@ (8002970 <writeSingleCoil_M+0x80>)
 800290a:	2205      	movs	r2, #5
 800290c:	705a      	strb	r2, [r3, #1]
  TxData_M[2] = (addr >> 8) & 0xFF;
 800290e:	88bb      	ldrh	r3, [r7, #4]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	b29b      	uxth	r3, r3
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4b16      	ldr	r3, [pc, #88]	@ (8002970 <writeSingleCoil_M+0x80>)
 8002918:	709a      	strb	r2, [r3, #2]
  TxData_M[3] = addr & 0xFF;
 800291a:	88bb      	ldrh	r3, [r7, #4]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <writeSingleCoil_M+0x80>)
 8002920:	70da      	strb	r2, [r3, #3]
  TxData_M[4] = (value == 0) ? 0x00 : 0xFF;
 8002922:	79bb      	ldrb	r3, [r7, #6]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <writeSingleCoil_M+0x3c>
 8002928:	2200      	movs	r2, #0
 800292a:	e000      	b.n	800292e <writeSingleCoil_M+0x3e>
 800292c:	22ff      	movs	r2, #255	@ 0xff
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <writeSingleCoil_M+0x80>)
 8002930:	711a      	strb	r2, [r3, #4]
  TxData_M[5] = 0x00;
 8002932:	4b0f      	ldr	r3, [pc, #60]	@ (8002970 <writeSingleCoil_M+0x80>)
 8002934:	2200      	movs	r2, #0
 8002936:	715a      	strb	r2, [r3, #5]

  uint16_t crc = crc16(TxData_M, 6);
 8002938:	2106      	movs	r1, #6
 800293a:	480d      	ldr	r0, [pc, #52]	@ (8002970 <writeSingleCoil_M+0x80>)
 800293c:	f7ff fde0 	bl	8002500 <crc16>
 8002940:	4603      	mov	r3, r0
 8002942:	81fb      	strh	r3, [r7, #14]
  TxData_M[6] = crc & 0xFF;
 8002944:	89fb      	ldrh	r3, [r7, #14]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <writeSingleCoil_M+0x80>)
 800294a:	719a      	strb	r2, [r3, #6]
  TxData_M[7] = (crc >> 8) & 0xFF;
 800294c:	89fb      	ldrh	r3, [r7, #14]
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	b29b      	uxth	r3, r3
 8002952:	b2da      	uxtb	r2, r3
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <writeSingleCoil_M+0x80>)
 8002956:	71da      	strb	r2, [r3, #7]

  HAL_UART_Transmit(&huart2, TxData_M, 8, 1000);
 8002958:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800295c:	2208      	movs	r2, #8
 800295e:	4904      	ldr	r1, [pc, #16]	@ (8002970 <writeSingleCoil_M+0x80>)
 8002960:	4804      	ldr	r0, [pc, #16]	@ (8002974 <writeSingleCoil_M+0x84>)
 8002962:	f004 f879 	bl	8006a58 <HAL_UART_Transmit>
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200003d4 	.word	0x200003d4
 8002974:	200002fc 	.word	0x200002fc

08002978 <writeMultipleCoils_M>:

/**
  * @brief  Writes Multiple Coils (0x0F)
  */
void writeMultipleCoils_M(uint8_t slaveAddr, uint16_t startAddr, uint16_t numCoils, uint8_t* values)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	4603      	mov	r3, r0
 8002982:	73fb      	strb	r3, [r7, #15]
 8002984:	460b      	mov	r3, r1
 8002986:	81bb      	strh	r3, [r7, #12]
 8002988:	4613      	mov	r3, r2
 800298a:	817b      	strh	r3, [r7, #10]
  TxData_M[0] = slaveAddr;
 800298c:	4a39      	ldr	r2, [pc, #228]	@ (8002a74 <writeMultipleCoils_M+0xfc>)
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	7013      	strb	r3, [r2, #0]
  TxData_M[1] = 0x0F;  // Function code for Write Multiple Coils
 8002992:	4b38      	ldr	r3, [pc, #224]	@ (8002a74 <writeMultipleCoils_M+0xfc>)
 8002994:	220f      	movs	r2, #15
 8002996:	705a      	strb	r2, [r3, #1]
  TxData_M[2] = (startAddr >> 8) & 0xFF;
 8002998:	89bb      	ldrh	r3, [r7, #12]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	b29b      	uxth	r3, r3
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	4b34      	ldr	r3, [pc, #208]	@ (8002a74 <writeMultipleCoils_M+0xfc>)
 80029a2:	709a      	strb	r2, [r3, #2]
  TxData_M[3] = startAddr & 0xFF;
 80029a4:	89bb      	ldrh	r3, [r7, #12]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	4b32      	ldr	r3, [pc, #200]	@ (8002a74 <writeMultipleCoils_M+0xfc>)
 80029aa:	70da      	strb	r2, [r3, #3]
  TxData_M[4] = (numCoils >> 8) & 0xFF;
 80029ac:	897b      	ldrh	r3, [r7, #10]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002a74 <writeMultipleCoils_M+0xfc>)
 80029b6:	711a      	strb	r2, [r3, #4]
  TxData_M[5] = numCoils & 0xFF;
 80029b8:	897b      	ldrh	r3, [r7, #10]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002a74 <writeMultipleCoils_M+0xfc>)
 80029be:	715a      	strb	r2, [r3, #5]
  TxData_M[6] = (numCoils + 7) / 8;  // Number of bytes needed to represent coils
 80029c0:	897b      	ldrh	r3, [r7, #10]
 80029c2:	3307      	adds	r3, #7
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	da00      	bge.n	80029ca <writeMultipleCoils_M+0x52>
 80029c8:	3307      	adds	r3, #7
 80029ca:	10db      	asrs	r3, r3, #3
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4b29      	ldr	r3, [pc, #164]	@ (8002a74 <writeMultipleCoils_M+0xfc>)
 80029d0:	719a      	strb	r2, [r3, #6]

  // Add coil values to TxData
  for (int i = 0; i < (numCoils + 7) / 8; i++) {
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e00a      	b.n	80029ee <writeMultipleCoils_M+0x76>
	  TxData_M[7 + i] = values[i];
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	441a      	add	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	3307      	adds	r3, #7
 80029e2:	7811      	ldrb	r1, [r2, #0]
 80029e4:	4a23      	ldr	r2, [pc, #140]	@ (8002a74 <writeMultipleCoils_M+0xfc>)
 80029e6:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < (numCoils + 7) / 8; i++) {
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3301      	adds	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	897b      	ldrh	r3, [r7, #10]
 80029f0:	3307      	adds	r3, #7
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	da00      	bge.n	80029f8 <writeMultipleCoils_M+0x80>
 80029f6:	3307      	adds	r3, #7
 80029f8:	10db      	asrs	r3, r3, #3
 80029fa:	461a      	mov	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	4293      	cmp	r3, r2
 8002a00:	dbea      	blt.n	80029d8 <writeMultipleCoils_M+0x60>
  }

  uint16_t crc = crc16(TxData_M, 6 + (numCoils + 7) / 8);
 8002a02:	897b      	ldrh	r3, [r7, #10]
 8002a04:	3307      	adds	r3, #7
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	da00      	bge.n	8002a0c <writeMultipleCoils_M+0x94>
 8002a0a:	3307      	adds	r3, #7
 8002a0c:	10db      	asrs	r3, r3, #3
 8002a0e:	3306      	adds	r3, #6
 8002a10:	4619      	mov	r1, r3
 8002a12:	4818      	ldr	r0, [pc, #96]	@ (8002a74 <writeMultipleCoils_M+0xfc>)
 8002a14:	f7ff fd74 	bl	8002500 <crc16>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	827b      	strh	r3, [r7, #18]
  TxData_M[7 + (numCoils + 7) / 8] = crc & 0xFF;
 8002a1c:	897b      	ldrh	r3, [r7, #10]
 8002a1e:	3307      	adds	r3, #7
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	da00      	bge.n	8002a26 <writeMultipleCoils_M+0xae>
 8002a24:	3307      	adds	r3, #7
 8002a26:	10db      	asrs	r3, r3, #3
 8002a28:	3307      	adds	r3, #7
 8002a2a:	8a7a      	ldrh	r2, [r7, #18]
 8002a2c:	b2d1      	uxtb	r1, r2
 8002a2e:	4a11      	ldr	r2, [pc, #68]	@ (8002a74 <writeMultipleCoils_M+0xfc>)
 8002a30:	54d1      	strb	r1, [r2, r3]
  TxData_M[8 + (numCoils + 7) / 8] = (crc >> 8) & 0xFF;
 8002a32:	8a7b      	ldrh	r3, [r7, #18]
 8002a34:	0a1b      	lsrs	r3, r3, #8
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	897b      	ldrh	r3, [r7, #10]
 8002a3a:	3307      	adds	r3, #7
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	da00      	bge.n	8002a42 <writeMultipleCoils_M+0xca>
 8002a40:	3307      	adds	r3, #7
 8002a42:	10db      	asrs	r3, r3, #3
 8002a44:	3308      	adds	r3, #8
 8002a46:	b2d1      	uxtb	r1, r2
 8002a48:	4a0a      	ldr	r2, [pc, #40]	@ (8002a74 <writeMultipleCoils_M+0xfc>)
 8002a4a:	54d1      	strb	r1, [r2, r3]

  HAL_UART_Transmit(&huart2, TxData_M, 9 + (numCoils + 7) / 8, 1000);
 8002a4c:	897b      	ldrh	r3, [r7, #10]
 8002a4e:	3307      	adds	r3, #7
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	da00      	bge.n	8002a56 <writeMultipleCoils_M+0xde>
 8002a54:	3307      	adds	r3, #7
 8002a56:	10db      	asrs	r3, r3, #3
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3309      	adds	r3, #9
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a62:	4904      	ldr	r1, [pc, #16]	@ (8002a74 <writeMultipleCoils_M+0xfc>)
 8002a64:	4804      	ldr	r0, [pc, #16]	@ (8002a78 <writeMultipleCoils_M+0x100>)
 8002a66:	f003 fff7 	bl	8006a58 <HAL_UART_Transmit>
}
 8002a6a:	bf00      	nop
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200003d4 	.word	0x200003d4
 8002a78:	200002fc 	.word	0x200002fc

08002a7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <HAL_MspInit+0x4c>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ac8 <HAL_MspInit+0x4c>)
 8002a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <HAL_MspInit+0x4c>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a9a:	607b      	str	r3, [r7, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_MspInit+0x4c>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	4a08      	ldr	r2, [pc, #32]	@ (8002ac8 <HAL_MspInit+0x4c>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aae:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <HAL_MspInit+0x4c>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800

08002acc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	@ 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a17      	ldr	r2, [pc, #92]	@ (8002b48 <HAL_ADC_MspInit+0x7c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d127      	bne.n	8002b3e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	4b16      	ldr	r3, [pc, #88]	@ (8002b4c <HAL_ADC_MspInit+0x80>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	4a15      	ldr	r2, [pc, #84]	@ (8002b4c <HAL_ADC_MspInit+0x80>)
 8002af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afe:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <HAL_ADC_MspInit+0x80>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b4c <HAL_ADC_MspInit+0x80>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	4a0e      	ldr	r2, [pc, #56]	@ (8002b4c <HAL_ADC_MspInit+0x80>)
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b4c <HAL_ADC_MspInit+0x80>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b26:	2303      	movs	r3, #3
 8002b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	4805      	ldr	r0, [pc, #20]	@ (8002b50 <HAL_ADC_MspInit+0x84>)
 8002b3a:	f001 f901 	bl	8003d40 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002b3e:	bf00      	nop
 8002b40:	3728      	adds	r7, #40	@ 0x28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40012000 	.word	0x40012000
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40020400 	.word	0x40020400

08002b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08a      	sub	sp, #40	@ 0x28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a19      	ldr	r2, [pc, #100]	@ (8002bd8 <HAL_I2C_MspInit+0x84>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d12c      	bne.n	8002bd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	4b18      	ldr	r3, [pc, #96]	@ (8002bdc <HAL_I2C_MspInit+0x88>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	4a17      	ldr	r2, [pc, #92]	@ (8002bdc <HAL_I2C_MspInit+0x88>)
 8002b80:	f043 0302 	orr.w	r3, r3, #2
 8002b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b86:	4b15      	ldr	r3, [pc, #84]	@ (8002bdc <HAL_I2C_MspInit+0x88>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b98:	2312      	movs	r3, #18
 8002b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	4619      	mov	r1, r3
 8002bae:	480c      	ldr	r0, [pc, #48]	@ (8002be0 <HAL_I2C_MspInit+0x8c>)
 8002bb0:	f001 f8c6 	bl	8003d40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <HAL_I2C_MspInit+0x88>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	4a07      	ldr	r2, [pc, #28]	@ (8002bdc <HAL_I2C_MspInit+0x88>)
 8002bbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bc4:	4b05      	ldr	r3, [pc, #20]	@ (8002bdc <HAL_I2C_MspInit+0x88>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002bd0:	bf00      	nop
 8002bd2:	3728      	adds	r7, #40	@ 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40005400 	.word	0x40005400
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40020400 	.word	0x40020400

08002be4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf4:	d10e      	bne.n	8002c14 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	4b13      	ldr	r3, [pc, #76]	@ (8002c48 <HAL_TIM_PWM_MspInit+0x64>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	4a12      	ldr	r2, [pc, #72]	@ (8002c48 <HAL_TIM_PWM_MspInit+0x64>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c06:	4b10      	ldr	r3, [pc, #64]	@ (8002c48 <HAL_TIM_PWM_MspInit+0x64>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c12:	e012      	b.n	8002c3a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0c      	ldr	r2, [pc, #48]	@ (8002c4c <HAL_TIM_PWM_MspInit+0x68>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10d      	bne.n	8002c3a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	4b09      	ldr	r3, [pc, #36]	@ (8002c48 <HAL_TIM_PWM_MspInit+0x64>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	4a08      	ldr	r2, [pc, #32]	@ (8002c48 <HAL_TIM_PWM_MspInit+0x64>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_TIM_PWM_MspInit+0x64>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
}
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40000400 	.word	0x40000400

08002c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0e      	ldr	r2, [pc, #56]	@ (8002c98 <HAL_TIM_Base_MspInit+0x48>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d115      	bne.n	8002c8e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4b0d      	ldr	r3, [pc, #52]	@ (8002c9c <HAL_TIM_Base_MspInit+0x4c>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c9c <HAL_TIM_Base_MspInit+0x4c>)
 8002c6c:	f043 0310 	orr.w	r3, r3, #16
 8002c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c72:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <HAL_TIM_Base_MspInit+0x4c>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	2036      	movs	r0, #54	@ 0x36
 8002c84:	f000 ff85 	bl	8003b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c88:	2036      	movs	r0, #54	@ 0x36
 8002c8a:	f000 ff9e 	bl	8003bca <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40001000 	.word	0x40001000
 8002c9c:	40023800 	.word	0x40023800

08002ca0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	@ 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc0:	d11e      	bne.n	8002d00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	4b22      	ldr	r3, [pc, #136]	@ (8002d50 <HAL_TIM_MspPostInit+0xb0>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	4a21      	ldr	r2, [pc, #132]	@ (8002d50 <HAL_TIM_MspPostInit+0xb0>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d50 <HAL_TIM_MspPostInit+0xb0>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cde:	2320      	movs	r3, #32
 8002ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4816      	ldr	r0, [pc, #88]	@ (8002d54 <HAL_TIM_MspPostInit+0xb4>)
 8002cfa:	f001 f821 	bl	8003d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002cfe:	e022      	b.n	8002d46 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a14      	ldr	r2, [pc, #80]	@ (8002d58 <HAL_TIM_MspPostInit+0xb8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d11d      	bne.n	8002d46 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <HAL_TIM_MspPostInit+0xb0>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	4a0f      	ldr	r2, [pc, #60]	@ (8002d50 <HAL_TIM_MspPostInit+0xb0>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <HAL_TIM_MspPostInit+0xb0>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d26:	2340      	movs	r3, #64	@ 0x40
 8002d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d32:	2300      	movs	r3, #0
 8002d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d36:	2302      	movs	r3, #2
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3a:	f107 0314 	add.w	r3, r7, #20
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4804      	ldr	r0, [pc, #16]	@ (8002d54 <HAL_TIM_MspPostInit+0xb4>)
 8002d42:	f000 fffd 	bl	8003d40 <HAL_GPIO_Init>
}
 8002d46:	bf00      	nop
 8002d48:	3728      	adds	r7, #40	@ 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40020000 	.word	0x40020000
 8002d58:	40000400 	.word	0x40000400

08002d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08c      	sub	sp, #48	@ 0x30
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	f107 031c 	add.w	r3, r7, #28
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a3a      	ldr	r2, [pc, #232]	@ (8002e64 <HAL_UART_MspInit+0x108>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d134      	bne.n	8002de8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	4b39      	ldr	r3, [pc, #228]	@ (8002e68 <HAL_UART_MspInit+0x10c>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	4a38      	ldr	r2, [pc, #224]	@ (8002e68 <HAL_UART_MspInit+0x10c>)
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d8e:	4b36      	ldr	r3, [pc, #216]	@ (8002e68 <HAL_UART_MspInit+0x10c>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	4b32      	ldr	r3, [pc, #200]	@ (8002e68 <HAL_UART_MspInit+0x10c>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	4a31      	ldr	r2, [pc, #196]	@ (8002e68 <HAL_UART_MspInit+0x10c>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002daa:	4b2f      	ldr	r3, [pc, #188]	@ (8002e68 <HAL_UART_MspInit+0x10c>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002db6:	230c      	movs	r3, #12
 8002db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dc6:	2307      	movs	r3, #7
 8002dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dca:	f107 031c 	add.w	r3, r7, #28
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4826      	ldr	r0, [pc, #152]	@ (8002e6c <HAL_UART_MspInit+0x110>)
 8002dd2:	f000 ffb5 	bl	8003d40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2100      	movs	r1, #0
 8002dda:	2026      	movs	r0, #38	@ 0x26
 8002ddc:	f000 fed9 	bl	8003b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002de0:	2026      	movs	r0, #38	@ 0x26
 8002de2:	f000 fef2 	bl	8003bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002de6:	e039      	b.n	8002e5c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a20      	ldr	r2, [pc, #128]	@ (8002e70 <HAL_UART_MspInit+0x114>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d134      	bne.n	8002e5c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e68 <HAL_UART_MspInit+0x10c>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8002e68 <HAL_UART_MspInit+0x10c>)
 8002dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e02:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <HAL_UART_MspInit+0x10c>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	4b15      	ldr	r3, [pc, #84]	@ (8002e68 <HAL_UART_MspInit+0x10c>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	4a14      	ldr	r2, [pc, #80]	@ (8002e68 <HAL_UART_MspInit+0x10c>)
 8002e18:	f043 0302 	orr.w	r3, r3, #2
 8002e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1e:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_UART_MspInit+0x10c>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e3c:	2307      	movs	r3, #7
 8002e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e40:	f107 031c 	add.w	r3, r7, #28
 8002e44:	4619      	mov	r1, r3
 8002e46:	480b      	ldr	r0, [pc, #44]	@ (8002e74 <HAL_UART_MspInit+0x118>)
 8002e48:	f000 ff7a 	bl	8003d40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2100      	movs	r1, #0
 8002e50:	2027      	movs	r0, #39	@ 0x27
 8002e52:	f000 fe9e 	bl	8003b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e56:	2027      	movs	r0, #39	@ 0x27
 8002e58:	f000 feb7 	bl	8003bca <HAL_NVIC_EnableIRQ>
}
 8002e5c:	bf00      	nop
 8002e5e:	3730      	adds	r7, #48	@ 0x30
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40004400 	.word	0x40004400
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020000 	.word	0x40020000
 8002e70:	40004800 	.word	0x40004800
 8002e74:	40020400 	.word	0x40020400

08002e78 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a13      	ldr	r2, [pc, #76]	@ (8002ed4 <HAL_UART_MspDeInit+0x5c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10d      	bne.n	8002ea6 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8002e8a:	4b13      	ldr	r3, [pc, #76]	@ (8002ed8 <HAL_UART_MspDeInit+0x60>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	4a12      	ldr	r2, [pc, #72]	@ (8002ed8 <HAL_UART_MspDeInit+0x60>)
 8002e90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002e94:	6413      	str	r3, [r2, #64]	@ 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002e96:	210c      	movs	r1, #12
 8002e98:	4810      	ldr	r0, [pc, #64]	@ (8002edc <HAL_UART_MspDeInit+0x64>)
 8002e9a:	f001 f8ed 	bl	8004078 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002e9e:	2026      	movs	r0, #38	@ 0x26
 8002ea0:	f000 fea1 	bl	8003be6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8002ea4:	e012      	b.n	8002ecc <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART3)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee0 <HAL_UART_MspDeInit+0x68>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d10d      	bne.n	8002ecc <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART3_CLK_DISABLE();
 8002eb0:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <HAL_UART_MspDeInit+0x60>)
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	4a08      	ldr	r2, [pc, #32]	@ (8002ed8 <HAL_UART_MspDeInit+0x60>)
 8002eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eba:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8002ebc:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8002ec0:	4808      	ldr	r0, [pc, #32]	@ (8002ee4 <HAL_UART_MspDeInit+0x6c>)
 8002ec2:	f001 f8d9 	bl	8004078 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8002ec6:	2027      	movs	r0, #39	@ 0x27
 8002ec8:	f000 fe8d 	bl	8003be6 <HAL_NVIC_DisableIRQ>
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40004400 	.word	0x40004400
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40020000 	.word	0x40020000
 8002ee0:	40004800 	.word	0x40004800
 8002ee4:	40020400 	.word	0x40020400

08002ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002eec:	bf00      	nop
 8002eee:	e7fd      	b.n	8002eec <NMI_Handler+0x4>

08002ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ef4:	bf00      	nop
 8002ef6:	e7fd      	b.n	8002ef4 <HardFault_Handler+0x4>

08002ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002efc:	bf00      	nop
 8002efe:	e7fd      	b.n	8002efc <MemManage_Handler+0x4>

08002f00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f04:	bf00      	nop
 8002f06:	e7fd      	b.n	8002f04 <BusFault_Handler+0x4>

08002f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f0c:	bf00      	nop
 8002f0e:	e7fd      	b.n	8002f0c <UsageFault_Handler+0x4>

08002f10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f3e:	f000 f8e5 	bl	800310c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f4c:	4802      	ldr	r0, [pc, #8]	@ (8002f58 <USART2_IRQHandler+0x10>)
 8002f4e:	f003 ff03 	bl	8006d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200002fc 	.word	0x200002fc

08002f5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f60:	4802      	ldr	r0, [pc, #8]	@ (8002f6c <USART3_IRQHandler+0x10>)
 8002f62:	f003 fef9 	bl	8006d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000344 	.word	0x20000344

08002f70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f74:	4802      	ldr	r0, [pc, #8]	@ (8002f80 <TIM6_DAC_IRQHandler+0x10>)
 8002f76:	f003 f801 	bl	8005f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200002b4 	.word	0x200002b4

08002f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f8c:	4a14      	ldr	r2, [pc, #80]	@ (8002fe0 <_sbrk+0x5c>)
 8002f8e:	4b15      	ldr	r3, [pc, #84]	@ (8002fe4 <_sbrk+0x60>)
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f98:	4b13      	ldr	r3, [pc, #76]	@ (8002fe8 <_sbrk+0x64>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d102      	bne.n	8002fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fa0:	4b11      	ldr	r3, [pc, #68]	@ (8002fe8 <_sbrk+0x64>)
 8002fa2:	4a12      	ldr	r2, [pc, #72]	@ (8002fec <_sbrk+0x68>)
 8002fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fa6:	4b10      	ldr	r3, [pc, #64]	@ (8002fe8 <_sbrk+0x64>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d207      	bcs.n	8002fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb4:	f004 fef2 	bl	8007d9c <__errno>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	220c      	movs	r2, #12
 8002fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc2:	e009      	b.n	8002fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc4:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <_sbrk+0x64>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fca:	4b07      	ldr	r3, [pc, #28]	@ (8002fe8 <_sbrk+0x64>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	4a05      	ldr	r2, [pc, #20]	@ (8002fe8 <_sbrk+0x64>)
 8002fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20020000 	.word	0x20020000
 8002fe4:	00000400 	.word	0x00000400
 8002fe8:	20000800 	.word	0x20000800
 8002fec:	20000950 	.word	0x20000950

08002ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ff4:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <SystemInit+0x20>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffa:	4a05      	ldr	r2, [pc, #20]	@ (8003010 <SystemInit+0x20>)
 8002ffc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800304c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003018:	f7ff ffea 	bl	8002ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800301c:	480c      	ldr	r0, [pc, #48]	@ (8003050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800301e:	490d      	ldr	r1, [pc, #52]	@ (8003054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003020:	4a0d      	ldr	r2, [pc, #52]	@ (8003058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003024:	e002      	b.n	800302c <LoopCopyDataInit>

08003026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800302a:	3304      	adds	r3, #4

0800302c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800302c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800302e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003030:	d3f9      	bcc.n	8003026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003032:	4a0a      	ldr	r2, [pc, #40]	@ (800305c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003034:	4c0a      	ldr	r4, [pc, #40]	@ (8003060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003038:	e001      	b.n	800303e <LoopFillZerobss>

0800303a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800303a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800303c:	3204      	adds	r2, #4

0800303e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800303e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003040:	d3fb      	bcc.n	800303a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003042:	f004 feb1 	bl	8007da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003046:	f7fd fd1d 	bl	8000a84 <main>
  bx  lr    
 800304a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800304c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003054:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8003058:	0800915c 	.word	0x0800915c
  ldr r2, =_sbss
 800305c:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8003060:	20000950 	.word	0x20000950

08003064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003064:	e7fe      	b.n	8003064 <ADC_IRQHandler>
	...

08003068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800306c:	4b0e      	ldr	r3, [pc, #56]	@ (80030a8 <HAL_Init+0x40>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0d      	ldr	r2, [pc, #52]	@ (80030a8 <HAL_Init+0x40>)
 8003072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003078:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <HAL_Init+0x40>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0a      	ldr	r2, [pc, #40]	@ (80030a8 <HAL_Init+0x40>)
 800307e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003084:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <HAL_Init+0x40>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a07      	ldr	r2, [pc, #28]	@ (80030a8 <HAL_Init+0x40>)
 800308a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800308e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003090:	2003      	movs	r0, #3
 8003092:	f000 fd73 	bl	8003b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003096:	200f      	movs	r0, #15
 8003098:	f000 f808 	bl	80030ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800309c:	f7ff fcee 	bl	8002a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023c00 	.word	0x40023c00

080030ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030b4:	4b12      	ldr	r3, [pc, #72]	@ (8003100 <HAL_InitTick+0x54>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b12      	ldr	r3, [pc, #72]	@ (8003104 <HAL_InitTick+0x58>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	4619      	mov	r1, r3
 80030be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fd99 	bl	8003c02 <HAL_SYSTICK_Config>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e00e      	b.n	80030f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b0f      	cmp	r3, #15
 80030de:	d80a      	bhi.n	80030f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e0:	2200      	movs	r2, #0
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295
 80030e8:	f000 fd53 	bl	8003b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030ec:	4a06      	ldr	r2, [pc, #24]	@ (8003108 <HAL_InitTick+0x5c>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e000      	b.n	80030f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000110 	.word	0x20000110
 8003104:	20000118 	.word	0x20000118
 8003108:	20000114 	.word	0x20000114

0800310c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003110:	4b06      	ldr	r3, [pc, #24]	@ (800312c <HAL_IncTick+0x20>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_IncTick+0x24>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4413      	add	r3, r2
 800311c:	4a04      	ldr	r2, [pc, #16]	@ (8003130 <HAL_IncTick+0x24>)
 800311e:	6013      	str	r3, [r2, #0]
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000118 	.word	0x20000118
 8003130:	20000804 	.word	0x20000804

08003134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return uwTick;
 8003138:	4b03      	ldr	r3, [pc, #12]	@ (8003148 <HAL_GetTick+0x14>)
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000804 	.word	0x20000804

0800314c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003154:	f7ff ffee 	bl	8003134 <HAL_GetTick>
 8003158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d005      	beq.n	8003172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003166:	4b0a      	ldr	r3, [pc, #40]	@ (8003190 <HAL_Delay+0x44>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003172:	bf00      	nop
 8003174:	f7ff ffde 	bl	8003134 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	429a      	cmp	r2, r3
 8003182:	d8f7      	bhi.n	8003174 <HAL_Delay+0x28>
  {
  }
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000118 	.word	0x20000118

08003194 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e033      	b.n	8003212 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fc8a 	bl	8002acc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d118      	bne.n	8003204 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031da:	f023 0302 	bic.w	r3, r3, #2
 80031de:	f043 0202 	orr.w	r2, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fad8 	bl	800379c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	641a      	str	r2, [r3, #64]	@ 0x40
 8003202:	e001      	b.n	8003208 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003210:	7bfb      	ldrb	r3, [r7, #15]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_ADC_Start+0x1a>
 8003232:	2302      	movs	r3, #2
 8003234:	e0b2      	b.n	800339c <HAL_ADC_Start+0x180>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d018      	beq.n	800327e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800325c:	4b52      	ldr	r3, [pc, #328]	@ (80033a8 <HAL_ADC_Start+0x18c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a52      	ldr	r2, [pc, #328]	@ (80033ac <HAL_ADC_Start+0x190>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	0c9a      	lsrs	r2, r3, #18
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003270:	e002      	b.n	8003278 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	3b01      	subs	r3, #1
 8003276:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f9      	bne.n	8003272 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d17a      	bne.n	8003382 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ca:	d106      	bne.n	80032da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d0:	f023 0206 	bic.w	r2, r3, #6
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80032d8:	e002      	b.n	80032e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032e8:	4b31      	ldr	r3, [pc, #196]	@ (80033b0 <HAL_ADC_Start+0x194>)
 80032ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80032f4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d12a      	bne.n	8003358 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a2b      	ldr	r2, [pc, #172]	@ (80033b4 <HAL_ADC_Start+0x198>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d015      	beq.n	8003338 <HAL_ADC_Start+0x11c>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a29      	ldr	r2, [pc, #164]	@ (80033b8 <HAL_ADC_Start+0x19c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d105      	bne.n	8003322 <HAL_ADC_Start+0x106>
 8003316:	4b26      	ldr	r3, [pc, #152]	@ (80033b0 <HAL_ADC_Start+0x194>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a25      	ldr	r2, [pc, #148]	@ (80033bc <HAL_ADC_Start+0x1a0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d136      	bne.n	800339a <HAL_ADC_Start+0x17e>
 800332c:	4b20      	ldr	r3, [pc, #128]	@ (80033b0 <HAL_ADC_Start+0x194>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	d130      	bne.n	800339a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d129      	bne.n	800339a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003354:	609a      	str	r2, [r3, #8]
 8003356:	e020      	b.n	800339a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a15      	ldr	r2, [pc, #84]	@ (80033b4 <HAL_ADC_Start+0x198>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d11b      	bne.n	800339a <HAL_ADC_Start+0x17e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d114      	bne.n	800339a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	e00b      	b.n	800339a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003386:	f043 0210 	orr.w	r2, r3, #16
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	20000110 	.word	0x20000110
 80033ac:	431bde83 	.word	0x431bde83
 80033b0:	40012300 	.word	0x40012300
 80033b4:	40012000 	.word	0x40012000
 80033b8:	40012100 	.word	0x40012100
 80033bc:	40012200 	.word	0x40012200

080033c0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_Stop+0x16>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e021      	b.n	800341a <HAL_ADC_Stop+0x5a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003400:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	f043 0201 	orr.w	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003442:	d113      	bne.n	800346c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800344e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003452:	d10b      	bne.n	800346c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	f043 0220 	orr.w	r2, r3, #32
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e063      	b.n	8003534 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800346c:	f7ff fe62 	bl	8003134 <HAL_GetTick>
 8003470:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003472:	e021      	b.n	80034b8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d01d      	beq.n	80034b8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <HAL_ADC_PollForConversion+0x6c>
 8003482:	f7ff fe57 	bl	8003134 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d212      	bcs.n	80034b8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b02      	cmp	r3, #2
 800349e:	d00b      	beq.n	80034b8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a4:	f043 0204 	orr.w	r2, r3, #4
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e03d      	b.n	8003534 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d1d6      	bne.n	8003474 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f06f 0212 	mvn.w	r2, #18
 80034ce:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d123      	bne.n	8003532 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d11f      	bne.n	8003532 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800350a:	2b00      	cmp	r3, #0
 800350c:	d111      	bne.n	8003532 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d105      	bne.n	8003532 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	f043 0201 	orr.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x1c>
 8003570:	2302      	movs	r3, #2
 8003572:	e105      	b.n	8003780 <HAL_ADC_ConfigChannel+0x228>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b09      	cmp	r3, #9
 8003582:	d925      	bls.n	80035d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68d9      	ldr	r1, [r3, #12]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	4613      	mov	r3, r2
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4413      	add	r3, r2
 8003598:	3b1e      	subs	r3, #30
 800359a:	2207      	movs	r2, #7
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43da      	mvns	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	400a      	ands	r2, r1
 80035a8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68d9      	ldr	r1, [r3, #12]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	4618      	mov	r0, r3
 80035bc:	4603      	mov	r3, r0
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	4403      	add	r3, r0
 80035c2:	3b1e      	subs	r3, #30
 80035c4:	409a      	lsls	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	e022      	b.n	8003616 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6919      	ldr	r1, [r3, #16]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	4613      	mov	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	4413      	add	r3, r2
 80035e4:	2207      	movs	r2, #7
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43da      	mvns	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	400a      	ands	r2, r1
 80035f2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6919      	ldr	r1, [r3, #16]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	4618      	mov	r0, r3
 8003606:	4603      	mov	r3, r0
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4403      	add	r3, r0
 800360c:	409a      	lsls	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b06      	cmp	r3, #6
 800361c:	d824      	bhi.n	8003668 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	3b05      	subs	r3, #5
 8003630:	221f      	movs	r2, #31
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	400a      	ands	r2, r1
 800363e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	4618      	mov	r0, r3
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	3b05      	subs	r3, #5
 800365a:	fa00 f203 	lsl.w	r2, r0, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	635a      	str	r2, [r3, #52]	@ 0x34
 8003666:	e04c      	b.n	8003702 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b0c      	cmp	r3, #12
 800366e:	d824      	bhi.n	80036ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	3b23      	subs	r3, #35	@ 0x23
 8003682:	221f      	movs	r2, #31
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43da      	mvns	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	400a      	ands	r2, r1
 8003690:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	b29b      	uxth	r3, r3
 800369e:	4618      	mov	r0, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	3b23      	subs	r3, #35	@ 0x23
 80036ac:	fa00 f203 	lsl.w	r2, r0, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80036b8:	e023      	b.n	8003702 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	3b41      	subs	r3, #65	@ 0x41
 80036cc:	221f      	movs	r2, #31
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43da      	mvns	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	400a      	ands	r2, r1
 80036da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	4618      	mov	r0, r3
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	3b41      	subs	r3, #65	@ 0x41
 80036f6:	fa00 f203 	lsl.w	r2, r0, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003702:	4b22      	ldr	r3, [pc, #136]	@ (800378c <HAL_ADC_ConfigChannel+0x234>)
 8003704:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a21      	ldr	r2, [pc, #132]	@ (8003790 <HAL_ADC_ConfigChannel+0x238>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d109      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x1cc>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b12      	cmp	r3, #18
 8003716:	d105      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a19      	ldr	r2, [pc, #100]	@ (8003790 <HAL_ADC_ConfigChannel+0x238>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d123      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x21e>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b10      	cmp	r3, #16
 8003734:	d003      	beq.n	800373e <HAL_ADC_ConfigChannel+0x1e6>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b11      	cmp	r3, #17
 800373c:	d11b      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b10      	cmp	r3, #16
 8003750:	d111      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003752:	4b10      	ldr	r3, [pc, #64]	@ (8003794 <HAL_ADC_ConfigChannel+0x23c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a10      	ldr	r2, [pc, #64]	@ (8003798 <HAL_ADC_ConfigChannel+0x240>)
 8003758:	fba2 2303 	umull	r2, r3, r2, r3
 800375c:	0c9a      	lsrs	r2, r3, #18
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003768:	e002      	b.n	8003770 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	3b01      	subs	r3, #1
 800376e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f9      	bne.n	800376a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40012300 	.word	0x40012300
 8003790:	40012000 	.word	0x40012000
 8003794:	20000110 	.word	0x20000110
 8003798:	431bde83 	.word	0x431bde83

0800379c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037a4:	4b79      	ldr	r3, [pc, #484]	@ (800398c <ADC_Init+0x1f0>)
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	431a      	orrs	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	021a      	lsls	r2, r3, #8
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80037f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6859      	ldr	r1, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6899      	ldr	r1, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382e:	4a58      	ldr	r2, [pc, #352]	@ (8003990 <ADC_Init+0x1f4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d022      	beq.n	800387a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003842:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6899      	ldr	r1, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6899      	ldr	r1, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	e00f      	b.n	800389a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003888:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003898:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0202 	bic.w	r2, r2, #2
 80038a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6899      	ldr	r1, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	7e1b      	ldrb	r3, [r3, #24]
 80038b4:	005a      	lsls	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01b      	beq.n	8003900 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038d6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80038e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6859      	ldr	r1, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	3b01      	subs	r3, #1
 80038f4:	035a      	lsls	r2, r3, #13
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	e007      	b.n	8003910 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800390e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800391e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	3b01      	subs	r3, #1
 800392c:	051a      	lsls	r2, r3, #20
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003944:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6899      	ldr	r1, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003952:	025a      	lsls	r2, r3, #9
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800396a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6899      	ldr	r1, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	029a      	lsls	r2, r3, #10
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	609a      	str	r2, [r3, #8]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	40012300 	.word	0x40012300
 8003990:	0f000001 	.word	0x0f000001

08003994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a4:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <__NVIC_SetPriorityGrouping+0x44>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039b0:	4013      	ands	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039c6:	4a04      	ldr	r2, [pc, #16]	@ (80039d8 <__NVIC_SetPriorityGrouping+0x44>)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	60d3      	str	r3, [r2, #12]
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <__NVIC_GetPriorityGrouping+0x18>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f003 0307 	and.w	r3, r3, #7
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	db0b      	blt.n	8003a22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	f003 021f 	and.w	r2, r3, #31
 8003a10:	4907      	ldr	r1, [pc, #28]	@ (8003a30 <__NVIC_EnableIRQ+0x38>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	2001      	movs	r0, #1
 8003a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	e000e100 	.word	0xe000e100

08003a34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	db12      	blt.n	8003a6c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	f003 021f 	and.w	r2, r3, #31
 8003a4c:	490a      	ldr	r1, [pc, #40]	@ (8003a78 <__NVIC_DisableIRQ+0x44>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2001      	movs	r0, #1
 8003a56:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5a:	3320      	adds	r3, #32
 8003a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a60:	f3bf 8f4f 	dsb	sy
}
 8003a64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a66:	f3bf 8f6f 	isb	sy
}
 8003a6a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	e000e100 	.word	0xe000e100

08003a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	6039      	str	r1, [r7, #0]
 8003a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	db0a      	blt.n	8003aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	490c      	ldr	r1, [pc, #48]	@ (8003ac8 <__NVIC_SetPriority+0x4c>)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	0112      	lsls	r2, r2, #4
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aa4:	e00a      	b.n	8003abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4908      	ldr	r1, [pc, #32]	@ (8003acc <__NVIC_SetPriority+0x50>)
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	3b04      	subs	r3, #4
 8003ab4:	0112      	lsls	r2, r2, #4
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	440b      	add	r3, r1
 8003aba:	761a      	strb	r2, [r3, #24]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	e000e100 	.word	0xe000e100
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b089      	sub	sp, #36	@ 0x24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f1c3 0307 	rsb	r3, r3, #7
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	bf28      	it	cs
 8003aee:	2304      	movcs	r3, #4
 8003af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3304      	adds	r3, #4
 8003af6:	2b06      	cmp	r3, #6
 8003af8:	d902      	bls.n	8003b00 <NVIC_EncodePriority+0x30>
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3b03      	subs	r3, #3
 8003afe:	e000      	b.n	8003b02 <NVIC_EncodePriority+0x32>
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b04:	f04f 32ff 	mov.w	r2, #4294967295
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	401a      	ands	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b18:	f04f 31ff 	mov.w	r1, #4294967295
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	43d9      	mvns	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b28:	4313      	orrs	r3, r2
         );
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3724      	adds	r7, #36	@ 0x24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
	...

08003b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b48:	d301      	bcc.n	8003b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e00f      	b.n	8003b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <SysTick_Config+0x40>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b56:	210f      	movs	r1, #15
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	f7ff ff8e 	bl	8003a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <SysTick_Config+0x40>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b66:	4b04      	ldr	r3, [pc, #16]	@ (8003b78 <SysTick_Config+0x40>)
 8003b68:	2207      	movs	r2, #7
 8003b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	e000e010 	.word	0xe000e010

08003b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ff05 	bl	8003994 <__NVIC_SetPriorityGrouping>
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b086      	sub	sp, #24
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	4603      	mov	r3, r0
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ba4:	f7ff ff1a 	bl	80039dc <__NVIC_GetPriorityGrouping>
 8003ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	6978      	ldr	r0, [r7, #20]
 8003bb0:	f7ff ff8e 	bl	8003ad0 <NVIC_EncodePriority>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ff5d 	bl	8003a7c <__NVIC_SetPriority>
}
 8003bc2:	bf00      	nop
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff0d 	bl	80039f8 <__NVIC_EnableIRQ>
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	4603      	mov	r3, r0
 8003bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff1d 	bl	8003a34 <__NVIC_DisableIRQ>
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ff94 	bl	8003b38 <SysTick_Config>
 8003c10:	4603      	mov	r3, r0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c26:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c28:	f7ff fa84 	bl	8003134 <HAL_GetTick>
 8003c2c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d008      	beq.n	8003c4c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2280      	movs	r2, #128	@ 0x80
 8003c3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e052      	b.n	8003cf2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0216 	bic.w	r2, r2, #22
 8003c5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c6a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d103      	bne.n	8003c7c <HAL_DMA_Abort+0x62>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0208 	bic.w	r2, r2, #8
 8003c8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c9c:	e013      	b.n	8003cc6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c9e:	f7ff fa49 	bl	8003134 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b05      	cmp	r3, #5
 8003caa:	d90c      	bls.n	8003cc6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e015      	b.n	8003cf2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e4      	bne.n	8003c9e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd8:	223f      	movs	r2, #63	@ 0x3f
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d004      	beq.n	8003d18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2280      	movs	r2, #128	@ 0x80
 8003d12:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e00c      	b.n	8003d32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2205      	movs	r2, #5
 8003d1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b089      	sub	sp, #36	@ 0x24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	e16b      	b.n	8004034 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	f040 815a 	bne.w	800402e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d005      	beq.n	8003d92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d130      	bne.n	8003df4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dc8:	2201      	movs	r2, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 0201 	and.w	r2, r3, #1
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d017      	beq.n	8003e30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d123      	bne.n	8003e84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	08da      	lsrs	r2, r3, #3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3208      	adds	r2, #8
 8003e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	220f      	movs	r2, #15
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	08da      	lsrs	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3208      	adds	r2, #8
 8003e7e:	69b9      	ldr	r1, [r7, #24]
 8003e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	2203      	movs	r2, #3
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0203 	and.w	r2, r3, #3
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80b4 	beq.w	800402e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	4b60      	ldr	r3, [pc, #384]	@ (800404c <HAL_GPIO_Init+0x30c>)
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	4a5f      	ldr	r2, [pc, #380]	@ (800404c <HAL_GPIO_Init+0x30c>)
 8003ed0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ed6:	4b5d      	ldr	r3, [pc, #372]	@ (800404c <HAL_GPIO_Init+0x30c>)
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8004050 <HAL_GPIO_Init+0x310>)
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	3302      	adds	r3, #2
 8003eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	220f      	movs	r2, #15
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a52      	ldr	r2, [pc, #328]	@ (8004054 <HAL_GPIO_Init+0x314>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d02b      	beq.n	8003f66 <HAL_GPIO_Init+0x226>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a51      	ldr	r2, [pc, #324]	@ (8004058 <HAL_GPIO_Init+0x318>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d025      	beq.n	8003f62 <HAL_GPIO_Init+0x222>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a50      	ldr	r2, [pc, #320]	@ (800405c <HAL_GPIO_Init+0x31c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01f      	beq.n	8003f5e <HAL_GPIO_Init+0x21e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a4f      	ldr	r2, [pc, #316]	@ (8004060 <HAL_GPIO_Init+0x320>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d019      	beq.n	8003f5a <HAL_GPIO_Init+0x21a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a4e      	ldr	r2, [pc, #312]	@ (8004064 <HAL_GPIO_Init+0x324>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d013      	beq.n	8003f56 <HAL_GPIO_Init+0x216>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a4d      	ldr	r2, [pc, #308]	@ (8004068 <HAL_GPIO_Init+0x328>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00d      	beq.n	8003f52 <HAL_GPIO_Init+0x212>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a4c      	ldr	r2, [pc, #304]	@ (800406c <HAL_GPIO_Init+0x32c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d007      	beq.n	8003f4e <HAL_GPIO_Init+0x20e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a4b      	ldr	r2, [pc, #300]	@ (8004070 <HAL_GPIO_Init+0x330>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d101      	bne.n	8003f4a <HAL_GPIO_Init+0x20a>
 8003f46:	2307      	movs	r3, #7
 8003f48:	e00e      	b.n	8003f68 <HAL_GPIO_Init+0x228>
 8003f4a:	2308      	movs	r3, #8
 8003f4c:	e00c      	b.n	8003f68 <HAL_GPIO_Init+0x228>
 8003f4e:	2306      	movs	r3, #6
 8003f50:	e00a      	b.n	8003f68 <HAL_GPIO_Init+0x228>
 8003f52:	2305      	movs	r3, #5
 8003f54:	e008      	b.n	8003f68 <HAL_GPIO_Init+0x228>
 8003f56:	2304      	movs	r3, #4
 8003f58:	e006      	b.n	8003f68 <HAL_GPIO_Init+0x228>
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e004      	b.n	8003f68 <HAL_GPIO_Init+0x228>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e002      	b.n	8003f68 <HAL_GPIO_Init+0x228>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <HAL_GPIO_Init+0x228>
 8003f66:	2300      	movs	r3, #0
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	f002 0203 	and.w	r2, r2, #3
 8003f6e:	0092      	lsls	r2, r2, #2
 8003f70:	4093      	lsls	r3, r2
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f78:	4935      	ldr	r1, [pc, #212]	@ (8004050 <HAL_GPIO_Init+0x310>)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	3302      	adds	r3, #2
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f86:	4b3b      	ldr	r3, [pc, #236]	@ (8004074 <HAL_GPIO_Init+0x334>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4013      	ands	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003faa:	4a32      	ldr	r2, [pc, #200]	@ (8004074 <HAL_GPIO_Init+0x334>)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fb0:	4b30      	ldr	r3, [pc, #192]	@ (8004074 <HAL_GPIO_Init+0x334>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fd4:	4a27      	ldr	r2, [pc, #156]	@ (8004074 <HAL_GPIO_Init+0x334>)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fda:	4b26      	ldr	r3, [pc, #152]	@ (8004074 <HAL_GPIO_Init+0x334>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8004074 <HAL_GPIO_Init+0x334>)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004004:	4b1b      	ldr	r3, [pc, #108]	@ (8004074 <HAL_GPIO_Init+0x334>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	43db      	mvns	r3, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4013      	ands	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004028:	4a12      	ldr	r2, [pc, #72]	@ (8004074 <HAL_GPIO_Init+0x334>)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3301      	adds	r3, #1
 8004032:	61fb      	str	r3, [r7, #28]
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	2b0f      	cmp	r3, #15
 8004038:	f67f ae90 	bls.w	8003d5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	3724      	adds	r7, #36	@ 0x24
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800
 8004050:	40013800 	.word	0x40013800
 8004054:	40020000 	.word	0x40020000
 8004058:	40020400 	.word	0x40020400
 800405c:	40020800 	.word	0x40020800
 8004060:	40020c00 	.word	0x40020c00
 8004064:	40021000 	.word	0x40021000
 8004068:	40021400 	.word	0x40021400
 800406c:	40021800 	.word	0x40021800
 8004070:	40021c00 	.word	0x40021c00
 8004074:	40013c00 	.word	0x40013c00

08004078 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	e0cd      	b.n	8004230 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004094:	2201      	movs	r2, #1
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	4013      	ands	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	f040 80bd 	bne.w	800422a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80040b0:	4a65      	ldr	r2, [pc, #404]	@ (8004248 <HAL_GPIO_DeInit+0x1d0>)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	089b      	lsrs	r3, r3, #2
 80040b6:	3302      	adds	r3, #2
 80040b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040bc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	220f      	movs	r2, #15
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	4013      	ands	r3, r2
 80040d0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a5d      	ldr	r2, [pc, #372]	@ (800424c <HAL_GPIO_DeInit+0x1d4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d02b      	beq.n	8004132 <HAL_GPIO_DeInit+0xba>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a5c      	ldr	r2, [pc, #368]	@ (8004250 <HAL_GPIO_DeInit+0x1d8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d025      	beq.n	800412e <HAL_GPIO_DeInit+0xb6>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a5b      	ldr	r2, [pc, #364]	@ (8004254 <HAL_GPIO_DeInit+0x1dc>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01f      	beq.n	800412a <HAL_GPIO_DeInit+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a5a      	ldr	r2, [pc, #360]	@ (8004258 <HAL_GPIO_DeInit+0x1e0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d019      	beq.n	8004126 <HAL_GPIO_DeInit+0xae>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a59      	ldr	r2, [pc, #356]	@ (800425c <HAL_GPIO_DeInit+0x1e4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <HAL_GPIO_DeInit+0xaa>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a58      	ldr	r2, [pc, #352]	@ (8004260 <HAL_GPIO_DeInit+0x1e8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00d      	beq.n	800411e <HAL_GPIO_DeInit+0xa6>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a57      	ldr	r2, [pc, #348]	@ (8004264 <HAL_GPIO_DeInit+0x1ec>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d007      	beq.n	800411a <HAL_GPIO_DeInit+0xa2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a56      	ldr	r2, [pc, #344]	@ (8004268 <HAL_GPIO_DeInit+0x1f0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d101      	bne.n	8004116 <HAL_GPIO_DeInit+0x9e>
 8004112:	2307      	movs	r3, #7
 8004114:	e00e      	b.n	8004134 <HAL_GPIO_DeInit+0xbc>
 8004116:	2308      	movs	r3, #8
 8004118:	e00c      	b.n	8004134 <HAL_GPIO_DeInit+0xbc>
 800411a:	2306      	movs	r3, #6
 800411c:	e00a      	b.n	8004134 <HAL_GPIO_DeInit+0xbc>
 800411e:	2305      	movs	r3, #5
 8004120:	e008      	b.n	8004134 <HAL_GPIO_DeInit+0xbc>
 8004122:	2304      	movs	r3, #4
 8004124:	e006      	b.n	8004134 <HAL_GPIO_DeInit+0xbc>
 8004126:	2303      	movs	r3, #3
 8004128:	e004      	b.n	8004134 <HAL_GPIO_DeInit+0xbc>
 800412a:	2302      	movs	r3, #2
 800412c:	e002      	b.n	8004134 <HAL_GPIO_DeInit+0xbc>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <HAL_GPIO_DeInit+0xbc>
 8004132:	2300      	movs	r3, #0
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	f002 0203 	and.w	r2, r2, #3
 800413a:	0092      	lsls	r2, r2, #2
 800413c:	4093      	lsls	r3, r2
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	429a      	cmp	r2, r3
 8004142:	d132      	bne.n	80041aa <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004144:	4b49      	ldr	r3, [pc, #292]	@ (800426c <HAL_GPIO_DeInit+0x1f4>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	43db      	mvns	r3, r3
 800414c:	4947      	ldr	r1, [pc, #284]	@ (800426c <HAL_GPIO_DeInit+0x1f4>)
 800414e:	4013      	ands	r3, r2
 8004150:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004152:	4b46      	ldr	r3, [pc, #280]	@ (800426c <HAL_GPIO_DeInit+0x1f4>)
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	43db      	mvns	r3, r3
 800415a:	4944      	ldr	r1, [pc, #272]	@ (800426c <HAL_GPIO_DeInit+0x1f4>)
 800415c:	4013      	ands	r3, r2
 800415e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004160:	4b42      	ldr	r3, [pc, #264]	@ (800426c <HAL_GPIO_DeInit+0x1f4>)
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	43db      	mvns	r3, r3
 8004168:	4940      	ldr	r1, [pc, #256]	@ (800426c <HAL_GPIO_DeInit+0x1f4>)
 800416a:	4013      	ands	r3, r2
 800416c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800416e:	4b3f      	ldr	r3, [pc, #252]	@ (800426c <HAL_GPIO_DeInit+0x1f4>)
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	43db      	mvns	r3, r3
 8004176:	493d      	ldr	r1, [pc, #244]	@ (800426c <HAL_GPIO_DeInit+0x1f4>)
 8004178:	4013      	ands	r3, r2
 800417a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	220f      	movs	r2, #15
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800418c:	4a2e      	ldr	r2, [pc, #184]	@ (8004248 <HAL_GPIO_DeInit+0x1d0>)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	089b      	lsrs	r3, r3, #2
 8004192:	3302      	adds	r3, #2
 8004194:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	43da      	mvns	r2, r3
 800419c:	482a      	ldr	r0, [pc, #168]	@ (8004248 <HAL_GPIO_DeInit+0x1d0>)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	089b      	lsrs	r3, r3, #2
 80041a2:	400a      	ands	r2, r1
 80041a4:	3302      	adds	r3, #2
 80041a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	2103      	movs	r1, #3
 80041b4:	fa01 f303 	lsl.w	r3, r1, r3
 80041b8:	43db      	mvns	r3, r3
 80041ba:	401a      	ands	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	08da      	lsrs	r2, r3, #3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3208      	adds	r2, #8
 80041c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	220f      	movs	r2, #15
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43db      	mvns	r3, r3
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	08d2      	lsrs	r2, r2, #3
 80041e0:	4019      	ands	r1, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3208      	adds	r2, #8
 80041e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	2103      	movs	r1, #3
 80041f4:	fa01 f303 	lsl.w	r3, r1, r3
 80041f8:	43db      	mvns	r3, r3
 80041fa:	401a      	ands	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	2101      	movs	r1, #1
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	fa01 f303 	lsl.w	r3, r1, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	401a      	ands	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	2103      	movs	r1, #3
 800421e:	fa01 f303 	lsl.w	r3, r1, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	401a      	ands	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	3301      	adds	r3, #1
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b0f      	cmp	r3, #15
 8004234:	f67f af2e 	bls.w	8004094 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40013800 	.word	0x40013800
 800424c:	40020000 	.word	0x40020000
 8004250:	40020400 	.word	0x40020400
 8004254:	40020800 	.word	0x40020800
 8004258:	40020c00 	.word	0x40020c00
 800425c:	40021000 	.word	0x40021000
 8004260:	40021400 	.word	0x40021400
 8004264:	40021800 	.word	0x40021800
 8004268:	40021c00 	.word	0x40021c00
 800426c:	40013c00 	.word	0x40013c00

08004270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	460b      	mov	r3, r1
 800427a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	887b      	ldrh	r3, [r7, #2]
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
 800428c:	e001      	b.n	8004292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800428e:	2300      	movs	r3, #0
 8004290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004292:	7bfb      	ldrb	r3, [r7, #15]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	807b      	strh	r3, [r7, #2]
 80042ac:	4613      	mov	r3, r2
 80042ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042b0:	787b      	ldrb	r3, [r7, #1]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042b6:	887a      	ldrh	r2, [r7, #2]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042bc:	e003      	b.n	80042c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042be:	887b      	ldrh	r3, [r7, #2]
 80042c0:	041a      	lsls	r2, r3, #16
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	619a      	str	r2, [r3, #24]
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e12b      	b.n	800453e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fe fc2a 	bl	8002b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2224      	movs	r2, #36	@ 0x24
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0201 	bic.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004326:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004336:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004338:	f001 fc20 	bl	8005b7c <HAL_RCC_GetPCLK1Freq>
 800433c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4a81      	ldr	r2, [pc, #516]	@ (8004548 <HAL_I2C_Init+0x274>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d807      	bhi.n	8004358 <HAL_I2C_Init+0x84>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4a80      	ldr	r2, [pc, #512]	@ (800454c <HAL_I2C_Init+0x278>)
 800434c:	4293      	cmp	r3, r2
 800434e:	bf94      	ite	ls
 8004350:	2301      	movls	r3, #1
 8004352:	2300      	movhi	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e006      	b.n	8004366 <HAL_I2C_Init+0x92>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4a7d      	ldr	r2, [pc, #500]	@ (8004550 <HAL_I2C_Init+0x27c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	bf94      	ite	ls
 8004360:	2301      	movls	r3, #1
 8004362:	2300      	movhi	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e0e7      	b.n	800453e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4a78      	ldr	r2, [pc, #480]	@ (8004554 <HAL_I2C_Init+0x280>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	0c9b      	lsrs	r3, r3, #18
 8004378:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	4a6a      	ldr	r2, [pc, #424]	@ (8004548 <HAL_I2C_Init+0x274>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d802      	bhi.n	80043a8 <HAL_I2C_Init+0xd4>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	3301      	adds	r3, #1
 80043a6:	e009      	b.n	80043bc <HAL_I2C_Init+0xe8>
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80043ae:	fb02 f303 	mul.w	r3, r2, r3
 80043b2:	4a69      	ldr	r2, [pc, #420]	@ (8004558 <HAL_I2C_Init+0x284>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	099b      	lsrs	r3, r3, #6
 80043ba:	3301      	adds	r3, #1
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	430b      	orrs	r3, r1
 80043c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80043ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	495c      	ldr	r1, [pc, #368]	@ (8004548 <HAL_I2C_Init+0x274>)
 80043d8:	428b      	cmp	r3, r1
 80043da:	d819      	bhi.n	8004410 <HAL_I2C_Init+0x13c>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	1e59      	subs	r1, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ea:	1c59      	adds	r1, r3, #1
 80043ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043f0:	400b      	ands	r3, r1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_I2C_Init+0x138>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1e59      	subs	r1, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	fbb1 f3f3 	udiv	r3, r1, r3
 8004404:	3301      	adds	r3, #1
 8004406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800440a:	e051      	b.n	80044b0 <HAL_I2C_Init+0x1dc>
 800440c:	2304      	movs	r3, #4
 800440e:	e04f      	b.n	80044b0 <HAL_I2C_Init+0x1dc>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d111      	bne.n	800443c <HAL_I2C_Init+0x168>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1e58      	subs	r0, r3, #1
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6859      	ldr	r1, [r3, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	440b      	add	r3, r1
 8004426:	fbb0 f3f3 	udiv	r3, r0, r3
 800442a:	3301      	adds	r3, #1
 800442c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	e012      	b.n	8004462 <HAL_I2C_Init+0x18e>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	1e58      	subs	r0, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6859      	ldr	r1, [r3, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	0099      	lsls	r1, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004452:	3301      	adds	r3, #1
 8004454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_I2C_Init+0x196>
 8004466:	2301      	movs	r3, #1
 8004468:	e022      	b.n	80044b0 <HAL_I2C_Init+0x1dc>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10e      	bne.n	8004490 <HAL_I2C_Init+0x1bc>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	1e58      	subs	r0, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6859      	ldr	r1, [r3, #4]
 800447a:	460b      	mov	r3, r1
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	440b      	add	r3, r1
 8004480:	fbb0 f3f3 	udiv	r3, r0, r3
 8004484:	3301      	adds	r3, #1
 8004486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800448e:	e00f      	b.n	80044b0 <HAL_I2C_Init+0x1dc>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1e58      	subs	r0, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	0099      	lsls	r1, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a6:	3301      	adds	r3, #1
 80044a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	6809      	ldr	r1, [r1, #0]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69da      	ldr	r2, [r3, #28]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80044de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6911      	ldr	r1, [r2, #16]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68d2      	ldr	r2, [r2, #12]
 80044ea:	4311      	orrs	r1, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	000186a0 	.word	0x000186a0
 800454c:	001e847f 	.word	0x001e847f
 8004550:	003d08ff 	.word	0x003d08ff
 8004554:	431bde83 	.word	0x431bde83
 8004558:	10624dd3 	.word	0x10624dd3

0800455c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	4608      	mov	r0, r1
 8004566:	4611      	mov	r1, r2
 8004568:	461a      	mov	r2, r3
 800456a:	4603      	mov	r3, r0
 800456c:	817b      	strh	r3, [r7, #10]
 800456e:	460b      	mov	r3, r1
 8004570:	813b      	strh	r3, [r7, #8]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004576:	f7fe fddd 	bl	8003134 <HAL_GetTick>
 800457a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b20      	cmp	r3, #32
 8004586:	f040 80d9 	bne.w	800473c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	2319      	movs	r3, #25
 8004590:	2201      	movs	r2, #1
 8004592:	496d      	ldr	r1, [pc, #436]	@ (8004748 <HAL_I2C_Mem_Write+0x1ec>)
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 fc8b 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80045a0:	2302      	movs	r3, #2
 80045a2:	e0cc      	b.n	800473e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <HAL_I2C_Mem_Write+0x56>
 80045ae:	2302      	movs	r3, #2
 80045b0:	e0c5      	b.n	800473e <HAL_I2C_Mem_Write+0x1e2>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d007      	beq.n	80045d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2221      	movs	r2, #33	@ 0x21
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2240      	movs	r2, #64	@ 0x40
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a3a      	ldr	r2, [r7, #32]
 8004602:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004608:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a4d      	ldr	r2, [pc, #308]	@ (800474c <HAL_I2C_Mem_Write+0x1f0>)
 8004618:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800461a:	88f8      	ldrh	r0, [r7, #6]
 800461c:	893a      	ldrh	r2, [r7, #8]
 800461e:	8979      	ldrh	r1, [r7, #10]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	9301      	str	r3, [sp, #4]
 8004624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	4603      	mov	r3, r0
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 fac2 	bl	8004bb4 <I2C_RequestMemoryWrite>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d052      	beq.n	80046dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e081      	b.n	800473e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 fd50 	bl	80050e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00d      	beq.n	8004666 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	2b04      	cmp	r3, #4
 8004650:	d107      	bne.n	8004662 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004660:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e06b      	b.n	800473e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	781a      	ldrb	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d11b      	bne.n	80046dc <HAL_I2C_Mem_Write+0x180>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d017      	beq.n	80046dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1aa      	bne.n	800463a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fd43 	bl	8005174 <I2C_WaitOnBTFFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00d      	beq.n	8004710 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d107      	bne.n	800470c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800470a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e016      	b.n	800473e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800471e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	e000      	b.n	800473e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800473c:	2302      	movs	r3, #2
  }
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	00100002 	.word	0x00100002
 800474c:	ffff0000 	.word	0xffff0000

08004750 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08c      	sub	sp, #48	@ 0x30
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	4608      	mov	r0, r1
 800475a:	4611      	mov	r1, r2
 800475c:	461a      	mov	r2, r3
 800475e:	4603      	mov	r3, r0
 8004760:	817b      	strh	r3, [r7, #10]
 8004762:	460b      	mov	r3, r1
 8004764:	813b      	strh	r3, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800476a:	f7fe fce3 	bl	8003134 <HAL_GetTick>
 800476e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b20      	cmp	r3, #32
 800477a:	f040 8214 	bne.w	8004ba6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	2319      	movs	r3, #25
 8004784:	2201      	movs	r2, #1
 8004786:	497b      	ldr	r1, [pc, #492]	@ (8004974 <HAL_I2C_Mem_Read+0x224>)
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 fb91 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004794:	2302      	movs	r3, #2
 8004796:	e207      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_I2C_Mem_Read+0x56>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e200      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d007      	beq.n	80047cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2222      	movs	r2, #34	@ 0x22
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2240      	movs	r2, #64	@ 0x40
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80047fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4a5b      	ldr	r2, [pc, #364]	@ (8004978 <HAL_I2C_Mem_Read+0x228>)
 800480c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800480e:	88f8      	ldrh	r0, [r7, #6]
 8004810:	893a      	ldrh	r2, [r7, #8]
 8004812:	8979      	ldrh	r1, [r7, #10]
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	9301      	str	r3, [sp, #4]
 8004818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	4603      	mov	r3, r0
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fa5e 	bl	8004ce0 <I2C_RequestMemoryRead>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e1bc      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	d113      	bne.n	800485e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004836:	2300      	movs	r3, #0
 8004838:	623b      	str	r3, [r7, #32]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	623b      	str	r3, [r7, #32]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	623b      	str	r3, [r7, #32]
 800484a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e190      	b.n	8004b80 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004862:	2b01      	cmp	r3, #1
 8004864:	d11b      	bne.n	800489e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004874:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e170      	b.n	8004b80 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d11b      	bne.n	80048de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c6:	2300      	movs	r3, #0
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	e150      	b.n	8004b80 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048f4:	e144      	b.n	8004b80 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	f200 80f1 	bhi.w	8004ae2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004904:	2b01      	cmp	r3, #1
 8004906:	d123      	bne.n	8004950 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800490a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fc79 	bl	8005204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e145      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800494e:	e117      	b.n	8004b80 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004954:	2b02      	cmp	r3, #2
 8004956:	d14e      	bne.n	80049f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495e:	2200      	movs	r2, #0
 8004960:	4906      	ldr	r1, [pc, #24]	@ (800497c <HAL_I2C_Mem_Read+0x22c>)
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 faa4 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e11a      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
 8004972:	bf00      	nop
 8004974:	00100002 	.word	0x00100002
 8004978:	ffff0000 	.word	0xffff0000
 800497c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800498e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049f4:	e0c4      	b.n	8004b80 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fc:	2200      	movs	r2, #0
 80049fe:	496c      	ldr	r1, [pc, #432]	@ (8004bb0 <HAL_I2C_Mem_Read+0x460>)
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fa55 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0cb      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a58:	2200      	movs	r2, #0
 8004a5a:	4955      	ldr	r1, [pc, #340]	@ (8004bb0 <HAL_I2C_Mem_Read+0x460>)
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 fa27 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e09d      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ae0:	e04e      	b.n	8004b80 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 fb8c 	bl	8005204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e058      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d124      	bne.n	8004b80 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d107      	bne.n	8004b4e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b4c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f47f aeb6 	bne.w	80048f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e000      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004ba6:	2302      	movs	r3, #2
  }
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3728      	adds	r7, #40	@ 0x28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	00010004 	.word	0x00010004

08004bb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	817b      	strh	r3, [r7, #10]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	813b      	strh	r3, [r7, #8]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f960 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00d      	beq.n	8004c12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c04:	d103      	bne.n	8004c0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e05f      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c12:	897b      	ldrh	r3, [r7, #10]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	6a3a      	ldr	r2, [r7, #32]
 8004c26:	492d      	ldr	r1, [pc, #180]	@ (8004cdc <I2C_RequestMemoryWrite+0x128>)
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f9bb 	bl	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e04c      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c50:	6a39      	ldr	r1, [r7, #32]
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 fa46 	bl	80050e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00d      	beq.n	8004c7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d107      	bne.n	8004c76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e02b      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d105      	bne.n	8004c8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c80:	893b      	ldrh	r3, [r7, #8]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	611a      	str	r2, [r3, #16]
 8004c8a:	e021      	b.n	8004cd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c8c:	893b      	ldrh	r3, [r7, #8]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9c:	6a39      	ldr	r1, [r7, #32]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fa20 	bl	80050e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00d      	beq.n	8004cc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d107      	bne.n	8004cc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e005      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cc6:	893b      	ldrh	r3, [r7, #8]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	00010002 	.word	0x00010002

08004ce0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	4608      	mov	r0, r1
 8004cea:	4611      	mov	r1, r2
 8004cec:	461a      	mov	r2, r3
 8004cee:	4603      	mov	r3, r0
 8004cf0:	817b      	strh	r3, [r7, #10]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	813b      	strh	r3, [r7, #8]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 f8c2 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00d      	beq.n	8004d4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d40:	d103      	bne.n	8004d4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e0aa      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d4e:	897b      	ldrh	r3, [r7, #10]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d60:	6a3a      	ldr	r2, [r7, #32]
 8004d62:	4952      	ldr	r1, [pc, #328]	@ (8004eac <I2C_RequestMemoryRead+0x1cc>)
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f91d 	bl	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e097      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d8c:	6a39      	ldr	r1, [r7, #32]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f9a8 	bl	80050e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00d      	beq.n	8004db6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d107      	bne.n	8004db2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004db0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e076      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d105      	bne.n	8004dc8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dbc:	893b      	ldrh	r3, [r7, #8]
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	611a      	str	r2, [r3, #16]
 8004dc6:	e021      	b.n	8004e0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004dc8:	893b      	ldrh	r3, [r7, #8]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd8:	6a39      	ldr	r1, [r7, #32]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f982 	bl	80050e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00d      	beq.n	8004e02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d107      	bne.n	8004dfe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e050      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e02:	893b      	ldrh	r3, [r7, #8]
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e0e:	6a39      	ldr	r1, [r7, #32]
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f967 	bl	80050e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00d      	beq.n	8004e38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d107      	bne.n	8004e34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e035      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f82b 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00d      	beq.n	8004e7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e6e:	d103      	bne.n	8004e78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e013      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e7c:	897b      	ldrh	r3, [r7, #10]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8e:	6a3a      	ldr	r2, [r7, #32]
 8004e90:	4906      	ldr	r1, [pc, #24]	@ (8004eac <I2C_RequestMemoryRead+0x1cc>)
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f886 	bl	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	00010002 	.word	0x00010002

08004eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ec0:	e048      	b.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d044      	beq.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eca:	f7fe f933 	bl	8003134 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d302      	bcc.n	8004ee0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d139      	bne.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	0c1b      	lsrs	r3, r3, #16
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d10d      	bne.n	8004f06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	43da      	mvns	r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	e00c      	b.n	8004f20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	43da      	mvns	r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4013      	ands	r3, r2
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d116      	bne.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f40:	f043 0220 	orr.w	r2, r3, #32
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e023      	b.n	8004f9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d10d      	bne.n	8004f7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	43da      	mvns	r2, r3
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf0c      	ite	eq
 8004f70:	2301      	moveq	r3, #1
 8004f72:	2300      	movne	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	e00c      	b.n	8004f94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	43da      	mvns	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d093      	beq.n	8004ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fb2:	e071      	b.n	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc2:	d123      	bne.n	800500c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff8:	f043 0204 	orr.w	r2, r3, #4
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e067      	b.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d041      	beq.n	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005014:	f7fe f88e 	bl	8003134 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d302      	bcc.n	800502a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d136      	bne.n	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	d10c      	bne.n	800504e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	43da      	mvns	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4013      	ands	r3, r2
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	bf14      	ite	ne
 8005046:	2301      	movne	r3, #1
 8005048:	2300      	moveq	r3, #0
 800504a:	b2db      	uxtb	r3, r3
 800504c:	e00b      	b.n	8005066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	43da      	mvns	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4013      	ands	r3, r2
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	bf14      	ite	ne
 8005060:	2301      	movne	r3, #1
 8005062:	2300      	moveq	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d016      	beq.n	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e021      	b.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	0c1b      	lsrs	r3, r3, #16
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d10c      	bne.n	80050bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	43da      	mvns	r2, r3
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bf14      	ite	ne
 80050b4:	2301      	movne	r3, #1
 80050b6:	2300      	moveq	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	e00b      	b.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	43da      	mvns	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4013      	ands	r3, r2
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bf14      	ite	ne
 80050ce:	2301      	movne	r3, #1
 80050d0:	2300      	moveq	r3, #0
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f47f af6d 	bne.w	8004fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050f0:	e034      	b.n	800515c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f8e3 	bl	80052be <I2C_IsAcknowledgeFailed>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e034      	b.n	800516c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005108:	d028      	beq.n	800515c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510a:	f7fe f813 	bl	8003134 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	429a      	cmp	r2, r3
 8005118:	d302      	bcc.n	8005120 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d11d      	bne.n	800515c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512a:	2b80      	cmp	r3, #128	@ 0x80
 800512c:	d016      	beq.n	800515c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005148:	f043 0220 	orr.w	r2, r3, #32
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e007      	b.n	800516c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005166:	2b80      	cmp	r3, #128	@ 0x80
 8005168:	d1c3      	bne.n	80050f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005180:	e034      	b.n	80051ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f89b 	bl	80052be <I2C_IsAcknowledgeFailed>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e034      	b.n	80051fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d028      	beq.n	80051ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519a:	f7fd ffcb 	bl	8003134 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d302      	bcc.n	80051b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d11d      	bne.n	80051ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d016      	beq.n	80051ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e007      	b.n	80051fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d1c3      	bne.n	8005182 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005210:	e049      	b.n	80052a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	2b10      	cmp	r3, #16
 800521e:	d119      	bne.n	8005254 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0210 	mvn.w	r2, #16
 8005228:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e030      	b.n	80052b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005254:	f7fd ff6e 	bl	8003134 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	429a      	cmp	r2, r3
 8005262:	d302      	bcc.n	800526a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d11d      	bne.n	80052a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005274:	2b40      	cmp	r3, #64	@ 0x40
 8005276:	d016      	beq.n	80052a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005292:	f043 0220 	orr.w	r2, r3, #32
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e007      	b.n	80052b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b0:	2b40      	cmp	r3, #64	@ 0x40
 80052b2:	d1ae      	bne.n	8005212 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d4:	d11b      	bne.n	800530e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fa:	f043 0204 	orr.w	r2, r3, #4
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e267      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d075      	beq.n	8005426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800533a:	4b88      	ldr	r3, [pc, #544]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
 8005342:	2b04      	cmp	r3, #4
 8005344:	d00c      	beq.n	8005360 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005346:	4b85      	ldr	r3, [pc, #532]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800534e:	2b08      	cmp	r3, #8
 8005350:	d112      	bne.n	8005378 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005352:	4b82      	ldr	r3, [pc, #520]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800535a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800535e:	d10b      	bne.n	8005378 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005360:	4b7e      	ldr	r3, [pc, #504]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d05b      	beq.n	8005424 <HAL_RCC_OscConfig+0x108>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d157      	bne.n	8005424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e242      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005380:	d106      	bne.n	8005390 <HAL_RCC_OscConfig+0x74>
 8005382:	4b76      	ldr	r3, [pc, #472]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a75      	ldr	r2, [pc, #468]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 8005388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	e01d      	b.n	80053cc <HAL_RCC_OscConfig+0xb0>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005398:	d10c      	bne.n	80053b4 <HAL_RCC_OscConfig+0x98>
 800539a:	4b70      	ldr	r3, [pc, #448]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a6f      	ldr	r2, [pc, #444]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 80053a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	4b6d      	ldr	r3, [pc, #436]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a6c      	ldr	r2, [pc, #432]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 80053ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	e00b      	b.n	80053cc <HAL_RCC_OscConfig+0xb0>
 80053b4:	4b69      	ldr	r3, [pc, #420]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a68      	ldr	r2, [pc, #416]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 80053ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	4b66      	ldr	r3, [pc, #408]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a65      	ldr	r2, [pc, #404]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 80053c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d013      	beq.n	80053fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7fd feae 	bl	8003134 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053dc:	f7fd feaa 	bl	8003134 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	@ 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e207      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ee:	4b5b      	ldr	r3, [pc, #364]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0xc0>
 80053fa:	e014      	b.n	8005426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fc:	f7fd fe9a 	bl	8003134 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005404:	f7fd fe96 	bl	8003134 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	@ 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e1f3      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005416:	4b51      	ldr	r3, [pc, #324]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0xe8>
 8005422:	e000      	b.n	8005426 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d063      	beq.n	80054fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005432:	4b4a      	ldr	r3, [pc, #296]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 030c 	and.w	r3, r3, #12
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00b      	beq.n	8005456 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800543e:	4b47      	ldr	r3, [pc, #284]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005446:	2b08      	cmp	r3, #8
 8005448:	d11c      	bne.n	8005484 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800544a:	4b44      	ldr	r3, [pc, #272]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d116      	bne.n	8005484 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005456:	4b41      	ldr	r3, [pc, #260]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <HAL_RCC_OscConfig+0x152>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d001      	beq.n	800546e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e1c7      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800546e:	4b3b      	ldr	r3, [pc, #236]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	4937      	ldr	r1, [pc, #220]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 800547e:	4313      	orrs	r3, r2
 8005480:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005482:	e03a      	b.n	80054fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d020      	beq.n	80054ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800548c:	4b34      	ldr	r3, [pc, #208]	@ (8005560 <HAL_RCC_OscConfig+0x244>)
 800548e:	2201      	movs	r2, #1
 8005490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005492:	f7fd fe4f 	bl	8003134 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800549a:	f7fd fe4b 	bl	8003134 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e1a8      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ac:	4b2b      	ldr	r3, [pc, #172]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f0      	beq.n	800549a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b8:	4b28      	ldr	r3, [pc, #160]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4925      	ldr	r1, [pc, #148]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	600b      	str	r3, [r1, #0]
 80054cc:	e015      	b.n	80054fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ce:	4b24      	ldr	r3, [pc, #144]	@ (8005560 <HAL_RCC_OscConfig+0x244>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d4:	f7fd fe2e 	bl	8003134 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054dc:	f7fd fe2a 	bl	8003134 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e187      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ee:	4b1b      	ldr	r3, [pc, #108]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f0      	bne.n	80054dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d036      	beq.n	8005574 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d016      	beq.n	800553c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800550e:	4b15      	ldr	r3, [pc, #84]	@ (8005564 <HAL_RCC_OscConfig+0x248>)
 8005510:	2201      	movs	r2, #1
 8005512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005514:	f7fd fe0e 	bl	8003134 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800551c:	f7fd fe0a 	bl	8003134 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e167      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800552e:	4b0b      	ldr	r3, [pc, #44]	@ (800555c <HAL_RCC_OscConfig+0x240>)
 8005530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f0      	beq.n	800551c <HAL_RCC_OscConfig+0x200>
 800553a:	e01b      	b.n	8005574 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800553c:	4b09      	ldr	r3, [pc, #36]	@ (8005564 <HAL_RCC_OscConfig+0x248>)
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005542:	f7fd fdf7 	bl	8003134 <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005548:	e00e      	b.n	8005568 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800554a:	f7fd fdf3 	bl	8003134 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d907      	bls.n	8005568 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e150      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
 800555c:	40023800 	.word	0x40023800
 8005560:	42470000 	.word	0x42470000
 8005564:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005568:	4b88      	ldr	r3, [pc, #544]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 800556a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1ea      	bne.n	800554a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8097 	beq.w	80056b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005582:	2300      	movs	r3, #0
 8005584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005586:	4b81      	ldr	r3, [pc, #516]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10f      	bne.n	80055b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005592:	2300      	movs	r3, #0
 8005594:	60bb      	str	r3, [r7, #8]
 8005596:	4b7d      	ldr	r3, [pc, #500]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559a:	4a7c      	ldr	r2, [pc, #496]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 800559c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80055a2:	4b7a      	ldr	r3, [pc, #488]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 80055a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055aa:	60bb      	str	r3, [r7, #8]
 80055ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ae:	2301      	movs	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b2:	4b77      	ldr	r3, [pc, #476]	@ (8005790 <HAL_RCC_OscConfig+0x474>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d118      	bne.n	80055f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055be:	4b74      	ldr	r3, [pc, #464]	@ (8005790 <HAL_RCC_OscConfig+0x474>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a73      	ldr	r2, [pc, #460]	@ (8005790 <HAL_RCC_OscConfig+0x474>)
 80055c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ca:	f7fd fdb3 	bl	8003134 <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d0:	e008      	b.n	80055e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d2:	f7fd fdaf 	bl	8003134 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d901      	bls.n	80055e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e10c      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e4:	4b6a      	ldr	r3, [pc, #424]	@ (8005790 <HAL_RCC_OscConfig+0x474>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0f0      	beq.n	80055d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d106      	bne.n	8005606 <HAL_RCC_OscConfig+0x2ea>
 80055f8:	4b64      	ldr	r3, [pc, #400]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 80055fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055fc:	4a63      	ldr	r2, [pc, #396]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 80055fe:	f043 0301 	orr.w	r3, r3, #1
 8005602:	6713      	str	r3, [r2, #112]	@ 0x70
 8005604:	e01c      	b.n	8005640 <HAL_RCC_OscConfig+0x324>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	2b05      	cmp	r3, #5
 800560c:	d10c      	bne.n	8005628 <HAL_RCC_OscConfig+0x30c>
 800560e:	4b5f      	ldr	r3, [pc, #380]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005612:	4a5e      	ldr	r2, [pc, #376]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 8005614:	f043 0304 	orr.w	r3, r3, #4
 8005618:	6713      	str	r3, [r2, #112]	@ 0x70
 800561a:	4b5c      	ldr	r3, [pc, #368]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800561e:	4a5b      	ldr	r2, [pc, #364]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 8005620:	f043 0301 	orr.w	r3, r3, #1
 8005624:	6713      	str	r3, [r2, #112]	@ 0x70
 8005626:	e00b      	b.n	8005640 <HAL_RCC_OscConfig+0x324>
 8005628:	4b58      	ldr	r3, [pc, #352]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 800562a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562c:	4a57      	ldr	r2, [pc, #348]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 800562e:	f023 0301 	bic.w	r3, r3, #1
 8005632:	6713      	str	r3, [r2, #112]	@ 0x70
 8005634:	4b55      	ldr	r3, [pc, #340]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 8005636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005638:	4a54      	ldr	r2, [pc, #336]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 800563a:	f023 0304 	bic.w	r3, r3, #4
 800563e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d015      	beq.n	8005674 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005648:	f7fd fd74 	bl	8003134 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800564e:	e00a      	b.n	8005666 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005650:	f7fd fd70 	bl	8003134 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e0cb      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005666:	4b49      	ldr	r3, [pc, #292]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 8005668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0ee      	beq.n	8005650 <HAL_RCC_OscConfig+0x334>
 8005672:	e014      	b.n	800569e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005674:	f7fd fd5e 	bl	8003134 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800567a:	e00a      	b.n	8005692 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567c:	f7fd fd5a 	bl	8003134 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e0b5      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005692:	4b3e      	ldr	r3, [pc, #248]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 8005694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1ee      	bne.n	800567c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800569e:	7dfb      	ldrb	r3, [r7, #23]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d105      	bne.n	80056b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a4:	4b39      	ldr	r3, [pc, #228]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 80056a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a8:	4a38      	ldr	r2, [pc, #224]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 80056aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 80a1 	beq.w	80057fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056ba:	4b34      	ldr	r3, [pc, #208]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 030c 	and.w	r3, r3, #12
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d05c      	beq.n	8005780 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d141      	bne.n	8005752 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ce:	4b31      	ldr	r3, [pc, #196]	@ (8005794 <HAL_RCC_OscConfig+0x478>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d4:	f7fd fd2e 	bl	8003134 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056dc:	f7fd fd2a 	bl	8003134 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e087      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ee:	4b27      	ldr	r3, [pc, #156]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69da      	ldr	r2, [r3, #28]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005708:	019b      	lsls	r3, r3, #6
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	3b01      	subs	r3, #1
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571c:	061b      	lsls	r3, r3, #24
 800571e:	491b      	ldr	r1, [pc, #108]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 8005720:	4313      	orrs	r3, r2
 8005722:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005724:	4b1b      	ldr	r3, [pc, #108]	@ (8005794 <HAL_RCC_OscConfig+0x478>)
 8005726:	2201      	movs	r2, #1
 8005728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572a:	f7fd fd03 	bl	8003134 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005732:	f7fd fcff 	bl	8003134 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e05c      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005744:	4b11      	ldr	r3, [pc, #68]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <HAL_RCC_OscConfig+0x416>
 8005750:	e054      	b.n	80057fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005752:	4b10      	ldr	r3, [pc, #64]	@ (8005794 <HAL_RCC_OscConfig+0x478>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005758:	f7fd fcec 	bl	8003134 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005760:	f7fd fce8 	bl	8003134 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e045      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005772:	4b06      	ldr	r3, [pc, #24]	@ (800578c <HAL_RCC_OscConfig+0x470>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f0      	bne.n	8005760 <HAL_RCC_OscConfig+0x444>
 800577e:	e03d      	b.n	80057fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d107      	bne.n	8005798 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e038      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
 800578c:	40023800 	.word	0x40023800
 8005790:	40007000 	.word	0x40007000
 8005794:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005798:	4b1b      	ldr	r3, [pc, #108]	@ (8005808 <HAL_RCC_OscConfig+0x4ec>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d028      	beq.n	80057f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d121      	bne.n	80057f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057be:	429a      	cmp	r2, r3
 80057c0:	d11a      	bne.n	80057f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80057c8:	4013      	ands	r3, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d111      	bne.n	80057f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057de:	085b      	lsrs	r3, r3, #1
 80057e0:	3b01      	subs	r3, #1
 80057e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d107      	bne.n	80057f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d001      	beq.n	80057fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e000      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40023800 	.word	0x40023800

0800580c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0cc      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005820:	4b68      	ldr	r3, [pc, #416]	@ (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d90c      	bls.n	8005848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582e:	4b65      	ldr	r3, [pc, #404]	@ (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005836:	4b63      	ldr	r3, [pc, #396]	@ (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d001      	beq.n	8005848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0b8      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d020      	beq.n	8005896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005860:	4b59      	ldr	r3, [pc, #356]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	4a58      	ldr	r2, [pc, #352]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800586a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005878:	4b53      	ldr	r3, [pc, #332]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	4a52      	ldr	r2, [pc, #328]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005884:	4b50      	ldr	r3, [pc, #320]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	494d      	ldr	r1, [pc, #308]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	4313      	orrs	r3, r2
 8005894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d044      	beq.n	800592c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d107      	bne.n	80058ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058aa:	4b47      	ldr	r3, [pc, #284]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d119      	bne.n	80058ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e07f      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d003      	beq.n	80058ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d107      	bne.n	80058da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ca:	4b3f      	ldr	r3, [pc, #252]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e06f      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058da:	4b3b      	ldr	r3, [pc, #236]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e067      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ea:	4b37      	ldr	r3, [pc, #220]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f023 0203 	bic.w	r2, r3, #3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4934      	ldr	r1, [pc, #208]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058fc:	f7fd fc1a 	bl	8003134 <HAL_GetTick>
 8005900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005902:	e00a      	b.n	800591a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005904:	f7fd fc16 	bl	8003134 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e04f      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591a:	4b2b      	ldr	r3, [pc, #172]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 020c 	and.w	r2, r3, #12
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	429a      	cmp	r2, r3
 800592a:	d1eb      	bne.n	8005904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800592c:	4b25      	ldr	r3, [pc, #148]	@ (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d20c      	bcs.n	8005954 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593a:	4b22      	ldr	r3, [pc, #136]	@ (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005942:	4b20      	ldr	r3, [pc, #128]	@ (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d001      	beq.n	8005954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e032      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005960:	4b19      	ldr	r3, [pc, #100]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4916      	ldr	r1, [pc, #88]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800596e:	4313      	orrs	r3, r2
 8005970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800597e:	4b12      	ldr	r3, [pc, #72]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	490e      	ldr	r1, [pc, #56]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	4313      	orrs	r3, r2
 8005990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005992:	f000 f821 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8005996:	4602      	mov	r2, r0
 8005998:	4b0b      	ldr	r3, [pc, #44]	@ (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	091b      	lsrs	r3, r3, #4
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	490a      	ldr	r1, [pc, #40]	@ (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 80059a4:	5ccb      	ldrb	r3, [r1, r3]
 80059a6:	fa22 f303 	lsr.w	r3, r2, r3
 80059aa:	4a09      	ldr	r2, [pc, #36]	@ (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 80059ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80059ae:	4b09      	ldr	r3, [pc, #36]	@ (80059d4 <HAL_RCC_ClockConfig+0x1c8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fd fb7a 	bl	80030ac <HAL_InitTick>

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	40023c00 	.word	0x40023c00
 80059c8:	40023800 	.word	0x40023800
 80059cc:	08009000 	.word	0x08009000
 80059d0:	20000110 	.word	0x20000110
 80059d4:	20000114 	.word	0x20000114

080059d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059dc:	b090      	sub	sp, #64	@ 0x40
 80059de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059f0:	4b59      	ldr	r3, [pc, #356]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x180>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 030c 	and.w	r3, r3, #12
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d00d      	beq.n	8005a18 <HAL_RCC_GetSysClockFreq+0x40>
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	f200 80a1 	bhi.w	8005b44 <HAL_RCC_GetSysClockFreq+0x16c>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <HAL_RCC_GetSysClockFreq+0x34>
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d003      	beq.n	8005a12 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a0a:	e09b      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a0c:	4b53      	ldr	r3, [pc, #332]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x184>)
 8005a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a10:	e09b      	b.n	8005b4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a12:	4b53      	ldr	r3, [pc, #332]	@ (8005b60 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a16:	e098      	b.n	8005b4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a18:	4b4f      	ldr	r3, [pc, #316]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a22:	4b4d      	ldr	r3, [pc, #308]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d028      	beq.n	8005a80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	099b      	lsrs	r3, r3, #6
 8005a34:	2200      	movs	r2, #0
 8005a36:	623b      	str	r3, [r7, #32]
 8005a38:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a40:	2100      	movs	r1, #0
 8005a42:	4b47      	ldr	r3, [pc, #284]	@ (8005b60 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a44:	fb03 f201 	mul.w	r2, r3, r1
 8005a48:	2300      	movs	r3, #0
 8005a4a:	fb00 f303 	mul.w	r3, r0, r3
 8005a4e:	4413      	add	r3, r2
 8005a50:	4a43      	ldr	r2, [pc, #268]	@ (8005b60 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a52:	fba0 1202 	umull	r1, r2, r0, r2
 8005a56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a58:	460a      	mov	r2, r1
 8005a5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005a5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a5e:	4413      	add	r3, r2
 8005a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a64:	2200      	movs	r2, #0
 8005a66:	61bb      	str	r3, [r7, #24]
 8005a68:	61fa      	str	r2, [r7, #28]
 8005a6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005a72:	f7fa fc05 	bl	8000280 <__aeabi_uldivmod>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a7e:	e053      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a80:	4b35      	ldr	r3, [pc, #212]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	099b      	lsrs	r3, r3, #6
 8005a86:	2200      	movs	r2, #0
 8005a88:	613b      	str	r3, [r7, #16]
 8005a8a:	617a      	str	r2, [r7, #20]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a92:	f04f 0b00 	mov.w	fp, #0
 8005a96:	4652      	mov	r2, sl
 8005a98:	465b      	mov	r3, fp
 8005a9a:	f04f 0000 	mov.w	r0, #0
 8005a9e:	f04f 0100 	mov.w	r1, #0
 8005aa2:	0159      	lsls	r1, r3, #5
 8005aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aa8:	0150      	lsls	r0, r2, #5
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	ebb2 080a 	subs.w	r8, r2, sl
 8005ab2:	eb63 090b 	sbc.w	r9, r3, fp
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	f04f 0300 	mov.w	r3, #0
 8005abe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005ac2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005ac6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005aca:	ebb2 0408 	subs.w	r4, r2, r8
 8005ace:	eb63 0509 	sbc.w	r5, r3, r9
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	00eb      	lsls	r3, r5, #3
 8005adc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ae0:	00e2      	lsls	r2, r4, #3
 8005ae2:	4614      	mov	r4, r2
 8005ae4:	461d      	mov	r5, r3
 8005ae6:	eb14 030a 	adds.w	r3, r4, sl
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	eb45 030b 	adc.w	r3, r5, fp
 8005af0:	607b      	str	r3, [r7, #4]
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005afe:	4629      	mov	r1, r5
 8005b00:	028b      	lsls	r3, r1, #10
 8005b02:	4621      	mov	r1, r4
 8005b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b08:	4621      	mov	r1, r4
 8005b0a:	028a      	lsls	r2, r1, #10
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4619      	mov	r1, r3
 8005b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b12:	2200      	movs	r2, #0
 8005b14:	60bb      	str	r3, [r7, #8]
 8005b16:	60fa      	str	r2, [r7, #12]
 8005b18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b1c:	f7fa fbb0 	bl	8000280 <__aeabi_uldivmod>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4613      	mov	r3, r2
 8005b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005b28:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	0c1b      	lsrs	r3, r3, #16
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	3301      	adds	r3, #1
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005b38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b42:	e002      	b.n	8005b4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b44:	4b05      	ldr	r3, [pc, #20]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x184>)
 8005b46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3740      	adds	r7, #64	@ 0x40
 8005b50:	46bd      	mov	sp, r7
 8005b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b56:	bf00      	nop
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	00f42400 	.word	0x00f42400
 8005b60:	017d7840 	.word	0x017d7840

08005b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b68:	4b03      	ldr	r3, [pc, #12]	@ (8005b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	20000110 	.word	0x20000110

08005b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b80:	f7ff fff0 	bl	8005b64 <HAL_RCC_GetHCLKFreq>
 8005b84:	4602      	mov	r2, r0
 8005b86:	4b05      	ldr	r3, [pc, #20]	@ (8005b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	0a9b      	lsrs	r3, r3, #10
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	4903      	ldr	r1, [pc, #12]	@ (8005ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b92:	5ccb      	ldrb	r3, [r1, r3]
 8005b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40023800 	.word	0x40023800
 8005ba0:	08009010 	.word	0x08009010

08005ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ba8:	f7ff ffdc 	bl	8005b64 <HAL_RCC_GetHCLKFreq>
 8005bac:	4602      	mov	r2, r0
 8005bae:	4b05      	ldr	r3, [pc, #20]	@ (8005bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	0b5b      	lsrs	r3, r3, #13
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	4903      	ldr	r1, [pc, #12]	@ (8005bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bba:	5ccb      	ldrb	r3, [r1, r3]
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	08009010 	.word	0x08009010

08005bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e041      	b.n	8005c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fd f82c 	bl	8002c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f000 fb90 	bl	8006330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d001      	beq.n	8005c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e04e      	b.n	8005d22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a23      	ldr	r2, [pc, #140]	@ (8005d30 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d022      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x80>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cae:	d01d      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x80>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8005d34 <HAL_TIM_Base_Start_IT+0xc8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d018      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x80>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8005d38 <HAL_TIM_Base_Start_IT+0xcc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d013      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x80>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d3c <HAL_TIM_Base_Start_IT+0xd0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00e      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x80>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d40 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d009      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x80>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a19      	ldr	r2, [pc, #100]	@ (8005d44 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d004      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x80>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a18      	ldr	r2, [pc, #96]	@ (8005d48 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d111      	bne.n	8005d10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b06      	cmp	r3, #6
 8005cfc:	d010      	beq.n	8005d20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0201 	orr.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0e:	e007      	b.n	8005d20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40000c00 	.word	0x40000c00
 8005d40:	40010400 	.word	0x40010400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40001800 	.word	0x40001800

08005d4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e041      	b.n	8005de2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7fc ff36 	bl	8002be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f000 fad0 	bl	8006330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d109      	bne.n	8005e10 <HAL_TIM_PWM_Start+0x24>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	bf14      	ite	ne
 8005e08:	2301      	movne	r3, #1
 8005e0a:	2300      	moveq	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	e022      	b.n	8005e56 <HAL_TIM_PWM_Start+0x6a>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d109      	bne.n	8005e2a <HAL_TIM_PWM_Start+0x3e>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	bf14      	ite	ne
 8005e22:	2301      	movne	r3, #1
 8005e24:	2300      	moveq	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	e015      	b.n	8005e56 <HAL_TIM_PWM_Start+0x6a>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d109      	bne.n	8005e44 <HAL_TIM_PWM_Start+0x58>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	bf14      	ite	ne
 8005e3c:	2301      	movne	r3, #1
 8005e3e:	2300      	moveq	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	e008      	b.n	8005e56 <HAL_TIM_PWM_Start+0x6a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	bf14      	ite	ne
 8005e50:	2301      	movne	r3, #1
 8005e52:	2300      	moveq	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e07c      	b.n	8005f58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d104      	bne.n	8005e6e <HAL_TIM_PWM_Start+0x82>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e6c:	e013      	b.n	8005e96 <HAL_TIM_PWM_Start+0xaa>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d104      	bne.n	8005e7e <HAL_TIM_PWM_Start+0x92>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e7c:	e00b      	b.n	8005e96 <HAL_TIM_PWM_Start+0xaa>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d104      	bne.n	8005e8e <HAL_TIM_PWM_Start+0xa2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e8c:	e003      	b.n	8005e96 <HAL_TIM_PWM_Start+0xaa>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fca2 	bl	80067e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8005f60 <HAL_TIM_PWM_Start+0x174>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d004      	beq.n	8005eb8 <HAL_TIM_PWM_Start+0xcc>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8005f64 <HAL_TIM_PWM_Start+0x178>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d101      	bne.n	8005ebc <HAL_TIM_PWM_Start+0xd0>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <HAL_TIM_PWM_Start+0xd2>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d007      	beq.n	8005ed2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ed0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a22      	ldr	r2, [pc, #136]	@ (8005f60 <HAL_TIM_PWM_Start+0x174>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d022      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x136>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee4:	d01d      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x136>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a1f      	ldr	r2, [pc, #124]	@ (8005f68 <HAL_TIM_PWM_Start+0x17c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d018      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x136>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f6c <HAL_TIM_PWM_Start+0x180>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d013      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x136>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1c      	ldr	r2, [pc, #112]	@ (8005f70 <HAL_TIM_PWM_Start+0x184>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00e      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x136>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a16      	ldr	r2, [pc, #88]	@ (8005f64 <HAL_TIM_PWM_Start+0x178>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d009      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x136>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a18      	ldr	r2, [pc, #96]	@ (8005f74 <HAL_TIM_PWM_Start+0x188>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d004      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x136>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a16      	ldr	r2, [pc, #88]	@ (8005f78 <HAL_TIM_PWM_Start+0x18c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d111      	bne.n	8005f46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b06      	cmp	r3, #6
 8005f32:	d010      	beq.n	8005f56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f44:	e007      	b.n	8005f56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f042 0201 	orr.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40010000 	.word	0x40010000
 8005f64:	40010400 	.word	0x40010400
 8005f68:	40000400 	.word	0x40000400
 8005f6c:	40000800 	.word	0x40000800
 8005f70:	40000c00 	.word	0x40000c00
 8005f74:	40014000 	.word	0x40014000
 8005f78:	40001800 	.word	0x40001800

08005f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d020      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01b      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0202 	mvn.w	r2, #2
 8005fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f994 	bl	80062f4 <HAL_TIM_IC_CaptureCallback>
 8005fcc:	e005      	b.n	8005fda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f986 	bl	80062e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f997 	bl	8006308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d020      	beq.n	800602c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01b      	beq.n	800602c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0204 	mvn.w	r2, #4
 8005ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2202      	movs	r2, #2
 8006002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f96e 	bl	80062f4 <HAL_TIM_IC_CaptureCallback>
 8006018:	e005      	b.n	8006026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f960 	bl	80062e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f971 	bl	8006308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b00      	cmp	r3, #0
 8006034:	d020      	beq.n	8006078 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	2b00      	cmp	r3, #0
 800603e:	d01b      	beq.n	8006078 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f06f 0208 	mvn.w	r2, #8
 8006048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2204      	movs	r2, #4
 800604e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f948 	bl	80062f4 <HAL_TIM_IC_CaptureCallback>
 8006064:	e005      	b.n	8006072 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f93a 	bl	80062e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f94b 	bl	8006308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f003 0310 	and.w	r3, r3, #16
 800607e:	2b00      	cmp	r3, #0
 8006080:	d020      	beq.n	80060c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	2b00      	cmp	r3, #0
 800608a:	d01b      	beq.n	80060c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0210 	mvn.w	r2, #16
 8006094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2208      	movs	r2, #8
 800609a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f922 	bl	80062f4 <HAL_TIM_IC_CaptureCallback>
 80060b0:	e005      	b.n	80060be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f914 	bl	80062e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f925 	bl	8006308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00c      	beq.n	80060e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d007      	beq.n	80060e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f06f 0201 	mvn.w	r2, #1
 80060e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fa fbc2 	bl	800086c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00c      	beq.n	800610c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d007      	beq.n	800610c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fc1a 	bl	8006940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00c      	beq.n	8006130 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611c:	2b00      	cmp	r3, #0
 800611e:	d007      	beq.n	8006130 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f8f6 	bl	800631c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00c      	beq.n	8006154 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f003 0320 	and.w	r3, r3, #32
 8006140:	2b00      	cmp	r3, #0
 8006142:	d007      	beq.n	8006154 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f06f 0220 	mvn.w	r2, #32
 800614c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fbec 	bl	800692c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006154:	bf00      	nop
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006176:	2302      	movs	r3, #2
 8006178:	e0ae      	b.n	80062d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b0c      	cmp	r3, #12
 8006186:	f200 809f 	bhi.w	80062c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800618a:	a201      	add	r2, pc, #4	@ (adr r2, 8006190 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	080061c5 	.word	0x080061c5
 8006194:	080062c9 	.word	0x080062c9
 8006198:	080062c9 	.word	0x080062c9
 800619c:	080062c9 	.word	0x080062c9
 80061a0:	08006205 	.word	0x08006205
 80061a4:	080062c9 	.word	0x080062c9
 80061a8:	080062c9 	.word	0x080062c9
 80061ac:	080062c9 	.word	0x080062c9
 80061b0:	08006247 	.word	0x08006247
 80061b4:	080062c9 	.word	0x080062c9
 80061b8:	080062c9 	.word	0x080062c9
 80061bc:	080062c9 	.word	0x080062c9
 80061c0:	08006287 	.word	0x08006287
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 f95c 	bl	8006488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0208 	orr.w	r2, r2, #8
 80061de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0204 	bic.w	r2, r2, #4
 80061ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6999      	ldr	r1, [r3, #24]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	619a      	str	r2, [r3, #24]
      break;
 8006202:	e064      	b.n	80062ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	4618      	mov	r0, r3
 800620c:	f000 f9ac 	bl	8006568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800621e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800622e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6999      	ldr	r1, [r3, #24]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	021a      	lsls	r2, r3, #8
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	619a      	str	r2, [r3, #24]
      break;
 8006244:	e043      	b.n	80062ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68b9      	ldr	r1, [r7, #8]
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fa01 	bl	8006654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0208 	orr.w	r2, r2, #8
 8006260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0204 	bic.w	r2, r2, #4
 8006270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69d9      	ldr	r1, [r3, #28]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	691a      	ldr	r2, [r3, #16]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	61da      	str	r2, [r3, #28]
      break;
 8006284:	e023      	b.n	80062ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fa55 	bl	800673c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69da      	ldr	r2, [r3, #28]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69da      	ldr	r2, [r3, #28]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69d9      	ldr	r1, [r3, #28]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	021a      	lsls	r2, r3, #8
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	61da      	str	r2, [r3, #28]
      break;
 80062c6:	e002      	b.n	80062ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	75fb      	strb	r3, [r7, #23]
      break;
 80062cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a46      	ldr	r2, [pc, #280]	@ (800645c <TIM_Base_SetConfig+0x12c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d013      	beq.n	8006370 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800634e:	d00f      	beq.n	8006370 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a43      	ldr	r2, [pc, #268]	@ (8006460 <TIM_Base_SetConfig+0x130>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00b      	beq.n	8006370 <TIM_Base_SetConfig+0x40>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a42      	ldr	r2, [pc, #264]	@ (8006464 <TIM_Base_SetConfig+0x134>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d007      	beq.n	8006370 <TIM_Base_SetConfig+0x40>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a41      	ldr	r2, [pc, #260]	@ (8006468 <TIM_Base_SetConfig+0x138>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <TIM_Base_SetConfig+0x40>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a40      	ldr	r2, [pc, #256]	@ (800646c <TIM_Base_SetConfig+0x13c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d108      	bne.n	8006382 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a35      	ldr	r2, [pc, #212]	@ (800645c <TIM_Base_SetConfig+0x12c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d02b      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006390:	d027      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a32      	ldr	r2, [pc, #200]	@ (8006460 <TIM_Base_SetConfig+0x130>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d023      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a31      	ldr	r2, [pc, #196]	@ (8006464 <TIM_Base_SetConfig+0x134>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d01f      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a30      	ldr	r2, [pc, #192]	@ (8006468 <TIM_Base_SetConfig+0x138>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d01b      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a2f      	ldr	r2, [pc, #188]	@ (800646c <TIM_Base_SetConfig+0x13c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d017      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a2e      	ldr	r2, [pc, #184]	@ (8006470 <TIM_Base_SetConfig+0x140>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d013      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006474 <TIM_Base_SetConfig+0x144>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00f      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006478 <TIM_Base_SetConfig+0x148>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00b      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a2b      	ldr	r2, [pc, #172]	@ (800647c <TIM_Base_SetConfig+0x14c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d007      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006480 <TIM_Base_SetConfig+0x150>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d003      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a29      	ldr	r2, [pc, #164]	@ (8006484 <TIM_Base_SetConfig+0x154>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d108      	bne.n	80063f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a10      	ldr	r2, [pc, #64]	@ (800645c <TIM_Base_SetConfig+0x12c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d003      	beq.n	8006428 <TIM_Base_SetConfig+0xf8>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a12      	ldr	r2, [pc, #72]	@ (800646c <TIM_Base_SetConfig+0x13c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d103      	bne.n	8006430 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	691a      	ldr	r2, [r3, #16]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b01      	cmp	r3, #1
 8006440:	d105      	bne.n	800644e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f023 0201 	bic.w	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	611a      	str	r2, [r3, #16]
  }
}
 800644e:	bf00      	nop
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	40010000 	.word	0x40010000
 8006460:	40000400 	.word	0x40000400
 8006464:	40000800 	.word	0x40000800
 8006468:	40000c00 	.word	0x40000c00
 800646c:	40010400 	.word	0x40010400
 8006470:	40014000 	.word	0x40014000
 8006474:	40014400 	.word	0x40014400
 8006478:	40014800 	.word	0x40014800
 800647c:	40001800 	.word	0x40001800
 8006480:	40001c00 	.word	0x40001c00
 8006484:	40002000 	.word	0x40002000

08006488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	f023 0201 	bic.w	r2, r3, #1
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0303 	bic.w	r3, r3, #3
 80064be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f023 0302 	bic.w	r3, r3, #2
 80064d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4313      	orrs	r3, r2
 80064da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a20      	ldr	r2, [pc, #128]	@ (8006560 <TIM_OC1_SetConfig+0xd8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d003      	beq.n	80064ec <TIM_OC1_SetConfig+0x64>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a1f      	ldr	r2, [pc, #124]	@ (8006564 <TIM_OC1_SetConfig+0xdc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d10c      	bne.n	8006506 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f023 0308 	bic.w	r3, r3, #8
 80064f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f023 0304 	bic.w	r3, r3, #4
 8006504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a15      	ldr	r2, [pc, #84]	@ (8006560 <TIM_OC1_SetConfig+0xd8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d003      	beq.n	8006516 <TIM_OC1_SetConfig+0x8e>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a14      	ldr	r2, [pc, #80]	@ (8006564 <TIM_OC1_SetConfig+0xdc>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d111      	bne.n	800653a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800651c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	621a      	str	r2, [r3, #32]
}
 8006554:	bf00      	nop
 8006556:	371c      	adds	r7, #28
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	40010000 	.word	0x40010000
 8006564:	40010400 	.word	0x40010400

08006568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	f023 0210 	bic.w	r2, r3, #16
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800659e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	021b      	lsls	r3, r3, #8
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0320 	bic.w	r3, r3, #32
 80065b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a22      	ldr	r2, [pc, #136]	@ (800664c <TIM_OC2_SetConfig+0xe4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d003      	beq.n	80065d0 <TIM_OC2_SetConfig+0x68>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a21      	ldr	r2, [pc, #132]	@ (8006650 <TIM_OC2_SetConfig+0xe8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d10d      	bne.n	80065ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a17      	ldr	r2, [pc, #92]	@ (800664c <TIM_OC2_SetConfig+0xe4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_OC2_SetConfig+0x94>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a16      	ldr	r2, [pc, #88]	@ (8006650 <TIM_OC2_SetConfig+0xe8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d113      	bne.n	8006624 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800660a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	4313      	orrs	r3, r2
 8006622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	621a      	str	r2, [r3, #32]
}
 800663e:	bf00      	nop
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	40010000 	.word	0x40010000
 8006650:	40010400 	.word	0x40010400

08006654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f023 0303 	bic.w	r3, r3, #3
 800668a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800669c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a21      	ldr	r2, [pc, #132]	@ (8006734 <TIM_OC3_SetConfig+0xe0>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d003      	beq.n	80066ba <TIM_OC3_SetConfig+0x66>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a20      	ldr	r2, [pc, #128]	@ (8006738 <TIM_OC3_SetConfig+0xe4>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d10d      	bne.n	80066d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	021b      	lsls	r3, r3, #8
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a16      	ldr	r2, [pc, #88]	@ (8006734 <TIM_OC3_SetConfig+0xe0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d003      	beq.n	80066e6 <TIM_OC3_SetConfig+0x92>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a15      	ldr	r2, [pc, #84]	@ (8006738 <TIM_OC3_SetConfig+0xe4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d113      	bne.n	800670e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	621a      	str	r2, [r3, #32]
}
 8006728:	bf00      	nop
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	40010000 	.word	0x40010000
 8006738:	40010400 	.word	0x40010400

0800673c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800676a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	021b      	lsls	r3, r3, #8
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4313      	orrs	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	031b      	lsls	r3, r3, #12
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a12      	ldr	r2, [pc, #72]	@ (80067e0 <TIM_OC4_SetConfig+0xa4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d003      	beq.n	80067a4 <TIM_OC4_SetConfig+0x68>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a11      	ldr	r2, [pc, #68]	@ (80067e4 <TIM_OC4_SetConfig+0xa8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d109      	bne.n	80067b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	019b      	lsls	r3, r3, #6
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	621a      	str	r2, [r3, #32]
}
 80067d2:	bf00      	nop
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	40010000 	.word	0x40010000
 80067e4:	40010400 	.word	0x40010400

080067e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	2201      	movs	r2, #1
 80067fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006800:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a1a      	ldr	r2, [r3, #32]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	43db      	mvns	r3, r3
 800680a:	401a      	ands	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a1a      	ldr	r2, [r3, #32]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f003 031f 	and.w	r3, r3, #31
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	fa01 f303 	lsl.w	r3, r1, r3
 8006820:	431a      	orrs	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	621a      	str	r2, [r3, #32]
}
 8006826:	bf00      	nop
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
	...

08006834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006844:	2b01      	cmp	r3, #1
 8006846:	d101      	bne.n	800684c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006848:	2302      	movs	r3, #2
 800684a:	e05a      	b.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a21      	ldr	r2, [pc, #132]	@ (8006910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d022      	beq.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006898:	d01d      	beq.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a1d      	ldr	r2, [pc, #116]	@ (8006914 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d018      	beq.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006918 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1a      	ldr	r2, [pc, #104]	@ (800691c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00e      	beq.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a18      	ldr	r2, [pc, #96]	@ (8006920 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d009      	beq.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a17      	ldr	r2, [pc, #92]	@ (8006924 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d004      	beq.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a15      	ldr	r2, [pc, #84]	@ (8006928 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d10c      	bne.n	80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	40010000 	.word	0x40010000
 8006914:	40000400 	.word	0x40000400
 8006918:	40000800 	.word	0x40000800
 800691c:	40000c00 	.word	0x40000c00
 8006920:	40010400 	.word	0x40010400
 8006924:	40014000 	.word	0x40014000
 8006928:	40001800 	.word	0x40001800

0800692c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e042      	b.n	80069ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fc f9ee 	bl	8002d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2224      	movs	r2, #36	@ 0x24
 8006984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fedb 	bl	8007754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	695a      	ldr	r2, [r3, #20]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e024      	b.n	8006a50 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2224      	movs	r2, #36	@ 0x24
 8006a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a1c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fc fa2a 	bl	8002e78 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	@ 0x28
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	4613      	mov	r3, r2
 8006a66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	d175      	bne.n	8006b64 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <HAL_UART_Transmit+0x2c>
 8006a7e:	88fb      	ldrh	r3, [r7, #6]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e06e      	b.n	8006b66 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2221      	movs	r2, #33	@ 0x21
 8006a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a96:	f7fc fb4d 	bl	8003134 <HAL_GetTick>
 8006a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	88fa      	ldrh	r2, [r7, #6]
 8006aa0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	88fa      	ldrh	r2, [r7, #6]
 8006aa6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ab0:	d108      	bne.n	8006ac4 <HAL_UART_Transmit+0x6c>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d104      	bne.n	8006ac4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	61bb      	str	r3, [r7, #24]
 8006ac2:	e003      	b.n	8006acc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006acc:	e02e      	b.n	8006b2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2180      	movs	r1, #128	@ 0x80
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fc0b 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d005      	beq.n	8006af0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e03a      	b.n	8006b66 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10b      	bne.n	8006b0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	3302      	adds	r3, #2
 8006b0a:	61bb      	str	r3, [r7, #24]
 8006b0c:	e007      	b.n	8006b1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	781a      	ldrb	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1cb      	bne.n	8006ace <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2140      	movs	r1, #64	@ 0x40
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 fbd7 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e006      	b.n	8006b66 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	e000      	b.n	8006b66 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006b64:	2302      	movs	r3, #2
  }
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3720      	adds	r7, #32
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b08a      	sub	sp, #40	@ 0x28
 8006b72:	af02      	add	r7, sp, #8
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	603b      	str	r3, [r7, #0]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	f040 8081 	bne.w	8006c92 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <HAL_UART_Receive+0x2e>
 8006b96:	88fb      	ldrh	r3, [r7, #6]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e079      	b.n	8006c94 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2222      	movs	r2, #34	@ 0x22
 8006baa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bb4:	f7fc fabe 	bl	8003134 <HAL_GetTick>
 8006bb8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	88fa      	ldrh	r2, [r7, #6]
 8006bbe:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	88fa      	ldrh	r2, [r7, #6]
 8006bc4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bce:	d108      	bne.n	8006be2 <HAL_UART_Receive+0x74>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d104      	bne.n	8006be2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	61bb      	str	r3, [r7, #24]
 8006be0:	e003      	b.n	8006bea <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006bea:	e047      	b.n	8006c7c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2120      	movs	r1, #32
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 fb7c 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e042      	b.n	8006c94 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10c      	bne.n	8006c2e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	3302      	adds	r3, #2
 8006c2a:	61bb      	str	r3, [r7, #24]
 8006c2c:	e01f      	b.n	8006c6e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c36:	d007      	beq.n	8006c48 <HAL_UART_Receive+0xda>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10a      	bne.n	8006c56 <HAL_UART_Receive+0xe8>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d106      	bne.n	8006c56 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	701a      	strb	r2, [r3, #0]
 8006c54:	e008      	b.n	8006c68 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1b2      	bne.n	8006bec <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	e000      	b.n	8006c94 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006c92:	2302      	movs	r3, #2
  }
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3720      	adds	r7, #32
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08c      	sub	sp, #48	@ 0x30
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b20      	cmp	r3, #32
 8006cb4:	d14a      	bne.n	8006d4c <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e043      	b.n	8006d4e <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006cd2:	88fb      	ldrh	r3, [r7, #6]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	68b9      	ldr	r1, [r7, #8]
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 fb64 	bl	80073a6 <UART_Start_Receive_IT>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d12c      	bne.n	8006d46 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d125      	bne.n	8006d40 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	613b      	str	r3, [r7, #16]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	330c      	adds	r3, #12
 8006d10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	617b      	str	r3, [r7, #20]
   return(result);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f043 0310 	orr.w	r3, r3, #16
 8006d20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6a39      	ldr	r1, [r7, #32]
 8006d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e5      	bne.n	8006d0a <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8006d3e:	e002      	b.n	8006d46 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006d46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d4a:	e000      	b.n	8006d4e <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006d4c:	2302      	movs	r3, #2
  }
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3730      	adds	r7, #48	@ 0x30
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b0ba      	sub	sp, #232	@ 0xe8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10f      	bne.n	8006dbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d009      	beq.n	8006dbe <HAL_UART_IRQHandler+0x66>
 8006daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dae:	f003 0320 	and.w	r3, r3, #32
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fc0e 	bl	80075d8 <UART_Receive_IT>
      return;
 8006dbc:	e25b      	b.n	8007276 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 80de 	beq.w	8006f84 <HAL_UART_IRQHandler+0x22c>
 8006dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d106      	bne.n	8006de2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dd8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 80d1 	beq.w	8006f84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00b      	beq.n	8006e06 <HAL_UART_IRQHandler+0xae>
 8006dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfe:	f043 0201 	orr.w	r2, r3, #1
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e0a:	f003 0304 	and.w	r3, r3, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00b      	beq.n	8006e2a <HAL_UART_IRQHandler+0xd2>
 8006e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e22:	f043 0202 	orr.w	r2, r3, #2
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00b      	beq.n	8006e4e <HAL_UART_IRQHandler+0xf6>
 8006e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d005      	beq.n	8006e4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e46:	f043 0204 	orr.w	r2, r3, #4
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d011      	beq.n	8006e7e <HAL_UART_IRQHandler+0x126>
 8006e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d105      	bne.n	8006e72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d005      	beq.n	8006e7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e76:	f043 0208 	orr.w	r2, r3, #8
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 81f2 	beq.w	800726c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d008      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x14e>
 8006e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fb99 	bl	80075d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb0:	2b40      	cmp	r3, #64	@ 0x40
 8006eb2:	bf0c      	ite	eq
 8006eb4:	2301      	moveq	r3, #1
 8006eb6:	2300      	movne	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d103      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x17a>
 8006eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d04f      	beq.n	8006f72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 faa1 	bl	800741a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee2:	2b40      	cmp	r3, #64	@ 0x40
 8006ee4:	d141      	bne.n	8006f6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3314      	adds	r3, #20
 8006eec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3314      	adds	r3, #20
 8006f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006f12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006f16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1d9      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d013      	beq.n	8006f62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8007138 <HAL_UART_IRQHandler+0x3e0>)
 8006f40:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fc fed7 	bl	8003cfa <HAL_DMA_Abort_IT>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d016      	beq.n	8006f80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f60:	e00e      	b.n	8006f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f99e 	bl	80072a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f68:	e00a      	b.n	8006f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f99a 	bl	80072a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f70:	e006      	b.n	8006f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f996 	bl	80072a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006f7e:	e175      	b.n	800726c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f80:	bf00      	nop
    return;
 8006f82:	e173      	b.n	800726c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	f040 814f 	bne.w	800722c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 8148 	beq.w	800722c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8141 	beq.w	800722c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006faa:	2300      	movs	r3, #0
 8006fac:	60bb      	str	r3, [r7, #8]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	60bb      	str	r3, [r7, #8]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	60bb      	str	r3, [r7, #8]
 8006fbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fca:	2b40      	cmp	r3, #64	@ 0x40
 8006fcc:	f040 80b6 	bne.w	800713c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 8145 	beq.w	8007270 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	f080 813e 	bcs.w	8007270 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ffa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007006:	f000 8088 	beq.w	800711a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	330c      	adds	r3, #12
 8007010:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007020:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007028:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	330c      	adds	r3, #12
 8007032:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007036:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800703a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007042:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800704e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1d9      	bne.n	800700a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3314      	adds	r3, #20
 800705c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007066:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3314      	adds	r3, #20
 8007076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800707a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800707e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007082:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800708c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e1      	bne.n	8007056 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3314      	adds	r3, #20
 8007098:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80070a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3314      	adds	r3, #20
 80070b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80070b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80070b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80070bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80070c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e3      	bne.n	8007092 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	330c      	adds	r3, #12
 80070de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070e2:	e853 3f00 	ldrex	r3, [r3]
 80070e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80070e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070ea:	f023 0310 	bic.w	r3, r3, #16
 80070ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	330c      	adds	r3, #12
 80070f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80070fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80070fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007102:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800710a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e3      	bne.n	80070d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007114:	4618      	mov	r0, r3
 8007116:	f7fc fd80 	bl	8003c1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2202      	movs	r2, #2
 800711e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007128:	b29b      	uxth	r3, r3
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	b29b      	uxth	r3, r3
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7f9 fb3f 	bl	80007b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007136:	e09b      	b.n	8007270 <HAL_UART_IRQHandler+0x518>
 8007138:	080074e1 	.word	0x080074e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007144:	b29b      	uxth	r3, r3
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007150:	b29b      	uxth	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 808e 	beq.w	8007274 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8089 	beq.w	8007274 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	330c      	adds	r3, #12
 8007168:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007178:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	330c      	adds	r3, #12
 8007182:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007186:	647a      	str	r2, [r7, #68]	@ 0x44
 8007188:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800718c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e3      	bne.n	8007162 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3314      	adds	r3, #20
 80071a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	623b      	str	r3, [r7, #32]
   return(result);
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	f023 0301 	bic.w	r3, r3, #1
 80071b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	3314      	adds	r3, #20
 80071ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80071be:	633a      	str	r2, [r7, #48]	@ 0x30
 80071c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e3      	bne.n	800719a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	330c      	adds	r3, #12
 80071e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f023 0310 	bic.w	r3, r3, #16
 80071f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	330c      	adds	r3, #12
 8007200:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007204:	61fa      	str	r2, [r7, #28]
 8007206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007208:	69b9      	ldr	r1, [r7, #24]
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	e841 2300 	strex	r3, r2, [r1]
 8007210:	617b      	str	r3, [r7, #20]
   return(result);
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1e3      	bne.n	80071e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800721e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7f9 fac5 	bl	80007b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800722a:	e023      	b.n	8007274 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800722c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007234:	2b00      	cmp	r3, #0
 8007236:	d009      	beq.n	800724c <HAL_UART_IRQHandler+0x4f4>
 8007238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800723c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f95f 	bl	8007508 <UART_Transmit_IT>
    return;
 800724a:	e014      	b.n	8007276 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800724c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00e      	beq.n	8007276 <HAL_UART_IRQHandler+0x51e>
 8007258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800725c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007260:	2b00      	cmp	r3, #0
 8007262:	d008      	beq.n	8007276 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f99f 	bl	80075a8 <UART_EndTransmit_IT>
    return;
 800726a:	e004      	b.n	8007276 <HAL_UART_IRQHandler+0x51e>
    return;
 800726c:	bf00      	nop
 800726e:	e002      	b.n	8007276 <HAL_UART_IRQHandler+0x51e>
      return;
 8007270:	bf00      	nop
 8007272:	e000      	b.n	8007276 <HAL_UART_IRQHandler+0x51e>
      return;
 8007274:	bf00      	nop
  }
}
 8007276:	37e8      	adds	r7, #232	@ 0xe8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	2300      	movs	r3, #0
 80072c6:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	4313      	orrs	r3, r2
 80072e6:	b2db      	uxtb	r3, r3
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	4613      	mov	r3, r2
 8007302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007304:	e03b      	b.n	800737e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730c:	d037      	beq.n	800737e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730e:	f7fb ff11 	bl	8003134 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	6a3a      	ldr	r2, [r7, #32]
 800731a:	429a      	cmp	r2, r3
 800731c:	d302      	bcc.n	8007324 <UART_WaitOnFlagUntilTimeout+0x30>
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e03a      	b.n	800739e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d023      	beq.n	800737e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b80      	cmp	r3, #128	@ 0x80
 800733a:	d020      	beq.n	800737e <UART_WaitOnFlagUntilTimeout+0x8a>
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b40      	cmp	r3, #64	@ 0x40
 8007340:	d01d      	beq.n	800737e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0308 	and.w	r3, r3, #8
 800734c:	2b08      	cmp	r3, #8
 800734e:	d116      	bne.n	800737e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007350:	2300      	movs	r3, #0
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 f857 	bl	800741a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2208      	movs	r2, #8
 8007370:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e00f      	b.n	800739e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4013      	ands	r3, r2
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	429a      	cmp	r2, r3
 800738c:	bf0c      	ite	eq
 800738e:	2301      	moveq	r3, #1
 8007390:	2300      	movne	r3, #0
 8007392:	b2db      	uxtb	r3, r3
 8007394:	461a      	mov	r2, r3
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	429a      	cmp	r2, r3
 800739a:	d0b4      	beq.n	8007306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b085      	sub	sp, #20
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	60f8      	str	r0, [r7, #12]
 80073ae:	60b9      	str	r1, [r7, #8]
 80073b0:	4613      	mov	r3, r2
 80073b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	88fa      	ldrh	r2, [r7, #6]
 80073be:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	88fa      	ldrh	r2, [r7, #6]
 80073c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2222      	movs	r2, #34	@ 0x22
 80073d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d007      	beq.n	80073ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695a      	ldr	r2, [r3, #20]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0201 	orr.w	r2, r2, #1
 80073fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0220 	orr.w	r2, r2, #32
 800740a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800741a:	b480      	push	{r7}
 800741c:	b095      	sub	sp, #84	@ 0x54
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	330c      	adds	r3, #12
 8007428:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800742c:	e853 3f00 	ldrex	r3, [r3]
 8007430:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007438:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	330c      	adds	r3, #12
 8007440:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007442:	643a      	str	r2, [r7, #64]	@ 0x40
 8007444:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007448:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800744a:	e841 2300 	strex	r3, r2, [r1]
 800744e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e5      	bne.n	8007422 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3314      	adds	r3, #20
 800745c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	61fb      	str	r3, [r7, #28]
   return(result);
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	f023 0301 	bic.w	r3, r3, #1
 800746c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3314      	adds	r3, #20
 8007474:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007476:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007478:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800747c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e5      	bne.n	8007456 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748e:	2b01      	cmp	r3, #1
 8007490:	d119      	bne.n	80074c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	330c      	adds	r3, #12
 8007498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	e853 3f00 	ldrex	r3, [r3]
 80074a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f023 0310 	bic.w	r3, r3, #16
 80074a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	330c      	adds	r3, #12
 80074b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074b2:	61ba      	str	r2, [r7, #24]
 80074b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	6979      	ldr	r1, [r7, #20]
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	e841 2300 	strex	r3, r2, [r1]
 80074be:	613b      	str	r3, [r7, #16]
   return(result);
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1e5      	bne.n	8007492 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80074d4:	bf00      	nop
 80074d6:	3754      	adds	r7, #84	@ 0x54
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f7ff fed2 	bl	80072a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007500:	bf00      	nop
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b21      	cmp	r3, #33	@ 0x21
 800751a:	d13e      	bne.n	800759a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007524:	d114      	bne.n	8007550 <UART_Transmit_IT+0x48>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d110      	bne.n	8007550 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	461a      	mov	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007542:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	1c9a      	adds	r2, r3, #2
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	621a      	str	r2, [r3, #32]
 800754e:	e008      	b.n	8007562 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	1c59      	adds	r1, r3, #1
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6211      	str	r1, [r2, #32]
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007566:	b29b      	uxth	r3, r3
 8007568:	3b01      	subs	r3, #1
 800756a:	b29b      	uxth	r3, r3
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	4619      	mov	r1, r3
 8007570:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10f      	bne.n	8007596 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007584:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007594:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	e000      	b.n	800759c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800759a:	2302      	movs	r3, #2
  }
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff fe57 	bl	800727c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08c      	sub	sp, #48	@ 0x30
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b22      	cmp	r3, #34	@ 0x22
 80075ea:	f040 80ae 	bne.w	800774a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075f6:	d117      	bne.n	8007628 <UART_Receive_IT+0x50>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d113      	bne.n	8007628 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007600:	2300      	movs	r3, #0
 8007602:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007608:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	b29b      	uxth	r3, r3
 8007612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007616:	b29a      	uxth	r2, r3
 8007618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007620:	1c9a      	adds	r2, r3, #2
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	629a      	str	r2, [r3, #40]	@ 0x28
 8007626:	e026      	b.n	8007676 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800762c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800762e:	2300      	movs	r3, #0
 8007630:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800763a:	d007      	beq.n	800764c <UART_Receive_IT+0x74>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <UART_Receive_IT+0x82>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d106      	bne.n	800765a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	b2da      	uxtb	r2, r3
 8007654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	e008      	b.n	800766c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	b2db      	uxtb	r3, r3
 8007662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007666:	b2da      	uxtb	r2, r3
 8007668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800766a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800767a:	b29b      	uxth	r3, r3
 800767c:	3b01      	subs	r3, #1
 800767e:	b29b      	uxth	r3, r3
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	4619      	mov	r1, r3
 8007684:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007686:	2b00      	cmp	r3, #0
 8007688:	d15d      	bne.n	8007746 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f022 0220 	bic.w	r2, r2, #32
 8007698:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	695a      	ldr	r2, [r3, #20]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0201 	bic.w	r2, r2, #1
 80076b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d135      	bne.n	800773c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	330c      	adds	r3, #12
 80076dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	613b      	str	r3, [r7, #16]
   return(result);
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f023 0310 	bic.w	r3, r3, #16
 80076ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	330c      	adds	r3, #12
 80076f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f6:	623a      	str	r2, [r7, #32]
 80076f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	69f9      	ldr	r1, [r7, #28]
 80076fc:	6a3a      	ldr	r2, [r7, #32]
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	61bb      	str	r3, [r7, #24]
   return(result);
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e5      	bne.n	80076d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0310 	and.w	r3, r3, #16
 8007714:	2b10      	cmp	r3, #16
 8007716:	d10a      	bne.n	800772e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7f9 f83d 	bl	80007b4 <HAL_UARTEx_RxEventCallback>
 800773a:	e002      	b.n	8007742 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff fda7 	bl	8007290 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	e002      	b.n	800774c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	e000      	b.n	800774c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800774a:	2302      	movs	r3, #2
  }
}
 800774c:	4618      	mov	r0, r3
 800774e:	3730      	adds	r7, #48	@ 0x30
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007758:	b0c0      	sub	sp, #256	@ 0x100
 800775a:	af00      	add	r7, sp, #0
 800775c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007770:	68d9      	ldr	r1, [r3, #12]
 8007772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	ea40 0301 	orr.w	r3, r0, r1
 800777c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800777e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	431a      	orrs	r2, r3
 800778c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	431a      	orrs	r2, r3
 8007794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	4313      	orrs	r3, r2
 800779c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80077a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80077ac:	f021 010c 	bic.w	r1, r1, #12
 80077b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077ba:	430b      	orrs	r3, r1
 80077bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80077ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ce:	6999      	ldr	r1, [r3, #24]
 80077d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	ea40 0301 	orr.w	r3, r0, r1
 80077da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	4b8f      	ldr	r3, [pc, #572]	@ (8007a20 <UART_SetConfig+0x2cc>)
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d005      	beq.n	80077f4 <UART_SetConfig+0xa0>
 80077e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	4b8d      	ldr	r3, [pc, #564]	@ (8007a24 <UART_SetConfig+0x2d0>)
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d104      	bne.n	80077fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077f4:	f7fe f9d6 	bl	8005ba4 <HAL_RCC_GetPCLK2Freq>
 80077f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80077fc:	e003      	b.n	8007806 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077fe:	f7fe f9bd 	bl	8005b7c <HAL_RCC_GetPCLK1Freq>
 8007802:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007810:	f040 810c 	bne.w	8007a2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007818:	2200      	movs	r2, #0
 800781a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800781e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007822:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007826:	4622      	mov	r2, r4
 8007828:	462b      	mov	r3, r5
 800782a:	1891      	adds	r1, r2, r2
 800782c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800782e:	415b      	adcs	r3, r3
 8007830:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007832:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007836:	4621      	mov	r1, r4
 8007838:	eb12 0801 	adds.w	r8, r2, r1
 800783c:	4629      	mov	r1, r5
 800783e:	eb43 0901 	adc.w	r9, r3, r1
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	f04f 0300 	mov.w	r3, #0
 800784a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800784e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007856:	4690      	mov	r8, r2
 8007858:	4699      	mov	r9, r3
 800785a:	4623      	mov	r3, r4
 800785c:	eb18 0303 	adds.w	r3, r8, r3
 8007860:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007864:	462b      	mov	r3, r5
 8007866:	eb49 0303 	adc.w	r3, r9, r3
 800786a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800786e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800787a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800787e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007882:	460b      	mov	r3, r1
 8007884:	18db      	adds	r3, r3, r3
 8007886:	653b      	str	r3, [r7, #80]	@ 0x50
 8007888:	4613      	mov	r3, r2
 800788a:	eb42 0303 	adc.w	r3, r2, r3
 800788e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007894:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007898:	f7f8 fcf2 	bl	8000280 <__aeabi_uldivmod>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4b61      	ldr	r3, [pc, #388]	@ (8007a28 <UART_SetConfig+0x2d4>)
 80078a2:	fba3 2302 	umull	r2, r3, r3, r2
 80078a6:	095b      	lsrs	r3, r3, #5
 80078a8:	011c      	lsls	r4, r3, #4
 80078aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80078b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80078bc:	4642      	mov	r2, r8
 80078be:	464b      	mov	r3, r9
 80078c0:	1891      	adds	r1, r2, r2
 80078c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80078c4:	415b      	adcs	r3, r3
 80078c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80078cc:	4641      	mov	r1, r8
 80078ce:	eb12 0a01 	adds.w	sl, r2, r1
 80078d2:	4649      	mov	r1, r9
 80078d4:	eb43 0b01 	adc.w	fp, r3, r1
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	f04f 0300 	mov.w	r3, #0
 80078e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078ec:	4692      	mov	sl, r2
 80078ee:	469b      	mov	fp, r3
 80078f0:	4643      	mov	r3, r8
 80078f2:	eb1a 0303 	adds.w	r3, sl, r3
 80078f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078fa:	464b      	mov	r3, r9
 80078fc:	eb4b 0303 	adc.w	r3, fp, r3
 8007900:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007910:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007914:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007918:	460b      	mov	r3, r1
 800791a:	18db      	adds	r3, r3, r3
 800791c:	643b      	str	r3, [r7, #64]	@ 0x40
 800791e:	4613      	mov	r3, r2
 8007920:	eb42 0303 	adc.w	r3, r2, r3
 8007924:	647b      	str	r3, [r7, #68]	@ 0x44
 8007926:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800792a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800792e:	f7f8 fca7 	bl	8000280 <__aeabi_uldivmod>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4611      	mov	r1, r2
 8007938:	4b3b      	ldr	r3, [pc, #236]	@ (8007a28 <UART_SetConfig+0x2d4>)
 800793a:	fba3 2301 	umull	r2, r3, r3, r1
 800793e:	095b      	lsrs	r3, r3, #5
 8007940:	2264      	movs	r2, #100	@ 0x64
 8007942:	fb02 f303 	mul.w	r3, r2, r3
 8007946:	1acb      	subs	r3, r1, r3
 8007948:	00db      	lsls	r3, r3, #3
 800794a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800794e:	4b36      	ldr	r3, [pc, #216]	@ (8007a28 <UART_SetConfig+0x2d4>)
 8007950:	fba3 2302 	umull	r2, r3, r3, r2
 8007954:	095b      	lsrs	r3, r3, #5
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800795c:	441c      	add	r4, r3
 800795e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007962:	2200      	movs	r2, #0
 8007964:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007968:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800796c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007970:	4642      	mov	r2, r8
 8007972:	464b      	mov	r3, r9
 8007974:	1891      	adds	r1, r2, r2
 8007976:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007978:	415b      	adcs	r3, r3
 800797a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800797c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007980:	4641      	mov	r1, r8
 8007982:	1851      	adds	r1, r2, r1
 8007984:	6339      	str	r1, [r7, #48]	@ 0x30
 8007986:	4649      	mov	r1, r9
 8007988:	414b      	adcs	r3, r1
 800798a:	637b      	str	r3, [r7, #52]	@ 0x34
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	f04f 0300 	mov.w	r3, #0
 8007994:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007998:	4659      	mov	r1, fp
 800799a:	00cb      	lsls	r3, r1, #3
 800799c:	4651      	mov	r1, sl
 800799e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079a2:	4651      	mov	r1, sl
 80079a4:	00ca      	lsls	r2, r1, #3
 80079a6:	4610      	mov	r0, r2
 80079a8:	4619      	mov	r1, r3
 80079aa:	4603      	mov	r3, r0
 80079ac:	4642      	mov	r2, r8
 80079ae:	189b      	adds	r3, r3, r2
 80079b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079b4:	464b      	mov	r3, r9
 80079b6:	460a      	mov	r2, r1
 80079b8:	eb42 0303 	adc.w	r3, r2, r3
 80079bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80079d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079d4:	460b      	mov	r3, r1
 80079d6:	18db      	adds	r3, r3, r3
 80079d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079da:	4613      	mov	r3, r2
 80079dc:	eb42 0303 	adc.w	r3, r2, r3
 80079e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80079e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80079ea:	f7f8 fc49 	bl	8000280 <__aeabi_uldivmod>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007a28 <UART_SetConfig+0x2d4>)
 80079f4:	fba3 1302 	umull	r1, r3, r3, r2
 80079f8:	095b      	lsrs	r3, r3, #5
 80079fa:	2164      	movs	r1, #100	@ 0x64
 80079fc:	fb01 f303 	mul.w	r3, r1, r3
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	3332      	adds	r3, #50	@ 0x32
 8007a06:	4a08      	ldr	r2, [pc, #32]	@ (8007a28 <UART_SetConfig+0x2d4>)
 8007a08:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0c:	095b      	lsrs	r3, r3, #5
 8007a0e:	f003 0207 	and.w	r2, r3, #7
 8007a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4422      	add	r2, r4
 8007a1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a1c:	e106      	b.n	8007c2c <UART_SetConfig+0x4d8>
 8007a1e:	bf00      	nop
 8007a20:	40011000 	.word	0x40011000
 8007a24:	40011400 	.word	0x40011400
 8007a28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a30:	2200      	movs	r2, #0
 8007a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007a3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007a3e:	4642      	mov	r2, r8
 8007a40:	464b      	mov	r3, r9
 8007a42:	1891      	adds	r1, r2, r2
 8007a44:	6239      	str	r1, [r7, #32]
 8007a46:	415b      	adcs	r3, r3
 8007a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a4e:	4641      	mov	r1, r8
 8007a50:	1854      	adds	r4, r2, r1
 8007a52:	4649      	mov	r1, r9
 8007a54:	eb43 0501 	adc.w	r5, r3, r1
 8007a58:	f04f 0200 	mov.w	r2, #0
 8007a5c:	f04f 0300 	mov.w	r3, #0
 8007a60:	00eb      	lsls	r3, r5, #3
 8007a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a66:	00e2      	lsls	r2, r4, #3
 8007a68:	4614      	mov	r4, r2
 8007a6a:	461d      	mov	r5, r3
 8007a6c:	4643      	mov	r3, r8
 8007a6e:	18e3      	adds	r3, r4, r3
 8007a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a74:	464b      	mov	r3, r9
 8007a76:	eb45 0303 	adc.w	r3, r5, r3
 8007a7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a8e:	f04f 0200 	mov.w	r2, #0
 8007a92:	f04f 0300 	mov.w	r3, #0
 8007a96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	008b      	lsls	r3, r1, #2
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	008a      	lsls	r2, r1, #2
 8007aa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007aac:	f7f8 fbe8 	bl	8000280 <__aeabi_uldivmod>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4b60      	ldr	r3, [pc, #384]	@ (8007c38 <UART_SetConfig+0x4e4>)
 8007ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8007aba:	095b      	lsrs	r3, r3, #5
 8007abc:	011c      	lsls	r4, r3, #4
 8007abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ac8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007acc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	464b      	mov	r3, r9
 8007ad4:	1891      	adds	r1, r2, r2
 8007ad6:	61b9      	str	r1, [r7, #24]
 8007ad8:	415b      	adcs	r3, r3
 8007ada:	61fb      	str	r3, [r7, #28]
 8007adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ae0:	4641      	mov	r1, r8
 8007ae2:	1851      	adds	r1, r2, r1
 8007ae4:	6139      	str	r1, [r7, #16]
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	414b      	adcs	r3, r1
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	f04f 0300 	mov.w	r3, #0
 8007af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007af8:	4659      	mov	r1, fp
 8007afa:	00cb      	lsls	r3, r1, #3
 8007afc:	4651      	mov	r1, sl
 8007afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b02:	4651      	mov	r1, sl
 8007b04:	00ca      	lsls	r2, r1, #3
 8007b06:	4610      	mov	r0, r2
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	189b      	adds	r3, r3, r2
 8007b10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b14:	464b      	mov	r3, r9
 8007b16:	460a      	mov	r2, r1
 8007b18:	eb42 0303 	adc.w	r3, r2, r3
 8007b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007b2c:	f04f 0200 	mov.w	r2, #0
 8007b30:	f04f 0300 	mov.w	r3, #0
 8007b34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007b38:	4649      	mov	r1, r9
 8007b3a:	008b      	lsls	r3, r1, #2
 8007b3c:	4641      	mov	r1, r8
 8007b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b42:	4641      	mov	r1, r8
 8007b44:	008a      	lsls	r2, r1, #2
 8007b46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007b4a:	f7f8 fb99 	bl	8000280 <__aeabi_uldivmod>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4611      	mov	r1, r2
 8007b54:	4b38      	ldr	r3, [pc, #224]	@ (8007c38 <UART_SetConfig+0x4e4>)
 8007b56:	fba3 2301 	umull	r2, r3, r3, r1
 8007b5a:	095b      	lsrs	r3, r3, #5
 8007b5c:	2264      	movs	r2, #100	@ 0x64
 8007b5e:	fb02 f303 	mul.w	r3, r2, r3
 8007b62:	1acb      	subs	r3, r1, r3
 8007b64:	011b      	lsls	r3, r3, #4
 8007b66:	3332      	adds	r3, #50	@ 0x32
 8007b68:	4a33      	ldr	r2, [pc, #204]	@ (8007c38 <UART_SetConfig+0x4e4>)
 8007b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b74:	441c      	add	r4, r3
 8007b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b84:	4642      	mov	r2, r8
 8007b86:	464b      	mov	r3, r9
 8007b88:	1891      	adds	r1, r2, r2
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	415b      	adcs	r3, r3
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b94:	4641      	mov	r1, r8
 8007b96:	1851      	adds	r1, r2, r1
 8007b98:	6039      	str	r1, [r7, #0]
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	414b      	adcs	r3, r1
 8007b9e:	607b      	str	r3, [r7, #4]
 8007ba0:	f04f 0200 	mov.w	r2, #0
 8007ba4:	f04f 0300 	mov.w	r3, #0
 8007ba8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007bac:	4659      	mov	r1, fp
 8007bae:	00cb      	lsls	r3, r1, #3
 8007bb0:	4651      	mov	r1, sl
 8007bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bb6:	4651      	mov	r1, sl
 8007bb8:	00ca      	lsls	r2, r1, #3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	189b      	adds	r3, r3, r2
 8007bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bc6:	464b      	mov	r3, r9
 8007bc8:	460a      	mov	r2, r1
 8007bca:	eb42 0303 	adc.w	r3, r2, r3
 8007bce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bda:	667a      	str	r2, [r7, #100]	@ 0x64
 8007bdc:	f04f 0200 	mov.w	r2, #0
 8007be0:	f04f 0300 	mov.w	r3, #0
 8007be4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007be8:	4649      	mov	r1, r9
 8007bea:	008b      	lsls	r3, r1, #2
 8007bec:	4641      	mov	r1, r8
 8007bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bf2:	4641      	mov	r1, r8
 8007bf4:	008a      	lsls	r2, r1, #2
 8007bf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007bfa:	f7f8 fb41 	bl	8000280 <__aeabi_uldivmod>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	4b0d      	ldr	r3, [pc, #52]	@ (8007c38 <UART_SetConfig+0x4e4>)
 8007c04:	fba3 1302 	umull	r1, r3, r3, r2
 8007c08:	095b      	lsrs	r3, r3, #5
 8007c0a:	2164      	movs	r1, #100	@ 0x64
 8007c0c:	fb01 f303 	mul.w	r3, r1, r3
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	011b      	lsls	r3, r3, #4
 8007c14:	3332      	adds	r3, #50	@ 0x32
 8007c16:	4a08      	ldr	r2, [pc, #32]	@ (8007c38 <UART_SetConfig+0x4e4>)
 8007c18:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1c:	095b      	lsrs	r3, r3, #5
 8007c1e:	f003 020f 	and.w	r2, r3, #15
 8007c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4422      	add	r2, r4
 8007c2a:	609a      	str	r2, [r3, #8]
}
 8007c2c:	bf00      	nop
 8007c2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007c32:	46bd      	mov	sp, r7
 8007c34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c38:	51eb851f 	.word	0x51eb851f

08007c3c <atoi>:
 8007c3c:	220a      	movs	r2, #10
 8007c3e:	2100      	movs	r1, #0
 8007c40:	f000 b87a 	b.w	8007d38 <strtol>

08007c44 <_strtol_l.constprop.0>:
 8007c44:	2b24      	cmp	r3, #36	@ 0x24
 8007c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c4a:	4686      	mov	lr, r0
 8007c4c:	4690      	mov	r8, r2
 8007c4e:	d801      	bhi.n	8007c54 <_strtol_l.constprop.0+0x10>
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d106      	bne.n	8007c62 <_strtol_l.constprop.0+0x1e>
 8007c54:	f000 f8a2 	bl	8007d9c <__errno>
 8007c58:	2316      	movs	r3, #22
 8007c5a:	6003      	str	r3, [r0, #0]
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c62:	4834      	ldr	r0, [pc, #208]	@ (8007d34 <_strtol_l.constprop.0+0xf0>)
 8007c64:	460d      	mov	r5, r1
 8007c66:	462a      	mov	r2, r5
 8007c68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c6c:	5d06      	ldrb	r6, [r0, r4]
 8007c6e:	f016 0608 	ands.w	r6, r6, #8
 8007c72:	d1f8      	bne.n	8007c66 <_strtol_l.constprop.0+0x22>
 8007c74:	2c2d      	cmp	r4, #45	@ 0x2d
 8007c76:	d12d      	bne.n	8007cd4 <_strtol_l.constprop.0+0x90>
 8007c78:	782c      	ldrb	r4, [r5, #0]
 8007c7a:	2601      	movs	r6, #1
 8007c7c:	1c95      	adds	r5, r2, #2
 8007c7e:	f033 0210 	bics.w	r2, r3, #16
 8007c82:	d109      	bne.n	8007c98 <_strtol_l.constprop.0+0x54>
 8007c84:	2c30      	cmp	r4, #48	@ 0x30
 8007c86:	d12a      	bne.n	8007cde <_strtol_l.constprop.0+0x9a>
 8007c88:	782a      	ldrb	r2, [r5, #0]
 8007c8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c8e:	2a58      	cmp	r2, #88	@ 0x58
 8007c90:	d125      	bne.n	8007cde <_strtol_l.constprop.0+0x9a>
 8007c92:	786c      	ldrb	r4, [r5, #1]
 8007c94:	2310      	movs	r3, #16
 8007c96:	3502      	adds	r5, #2
 8007c98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007c9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	fbbc f9f3 	udiv	r9, ip, r3
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	fb03 ca19 	mls	sl, r3, r9, ip
 8007cac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007cb0:	2f09      	cmp	r7, #9
 8007cb2:	d81b      	bhi.n	8007cec <_strtol_l.constprop.0+0xa8>
 8007cb4:	463c      	mov	r4, r7
 8007cb6:	42a3      	cmp	r3, r4
 8007cb8:	dd27      	ble.n	8007d0a <_strtol_l.constprop.0+0xc6>
 8007cba:	1c57      	adds	r7, r2, #1
 8007cbc:	d007      	beq.n	8007cce <_strtol_l.constprop.0+0x8a>
 8007cbe:	4581      	cmp	r9, r0
 8007cc0:	d320      	bcc.n	8007d04 <_strtol_l.constprop.0+0xc0>
 8007cc2:	d101      	bne.n	8007cc8 <_strtol_l.constprop.0+0x84>
 8007cc4:	45a2      	cmp	sl, r4
 8007cc6:	db1d      	blt.n	8007d04 <_strtol_l.constprop.0+0xc0>
 8007cc8:	fb00 4003 	mla	r0, r0, r3, r4
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cd2:	e7eb      	b.n	8007cac <_strtol_l.constprop.0+0x68>
 8007cd4:	2c2b      	cmp	r4, #43	@ 0x2b
 8007cd6:	bf04      	itt	eq
 8007cd8:	782c      	ldrbeq	r4, [r5, #0]
 8007cda:	1c95      	addeq	r5, r2, #2
 8007cdc:	e7cf      	b.n	8007c7e <_strtol_l.constprop.0+0x3a>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1da      	bne.n	8007c98 <_strtol_l.constprop.0+0x54>
 8007ce2:	2c30      	cmp	r4, #48	@ 0x30
 8007ce4:	bf0c      	ite	eq
 8007ce6:	2308      	moveq	r3, #8
 8007ce8:	230a      	movne	r3, #10
 8007cea:	e7d5      	b.n	8007c98 <_strtol_l.constprop.0+0x54>
 8007cec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007cf0:	2f19      	cmp	r7, #25
 8007cf2:	d801      	bhi.n	8007cf8 <_strtol_l.constprop.0+0xb4>
 8007cf4:	3c37      	subs	r4, #55	@ 0x37
 8007cf6:	e7de      	b.n	8007cb6 <_strtol_l.constprop.0+0x72>
 8007cf8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007cfc:	2f19      	cmp	r7, #25
 8007cfe:	d804      	bhi.n	8007d0a <_strtol_l.constprop.0+0xc6>
 8007d00:	3c57      	subs	r4, #87	@ 0x57
 8007d02:	e7d8      	b.n	8007cb6 <_strtol_l.constprop.0+0x72>
 8007d04:	f04f 32ff 	mov.w	r2, #4294967295
 8007d08:	e7e1      	b.n	8007cce <_strtol_l.constprop.0+0x8a>
 8007d0a:	1c53      	adds	r3, r2, #1
 8007d0c:	d108      	bne.n	8007d20 <_strtol_l.constprop.0+0xdc>
 8007d0e:	2322      	movs	r3, #34	@ 0x22
 8007d10:	f8ce 3000 	str.w	r3, [lr]
 8007d14:	4660      	mov	r0, ip
 8007d16:	f1b8 0f00 	cmp.w	r8, #0
 8007d1a:	d0a0      	beq.n	8007c5e <_strtol_l.constprop.0+0x1a>
 8007d1c:	1e69      	subs	r1, r5, #1
 8007d1e:	e006      	b.n	8007d2e <_strtol_l.constprop.0+0xea>
 8007d20:	b106      	cbz	r6, 8007d24 <_strtol_l.constprop.0+0xe0>
 8007d22:	4240      	negs	r0, r0
 8007d24:	f1b8 0f00 	cmp.w	r8, #0
 8007d28:	d099      	beq.n	8007c5e <_strtol_l.constprop.0+0x1a>
 8007d2a:	2a00      	cmp	r2, #0
 8007d2c:	d1f6      	bne.n	8007d1c <_strtol_l.constprop.0+0xd8>
 8007d2e:	f8c8 1000 	str.w	r1, [r8]
 8007d32:	e794      	b.n	8007c5e <_strtol_l.constprop.0+0x1a>
 8007d34:	08009019 	.word	0x08009019

08007d38 <strtol>:
 8007d38:	4613      	mov	r3, r2
 8007d3a:	460a      	mov	r2, r1
 8007d3c:	4601      	mov	r1, r0
 8007d3e:	4802      	ldr	r0, [pc, #8]	@ (8007d48 <strtol+0x10>)
 8007d40:	6800      	ldr	r0, [r0, #0]
 8007d42:	f7ff bf7f 	b.w	8007c44 <_strtol_l.constprop.0>
 8007d46:	bf00      	nop
 8007d48:	2000011c 	.word	0x2000011c

08007d4c <siprintf>:
 8007d4c:	b40e      	push	{r1, r2, r3}
 8007d4e:	b500      	push	{lr}
 8007d50:	b09c      	sub	sp, #112	@ 0x70
 8007d52:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d54:	9002      	str	r0, [sp, #8]
 8007d56:	9006      	str	r0, [sp, #24]
 8007d58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d5c:	4809      	ldr	r0, [pc, #36]	@ (8007d84 <siprintf+0x38>)
 8007d5e:	9107      	str	r1, [sp, #28]
 8007d60:	9104      	str	r1, [sp, #16]
 8007d62:	4909      	ldr	r1, [pc, #36]	@ (8007d88 <siprintf+0x3c>)
 8007d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d68:	9105      	str	r1, [sp, #20]
 8007d6a:	6800      	ldr	r0, [r0, #0]
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	a902      	add	r1, sp, #8
 8007d70:	f000 f9a2 	bl	80080b8 <_svfiprintf_r>
 8007d74:	9b02      	ldr	r3, [sp, #8]
 8007d76:	2200      	movs	r2, #0
 8007d78:	701a      	strb	r2, [r3, #0]
 8007d7a:	b01c      	add	sp, #112	@ 0x70
 8007d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d80:	b003      	add	sp, #12
 8007d82:	4770      	bx	lr
 8007d84:	2000011c 	.word	0x2000011c
 8007d88:	ffff0208 	.word	0xffff0208

08007d8c <memset>:
 8007d8c:	4402      	add	r2, r0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d100      	bne.n	8007d96 <memset+0xa>
 8007d94:	4770      	bx	lr
 8007d96:	f803 1b01 	strb.w	r1, [r3], #1
 8007d9a:	e7f9      	b.n	8007d90 <memset+0x4>

08007d9c <__errno>:
 8007d9c:	4b01      	ldr	r3, [pc, #4]	@ (8007da4 <__errno+0x8>)
 8007d9e:	6818      	ldr	r0, [r3, #0]
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	2000011c 	.word	0x2000011c

08007da8 <__libc_init_array>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	4d0d      	ldr	r5, [pc, #52]	@ (8007de0 <__libc_init_array+0x38>)
 8007dac:	4c0d      	ldr	r4, [pc, #52]	@ (8007de4 <__libc_init_array+0x3c>)
 8007dae:	1b64      	subs	r4, r4, r5
 8007db0:	10a4      	asrs	r4, r4, #2
 8007db2:	2600      	movs	r6, #0
 8007db4:	42a6      	cmp	r6, r4
 8007db6:	d109      	bne.n	8007dcc <__libc_init_array+0x24>
 8007db8:	4d0b      	ldr	r5, [pc, #44]	@ (8007de8 <__libc_init_array+0x40>)
 8007dba:	4c0c      	ldr	r4, [pc, #48]	@ (8007dec <__libc_init_array+0x44>)
 8007dbc:	f000 fc66 	bl	800868c <_init>
 8007dc0:	1b64      	subs	r4, r4, r5
 8007dc2:	10a4      	asrs	r4, r4, #2
 8007dc4:	2600      	movs	r6, #0
 8007dc6:	42a6      	cmp	r6, r4
 8007dc8:	d105      	bne.n	8007dd6 <__libc_init_array+0x2e>
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
 8007dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd0:	4798      	blx	r3
 8007dd2:	3601      	adds	r6, #1
 8007dd4:	e7ee      	b.n	8007db4 <__libc_init_array+0xc>
 8007dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dda:	4798      	blx	r3
 8007ddc:	3601      	adds	r6, #1
 8007dde:	e7f2      	b.n	8007dc6 <__libc_init_array+0x1e>
 8007de0:	08009154 	.word	0x08009154
 8007de4:	08009154 	.word	0x08009154
 8007de8:	08009154 	.word	0x08009154
 8007dec:	08009158 	.word	0x08009158

08007df0 <__retarget_lock_acquire_recursive>:
 8007df0:	4770      	bx	lr

08007df2 <__retarget_lock_release_recursive>:
 8007df2:	4770      	bx	lr

08007df4 <memcpy>:
 8007df4:	440a      	add	r2, r1
 8007df6:	4291      	cmp	r1, r2
 8007df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dfc:	d100      	bne.n	8007e00 <memcpy+0xc>
 8007dfe:	4770      	bx	lr
 8007e00:	b510      	push	{r4, lr}
 8007e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e0a:	4291      	cmp	r1, r2
 8007e0c:	d1f9      	bne.n	8007e02 <memcpy+0xe>
 8007e0e:	bd10      	pop	{r4, pc}

08007e10 <_free_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4605      	mov	r5, r0
 8007e14:	2900      	cmp	r1, #0
 8007e16:	d041      	beq.n	8007e9c <_free_r+0x8c>
 8007e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e1c:	1f0c      	subs	r4, r1, #4
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	bfb8      	it	lt
 8007e22:	18e4      	addlt	r4, r4, r3
 8007e24:	f000 f8e0 	bl	8007fe8 <__malloc_lock>
 8007e28:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea0 <_free_r+0x90>)
 8007e2a:	6813      	ldr	r3, [r2, #0]
 8007e2c:	b933      	cbnz	r3, 8007e3c <_free_r+0x2c>
 8007e2e:	6063      	str	r3, [r4, #4]
 8007e30:	6014      	str	r4, [r2, #0]
 8007e32:	4628      	mov	r0, r5
 8007e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e38:	f000 b8dc 	b.w	8007ff4 <__malloc_unlock>
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	d908      	bls.n	8007e52 <_free_r+0x42>
 8007e40:	6820      	ldr	r0, [r4, #0]
 8007e42:	1821      	adds	r1, r4, r0
 8007e44:	428b      	cmp	r3, r1
 8007e46:	bf01      	itttt	eq
 8007e48:	6819      	ldreq	r1, [r3, #0]
 8007e4a:	685b      	ldreq	r3, [r3, #4]
 8007e4c:	1809      	addeq	r1, r1, r0
 8007e4e:	6021      	streq	r1, [r4, #0]
 8007e50:	e7ed      	b.n	8007e2e <_free_r+0x1e>
 8007e52:	461a      	mov	r2, r3
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	b10b      	cbz	r3, 8007e5c <_free_r+0x4c>
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	d9fa      	bls.n	8007e52 <_free_r+0x42>
 8007e5c:	6811      	ldr	r1, [r2, #0]
 8007e5e:	1850      	adds	r0, r2, r1
 8007e60:	42a0      	cmp	r0, r4
 8007e62:	d10b      	bne.n	8007e7c <_free_r+0x6c>
 8007e64:	6820      	ldr	r0, [r4, #0]
 8007e66:	4401      	add	r1, r0
 8007e68:	1850      	adds	r0, r2, r1
 8007e6a:	4283      	cmp	r3, r0
 8007e6c:	6011      	str	r1, [r2, #0]
 8007e6e:	d1e0      	bne.n	8007e32 <_free_r+0x22>
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	6053      	str	r3, [r2, #4]
 8007e76:	4408      	add	r0, r1
 8007e78:	6010      	str	r0, [r2, #0]
 8007e7a:	e7da      	b.n	8007e32 <_free_r+0x22>
 8007e7c:	d902      	bls.n	8007e84 <_free_r+0x74>
 8007e7e:	230c      	movs	r3, #12
 8007e80:	602b      	str	r3, [r5, #0]
 8007e82:	e7d6      	b.n	8007e32 <_free_r+0x22>
 8007e84:	6820      	ldr	r0, [r4, #0]
 8007e86:	1821      	adds	r1, r4, r0
 8007e88:	428b      	cmp	r3, r1
 8007e8a:	bf04      	itt	eq
 8007e8c:	6819      	ldreq	r1, [r3, #0]
 8007e8e:	685b      	ldreq	r3, [r3, #4]
 8007e90:	6063      	str	r3, [r4, #4]
 8007e92:	bf04      	itt	eq
 8007e94:	1809      	addeq	r1, r1, r0
 8007e96:	6021      	streq	r1, [r4, #0]
 8007e98:	6054      	str	r4, [r2, #4]
 8007e9a:	e7ca      	b.n	8007e32 <_free_r+0x22>
 8007e9c:	bd38      	pop	{r3, r4, r5, pc}
 8007e9e:	bf00      	nop
 8007ea0:	2000094c 	.word	0x2000094c

08007ea4 <sbrk_aligned>:
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	4e0f      	ldr	r6, [pc, #60]	@ (8007ee4 <sbrk_aligned+0x40>)
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	6831      	ldr	r1, [r6, #0]
 8007eac:	4605      	mov	r5, r0
 8007eae:	b911      	cbnz	r1, 8007eb6 <sbrk_aligned+0x12>
 8007eb0:	f000 fba6 	bl	8008600 <_sbrk_r>
 8007eb4:	6030      	str	r0, [r6, #0]
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f000 fba1 	bl	8008600 <_sbrk_r>
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	d103      	bne.n	8007eca <sbrk_aligned+0x26>
 8007ec2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	bd70      	pop	{r4, r5, r6, pc}
 8007eca:	1cc4      	adds	r4, r0, #3
 8007ecc:	f024 0403 	bic.w	r4, r4, #3
 8007ed0:	42a0      	cmp	r0, r4
 8007ed2:	d0f8      	beq.n	8007ec6 <sbrk_aligned+0x22>
 8007ed4:	1a21      	subs	r1, r4, r0
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 fb92 	bl	8008600 <_sbrk_r>
 8007edc:	3001      	adds	r0, #1
 8007ede:	d1f2      	bne.n	8007ec6 <sbrk_aligned+0x22>
 8007ee0:	e7ef      	b.n	8007ec2 <sbrk_aligned+0x1e>
 8007ee2:	bf00      	nop
 8007ee4:	20000948 	.word	0x20000948

08007ee8 <_malloc_r>:
 8007ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eec:	1ccd      	adds	r5, r1, #3
 8007eee:	f025 0503 	bic.w	r5, r5, #3
 8007ef2:	3508      	adds	r5, #8
 8007ef4:	2d0c      	cmp	r5, #12
 8007ef6:	bf38      	it	cc
 8007ef8:	250c      	movcc	r5, #12
 8007efa:	2d00      	cmp	r5, #0
 8007efc:	4606      	mov	r6, r0
 8007efe:	db01      	blt.n	8007f04 <_malloc_r+0x1c>
 8007f00:	42a9      	cmp	r1, r5
 8007f02:	d904      	bls.n	8007f0e <_malloc_r+0x26>
 8007f04:	230c      	movs	r3, #12
 8007f06:	6033      	str	r3, [r6, #0]
 8007f08:	2000      	movs	r0, #0
 8007f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fe4 <_malloc_r+0xfc>
 8007f12:	f000 f869 	bl	8007fe8 <__malloc_lock>
 8007f16:	f8d8 3000 	ldr.w	r3, [r8]
 8007f1a:	461c      	mov	r4, r3
 8007f1c:	bb44      	cbnz	r4, 8007f70 <_malloc_r+0x88>
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4630      	mov	r0, r6
 8007f22:	f7ff ffbf 	bl	8007ea4 <sbrk_aligned>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	4604      	mov	r4, r0
 8007f2a:	d158      	bne.n	8007fde <_malloc_r+0xf6>
 8007f2c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f30:	4627      	mov	r7, r4
 8007f32:	2f00      	cmp	r7, #0
 8007f34:	d143      	bne.n	8007fbe <_malloc_r+0xd6>
 8007f36:	2c00      	cmp	r4, #0
 8007f38:	d04b      	beq.n	8007fd2 <_malloc_r+0xea>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	4630      	mov	r0, r6
 8007f40:	eb04 0903 	add.w	r9, r4, r3
 8007f44:	f000 fb5c 	bl	8008600 <_sbrk_r>
 8007f48:	4581      	cmp	r9, r0
 8007f4a:	d142      	bne.n	8007fd2 <_malloc_r+0xea>
 8007f4c:	6821      	ldr	r1, [r4, #0]
 8007f4e:	1a6d      	subs	r5, r5, r1
 8007f50:	4629      	mov	r1, r5
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7ff ffa6 	bl	8007ea4 <sbrk_aligned>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	d03a      	beq.n	8007fd2 <_malloc_r+0xea>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	442b      	add	r3, r5
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	f8d8 3000 	ldr.w	r3, [r8]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	bb62      	cbnz	r2, 8007fc4 <_malloc_r+0xdc>
 8007f6a:	f8c8 7000 	str.w	r7, [r8]
 8007f6e:	e00f      	b.n	8007f90 <_malloc_r+0xa8>
 8007f70:	6822      	ldr	r2, [r4, #0]
 8007f72:	1b52      	subs	r2, r2, r5
 8007f74:	d420      	bmi.n	8007fb8 <_malloc_r+0xd0>
 8007f76:	2a0b      	cmp	r2, #11
 8007f78:	d917      	bls.n	8007faa <_malloc_r+0xc2>
 8007f7a:	1961      	adds	r1, r4, r5
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	6025      	str	r5, [r4, #0]
 8007f80:	bf18      	it	ne
 8007f82:	6059      	strne	r1, [r3, #4]
 8007f84:	6863      	ldr	r3, [r4, #4]
 8007f86:	bf08      	it	eq
 8007f88:	f8c8 1000 	streq.w	r1, [r8]
 8007f8c:	5162      	str	r2, [r4, r5]
 8007f8e:	604b      	str	r3, [r1, #4]
 8007f90:	4630      	mov	r0, r6
 8007f92:	f000 f82f 	bl	8007ff4 <__malloc_unlock>
 8007f96:	f104 000b 	add.w	r0, r4, #11
 8007f9a:	1d23      	adds	r3, r4, #4
 8007f9c:	f020 0007 	bic.w	r0, r0, #7
 8007fa0:	1ac2      	subs	r2, r0, r3
 8007fa2:	bf1c      	itt	ne
 8007fa4:	1a1b      	subne	r3, r3, r0
 8007fa6:	50a3      	strne	r3, [r4, r2]
 8007fa8:	e7af      	b.n	8007f0a <_malloc_r+0x22>
 8007faa:	6862      	ldr	r2, [r4, #4]
 8007fac:	42a3      	cmp	r3, r4
 8007fae:	bf0c      	ite	eq
 8007fb0:	f8c8 2000 	streq.w	r2, [r8]
 8007fb4:	605a      	strne	r2, [r3, #4]
 8007fb6:	e7eb      	b.n	8007f90 <_malloc_r+0xa8>
 8007fb8:	4623      	mov	r3, r4
 8007fba:	6864      	ldr	r4, [r4, #4]
 8007fbc:	e7ae      	b.n	8007f1c <_malloc_r+0x34>
 8007fbe:	463c      	mov	r4, r7
 8007fc0:	687f      	ldr	r7, [r7, #4]
 8007fc2:	e7b6      	b.n	8007f32 <_malloc_r+0x4a>
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	42a3      	cmp	r3, r4
 8007fca:	d1fb      	bne.n	8007fc4 <_malloc_r+0xdc>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	6053      	str	r3, [r2, #4]
 8007fd0:	e7de      	b.n	8007f90 <_malloc_r+0xa8>
 8007fd2:	230c      	movs	r3, #12
 8007fd4:	6033      	str	r3, [r6, #0]
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f000 f80c 	bl	8007ff4 <__malloc_unlock>
 8007fdc:	e794      	b.n	8007f08 <_malloc_r+0x20>
 8007fde:	6005      	str	r5, [r0, #0]
 8007fe0:	e7d6      	b.n	8007f90 <_malloc_r+0xa8>
 8007fe2:	bf00      	nop
 8007fe4:	2000094c 	.word	0x2000094c

08007fe8 <__malloc_lock>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	@ (8007ff0 <__malloc_lock+0x8>)
 8007fea:	f7ff bf01 	b.w	8007df0 <__retarget_lock_acquire_recursive>
 8007fee:	bf00      	nop
 8007ff0:	20000944 	.word	0x20000944

08007ff4 <__malloc_unlock>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	@ (8007ffc <__malloc_unlock+0x8>)
 8007ff6:	f7ff befc 	b.w	8007df2 <__retarget_lock_release_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	20000944 	.word	0x20000944

08008000 <__ssputs_r>:
 8008000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008004:	688e      	ldr	r6, [r1, #8]
 8008006:	461f      	mov	r7, r3
 8008008:	42be      	cmp	r6, r7
 800800a:	680b      	ldr	r3, [r1, #0]
 800800c:	4682      	mov	sl, r0
 800800e:	460c      	mov	r4, r1
 8008010:	4690      	mov	r8, r2
 8008012:	d82d      	bhi.n	8008070 <__ssputs_r+0x70>
 8008014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008018:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800801c:	d026      	beq.n	800806c <__ssputs_r+0x6c>
 800801e:	6965      	ldr	r5, [r4, #20]
 8008020:	6909      	ldr	r1, [r1, #16]
 8008022:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008026:	eba3 0901 	sub.w	r9, r3, r1
 800802a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800802e:	1c7b      	adds	r3, r7, #1
 8008030:	444b      	add	r3, r9
 8008032:	106d      	asrs	r5, r5, #1
 8008034:	429d      	cmp	r5, r3
 8008036:	bf38      	it	cc
 8008038:	461d      	movcc	r5, r3
 800803a:	0553      	lsls	r3, r2, #21
 800803c:	d527      	bpl.n	800808e <__ssputs_r+0x8e>
 800803e:	4629      	mov	r1, r5
 8008040:	f7ff ff52 	bl	8007ee8 <_malloc_r>
 8008044:	4606      	mov	r6, r0
 8008046:	b360      	cbz	r0, 80080a2 <__ssputs_r+0xa2>
 8008048:	6921      	ldr	r1, [r4, #16]
 800804a:	464a      	mov	r2, r9
 800804c:	f7ff fed2 	bl	8007df4 <memcpy>
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800805a:	81a3      	strh	r3, [r4, #12]
 800805c:	6126      	str	r6, [r4, #16]
 800805e:	6165      	str	r5, [r4, #20]
 8008060:	444e      	add	r6, r9
 8008062:	eba5 0509 	sub.w	r5, r5, r9
 8008066:	6026      	str	r6, [r4, #0]
 8008068:	60a5      	str	r5, [r4, #8]
 800806a:	463e      	mov	r6, r7
 800806c:	42be      	cmp	r6, r7
 800806e:	d900      	bls.n	8008072 <__ssputs_r+0x72>
 8008070:	463e      	mov	r6, r7
 8008072:	6820      	ldr	r0, [r4, #0]
 8008074:	4632      	mov	r2, r6
 8008076:	4641      	mov	r1, r8
 8008078:	f000 faa8 	bl	80085cc <memmove>
 800807c:	68a3      	ldr	r3, [r4, #8]
 800807e:	1b9b      	subs	r3, r3, r6
 8008080:	60a3      	str	r3, [r4, #8]
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	4433      	add	r3, r6
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	2000      	movs	r0, #0
 800808a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808e:	462a      	mov	r2, r5
 8008090:	f000 fac6 	bl	8008620 <_realloc_r>
 8008094:	4606      	mov	r6, r0
 8008096:	2800      	cmp	r0, #0
 8008098:	d1e0      	bne.n	800805c <__ssputs_r+0x5c>
 800809a:	6921      	ldr	r1, [r4, #16]
 800809c:	4650      	mov	r0, sl
 800809e:	f7ff feb7 	bl	8007e10 <_free_r>
 80080a2:	230c      	movs	r3, #12
 80080a4:	f8ca 3000 	str.w	r3, [sl]
 80080a8:	89a3      	ldrh	r3, [r4, #12]
 80080aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ae:	81a3      	strh	r3, [r4, #12]
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295
 80080b4:	e7e9      	b.n	800808a <__ssputs_r+0x8a>
	...

080080b8 <_svfiprintf_r>:
 80080b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080bc:	4698      	mov	r8, r3
 80080be:	898b      	ldrh	r3, [r1, #12]
 80080c0:	061b      	lsls	r3, r3, #24
 80080c2:	b09d      	sub	sp, #116	@ 0x74
 80080c4:	4607      	mov	r7, r0
 80080c6:	460d      	mov	r5, r1
 80080c8:	4614      	mov	r4, r2
 80080ca:	d510      	bpl.n	80080ee <_svfiprintf_r+0x36>
 80080cc:	690b      	ldr	r3, [r1, #16]
 80080ce:	b973      	cbnz	r3, 80080ee <_svfiprintf_r+0x36>
 80080d0:	2140      	movs	r1, #64	@ 0x40
 80080d2:	f7ff ff09 	bl	8007ee8 <_malloc_r>
 80080d6:	6028      	str	r0, [r5, #0]
 80080d8:	6128      	str	r0, [r5, #16]
 80080da:	b930      	cbnz	r0, 80080ea <_svfiprintf_r+0x32>
 80080dc:	230c      	movs	r3, #12
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	f04f 30ff 	mov.w	r0, #4294967295
 80080e4:	b01d      	add	sp, #116	@ 0x74
 80080e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ea:	2340      	movs	r3, #64	@ 0x40
 80080ec:	616b      	str	r3, [r5, #20]
 80080ee:	2300      	movs	r3, #0
 80080f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80080f2:	2320      	movs	r3, #32
 80080f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80080fc:	2330      	movs	r3, #48	@ 0x30
 80080fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800829c <_svfiprintf_r+0x1e4>
 8008102:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008106:	f04f 0901 	mov.w	r9, #1
 800810a:	4623      	mov	r3, r4
 800810c:	469a      	mov	sl, r3
 800810e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008112:	b10a      	cbz	r2, 8008118 <_svfiprintf_r+0x60>
 8008114:	2a25      	cmp	r2, #37	@ 0x25
 8008116:	d1f9      	bne.n	800810c <_svfiprintf_r+0x54>
 8008118:	ebba 0b04 	subs.w	fp, sl, r4
 800811c:	d00b      	beq.n	8008136 <_svfiprintf_r+0x7e>
 800811e:	465b      	mov	r3, fp
 8008120:	4622      	mov	r2, r4
 8008122:	4629      	mov	r1, r5
 8008124:	4638      	mov	r0, r7
 8008126:	f7ff ff6b 	bl	8008000 <__ssputs_r>
 800812a:	3001      	adds	r0, #1
 800812c:	f000 80a7 	beq.w	800827e <_svfiprintf_r+0x1c6>
 8008130:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008132:	445a      	add	r2, fp
 8008134:	9209      	str	r2, [sp, #36]	@ 0x24
 8008136:	f89a 3000 	ldrb.w	r3, [sl]
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 809f 	beq.w	800827e <_svfiprintf_r+0x1c6>
 8008140:	2300      	movs	r3, #0
 8008142:	f04f 32ff 	mov.w	r2, #4294967295
 8008146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800814a:	f10a 0a01 	add.w	sl, sl, #1
 800814e:	9304      	str	r3, [sp, #16]
 8008150:	9307      	str	r3, [sp, #28]
 8008152:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008156:	931a      	str	r3, [sp, #104]	@ 0x68
 8008158:	4654      	mov	r4, sl
 800815a:	2205      	movs	r2, #5
 800815c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008160:	484e      	ldr	r0, [pc, #312]	@ (800829c <_svfiprintf_r+0x1e4>)
 8008162:	f7f8 f83d 	bl	80001e0 <memchr>
 8008166:	9a04      	ldr	r2, [sp, #16]
 8008168:	b9d8      	cbnz	r0, 80081a2 <_svfiprintf_r+0xea>
 800816a:	06d0      	lsls	r0, r2, #27
 800816c:	bf44      	itt	mi
 800816e:	2320      	movmi	r3, #32
 8008170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008174:	0711      	lsls	r1, r2, #28
 8008176:	bf44      	itt	mi
 8008178:	232b      	movmi	r3, #43	@ 0x2b
 800817a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800817e:	f89a 3000 	ldrb.w	r3, [sl]
 8008182:	2b2a      	cmp	r3, #42	@ 0x2a
 8008184:	d015      	beq.n	80081b2 <_svfiprintf_r+0xfa>
 8008186:	9a07      	ldr	r2, [sp, #28]
 8008188:	4654      	mov	r4, sl
 800818a:	2000      	movs	r0, #0
 800818c:	f04f 0c0a 	mov.w	ip, #10
 8008190:	4621      	mov	r1, r4
 8008192:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008196:	3b30      	subs	r3, #48	@ 0x30
 8008198:	2b09      	cmp	r3, #9
 800819a:	d94b      	bls.n	8008234 <_svfiprintf_r+0x17c>
 800819c:	b1b0      	cbz	r0, 80081cc <_svfiprintf_r+0x114>
 800819e:	9207      	str	r2, [sp, #28]
 80081a0:	e014      	b.n	80081cc <_svfiprintf_r+0x114>
 80081a2:	eba0 0308 	sub.w	r3, r0, r8
 80081a6:	fa09 f303 	lsl.w	r3, r9, r3
 80081aa:	4313      	orrs	r3, r2
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	46a2      	mov	sl, r4
 80081b0:	e7d2      	b.n	8008158 <_svfiprintf_r+0xa0>
 80081b2:	9b03      	ldr	r3, [sp, #12]
 80081b4:	1d19      	adds	r1, r3, #4
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	9103      	str	r1, [sp, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	bfbb      	ittet	lt
 80081be:	425b      	neglt	r3, r3
 80081c0:	f042 0202 	orrlt.w	r2, r2, #2
 80081c4:	9307      	strge	r3, [sp, #28]
 80081c6:	9307      	strlt	r3, [sp, #28]
 80081c8:	bfb8      	it	lt
 80081ca:	9204      	strlt	r2, [sp, #16]
 80081cc:	7823      	ldrb	r3, [r4, #0]
 80081ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80081d0:	d10a      	bne.n	80081e8 <_svfiprintf_r+0x130>
 80081d2:	7863      	ldrb	r3, [r4, #1]
 80081d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80081d6:	d132      	bne.n	800823e <_svfiprintf_r+0x186>
 80081d8:	9b03      	ldr	r3, [sp, #12]
 80081da:	1d1a      	adds	r2, r3, #4
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	9203      	str	r2, [sp, #12]
 80081e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081e4:	3402      	adds	r4, #2
 80081e6:	9305      	str	r3, [sp, #20]
 80081e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082ac <_svfiprintf_r+0x1f4>
 80081ec:	7821      	ldrb	r1, [r4, #0]
 80081ee:	2203      	movs	r2, #3
 80081f0:	4650      	mov	r0, sl
 80081f2:	f7f7 fff5 	bl	80001e0 <memchr>
 80081f6:	b138      	cbz	r0, 8008208 <_svfiprintf_r+0x150>
 80081f8:	9b04      	ldr	r3, [sp, #16]
 80081fa:	eba0 000a 	sub.w	r0, r0, sl
 80081fe:	2240      	movs	r2, #64	@ 0x40
 8008200:	4082      	lsls	r2, r0
 8008202:	4313      	orrs	r3, r2
 8008204:	3401      	adds	r4, #1
 8008206:	9304      	str	r3, [sp, #16]
 8008208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800820c:	4824      	ldr	r0, [pc, #144]	@ (80082a0 <_svfiprintf_r+0x1e8>)
 800820e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008212:	2206      	movs	r2, #6
 8008214:	f7f7 ffe4 	bl	80001e0 <memchr>
 8008218:	2800      	cmp	r0, #0
 800821a:	d036      	beq.n	800828a <_svfiprintf_r+0x1d2>
 800821c:	4b21      	ldr	r3, [pc, #132]	@ (80082a4 <_svfiprintf_r+0x1ec>)
 800821e:	bb1b      	cbnz	r3, 8008268 <_svfiprintf_r+0x1b0>
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	3307      	adds	r3, #7
 8008224:	f023 0307 	bic.w	r3, r3, #7
 8008228:	3308      	adds	r3, #8
 800822a:	9303      	str	r3, [sp, #12]
 800822c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822e:	4433      	add	r3, r6
 8008230:	9309      	str	r3, [sp, #36]	@ 0x24
 8008232:	e76a      	b.n	800810a <_svfiprintf_r+0x52>
 8008234:	fb0c 3202 	mla	r2, ip, r2, r3
 8008238:	460c      	mov	r4, r1
 800823a:	2001      	movs	r0, #1
 800823c:	e7a8      	b.n	8008190 <_svfiprintf_r+0xd8>
 800823e:	2300      	movs	r3, #0
 8008240:	3401      	adds	r4, #1
 8008242:	9305      	str	r3, [sp, #20]
 8008244:	4619      	mov	r1, r3
 8008246:	f04f 0c0a 	mov.w	ip, #10
 800824a:	4620      	mov	r0, r4
 800824c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008250:	3a30      	subs	r2, #48	@ 0x30
 8008252:	2a09      	cmp	r2, #9
 8008254:	d903      	bls.n	800825e <_svfiprintf_r+0x1a6>
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0c6      	beq.n	80081e8 <_svfiprintf_r+0x130>
 800825a:	9105      	str	r1, [sp, #20]
 800825c:	e7c4      	b.n	80081e8 <_svfiprintf_r+0x130>
 800825e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008262:	4604      	mov	r4, r0
 8008264:	2301      	movs	r3, #1
 8008266:	e7f0      	b.n	800824a <_svfiprintf_r+0x192>
 8008268:	ab03      	add	r3, sp, #12
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	462a      	mov	r2, r5
 800826e:	4b0e      	ldr	r3, [pc, #56]	@ (80082a8 <_svfiprintf_r+0x1f0>)
 8008270:	a904      	add	r1, sp, #16
 8008272:	4638      	mov	r0, r7
 8008274:	f3af 8000 	nop.w
 8008278:	1c42      	adds	r2, r0, #1
 800827a:	4606      	mov	r6, r0
 800827c:	d1d6      	bne.n	800822c <_svfiprintf_r+0x174>
 800827e:	89ab      	ldrh	r3, [r5, #12]
 8008280:	065b      	lsls	r3, r3, #25
 8008282:	f53f af2d 	bmi.w	80080e0 <_svfiprintf_r+0x28>
 8008286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008288:	e72c      	b.n	80080e4 <_svfiprintf_r+0x2c>
 800828a:	ab03      	add	r3, sp, #12
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	462a      	mov	r2, r5
 8008290:	4b05      	ldr	r3, [pc, #20]	@ (80082a8 <_svfiprintf_r+0x1f0>)
 8008292:	a904      	add	r1, sp, #16
 8008294:	4638      	mov	r0, r7
 8008296:	f000 f879 	bl	800838c <_printf_i>
 800829a:	e7ed      	b.n	8008278 <_svfiprintf_r+0x1c0>
 800829c:	08009119 	.word	0x08009119
 80082a0:	08009123 	.word	0x08009123
 80082a4:	00000000 	.word	0x00000000
 80082a8:	08008001 	.word	0x08008001
 80082ac:	0800911f 	.word	0x0800911f

080082b0 <_printf_common>:
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	4616      	mov	r6, r2
 80082b6:	4698      	mov	r8, r3
 80082b8:	688a      	ldr	r2, [r1, #8]
 80082ba:	690b      	ldr	r3, [r1, #16]
 80082bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082c0:	4293      	cmp	r3, r2
 80082c2:	bfb8      	it	lt
 80082c4:	4613      	movlt	r3, r2
 80082c6:	6033      	str	r3, [r6, #0]
 80082c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082cc:	4607      	mov	r7, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	b10a      	cbz	r2, 80082d6 <_printf_common+0x26>
 80082d2:	3301      	adds	r3, #1
 80082d4:	6033      	str	r3, [r6, #0]
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	0699      	lsls	r1, r3, #26
 80082da:	bf42      	ittt	mi
 80082dc:	6833      	ldrmi	r3, [r6, #0]
 80082de:	3302      	addmi	r3, #2
 80082e0:	6033      	strmi	r3, [r6, #0]
 80082e2:	6825      	ldr	r5, [r4, #0]
 80082e4:	f015 0506 	ands.w	r5, r5, #6
 80082e8:	d106      	bne.n	80082f8 <_printf_common+0x48>
 80082ea:	f104 0a19 	add.w	sl, r4, #25
 80082ee:	68e3      	ldr	r3, [r4, #12]
 80082f0:	6832      	ldr	r2, [r6, #0]
 80082f2:	1a9b      	subs	r3, r3, r2
 80082f4:	42ab      	cmp	r3, r5
 80082f6:	dc26      	bgt.n	8008346 <_printf_common+0x96>
 80082f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082fc:	6822      	ldr	r2, [r4, #0]
 80082fe:	3b00      	subs	r3, #0
 8008300:	bf18      	it	ne
 8008302:	2301      	movne	r3, #1
 8008304:	0692      	lsls	r2, r2, #26
 8008306:	d42b      	bmi.n	8008360 <_printf_common+0xb0>
 8008308:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800830c:	4641      	mov	r1, r8
 800830e:	4638      	mov	r0, r7
 8008310:	47c8      	blx	r9
 8008312:	3001      	adds	r0, #1
 8008314:	d01e      	beq.n	8008354 <_printf_common+0xa4>
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	6922      	ldr	r2, [r4, #16]
 800831a:	f003 0306 	and.w	r3, r3, #6
 800831e:	2b04      	cmp	r3, #4
 8008320:	bf02      	ittt	eq
 8008322:	68e5      	ldreq	r5, [r4, #12]
 8008324:	6833      	ldreq	r3, [r6, #0]
 8008326:	1aed      	subeq	r5, r5, r3
 8008328:	68a3      	ldr	r3, [r4, #8]
 800832a:	bf0c      	ite	eq
 800832c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008330:	2500      	movne	r5, #0
 8008332:	4293      	cmp	r3, r2
 8008334:	bfc4      	itt	gt
 8008336:	1a9b      	subgt	r3, r3, r2
 8008338:	18ed      	addgt	r5, r5, r3
 800833a:	2600      	movs	r6, #0
 800833c:	341a      	adds	r4, #26
 800833e:	42b5      	cmp	r5, r6
 8008340:	d11a      	bne.n	8008378 <_printf_common+0xc8>
 8008342:	2000      	movs	r0, #0
 8008344:	e008      	b.n	8008358 <_printf_common+0xa8>
 8008346:	2301      	movs	r3, #1
 8008348:	4652      	mov	r2, sl
 800834a:	4641      	mov	r1, r8
 800834c:	4638      	mov	r0, r7
 800834e:	47c8      	blx	r9
 8008350:	3001      	adds	r0, #1
 8008352:	d103      	bne.n	800835c <_printf_common+0xac>
 8008354:	f04f 30ff 	mov.w	r0, #4294967295
 8008358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835c:	3501      	adds	r5, #1
 800835e:	e7c6      	b.n	80082ee <_printf_common+0x3e>
 8008360:	18e1      	adds	r1, r4, r3
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	2030      	movs	r0, #48	@ 0x30
 8008366:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800836a:	4422      	add	r2, r4
 800836c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008370:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008374:	3302      	adds	r3, #2
 8008376:	e7c7      	b.n	8008308 <_printf_common+0x58>
 8008378:	2301      	movs	r3, #1
 800837a:	4622      	mov	r2, r4
 800837c:	4641      	mov	r1, r8
 800837e:	4638      	mov	r0, r7
 8008380:	47c8      	blx	r9
 8008382:	3001      	adds	r0, #1
 8008384:	d0e6      	beq.n	8008354 <_printf_common+0xa4>
 8008386:	3601      	adds	r6, #1
 8008388:	e7d9      	b.n	800833e <_printf_common+0x8e>
	...

0800838c <_printf_i>:
 800838c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008390:	7e0f      	ldrb	r7, [r1, #24]
 8008392:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008394:	2f78      	cmp	r7, #120	@ 0x78
 8008396:	4691      	mov	r9, r2
 8008398:	4680      	mov	r8, r0
 800839a:	460c      	mov	r4, r1
 800839c:	469a      	mov	sl, r3
 800839e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083a2:	d807      	bhi.n	80083b4 <_printf_i+0x28>
 80083a4:	2f62      	cmp	r7, #98	@ 0x62
 80083a6:	d80a      	bhi.n	80083be <_printf_i+0x32>
 80083a8:	2f00      	cmp	r7, #0
 80083aa:	f000 80d2 	beq.w	8008552 <_printf_i+0x1c6>
 80083ae:	2f58      	cmp	r7, #88	@ 0x58
 80083b0:	f000 80b9 	beq.w	8008526 <_printf_i+0x19a>
 80083b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083bc:	e03a      	b.n	8008434 <_printf_i+0xa8>
 80083be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083c2:	2b15      	cmp	r3, #21
 80083c4:	d8f6      	bhi.n	80083b4 <_printf_i+0x28>
 80083c6:	a101      	add	r1, pc, #4	@ (adr r1, 80083cc <_printf_i+0x40>)
 80083c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083cc:	08008425 	.word	0x08008425
 80083d0:	08008439 	.word	0x08008439
 80083d4:	080083b5 	.word	0x080083b5
 80083d8:	080083b5 	.word	0x080083b5
 80083dc:	080083b5 	.word	0x080083b5
 80083e0:	080083b5 	.word	0x080083b5
 80083e4:	08008439 	.word	0x08008439
 80083e8:	080083b5 	.word	0x080083b5
 80083ec:	080083b5 	.word	0x080083b5
 80083f0:	080083b5 	.word	0x080083b5
 80083f4:	080083b5 	.word	0x080083b5
 80083f8:	08008539 	.word	0x08008539
 80083fc:	08008463 	.word	0x08008463
 8008400:	080084f3 	.word	0x080084f3
 8008404:	080083b5 	.word	0x080083b5
 8008408:	080083b5 	.word	0x080083b5
 800840c:	0800855b 	.word	0x0800855b
 8008410:	080083b5 	.word	0x080083b5
 8008414:	08008463 	.word	0x08008463
 8008418:	080083b5 	.word	0x080083b5
 800841c:	080083b5 	.word	0x080083b5
 8008420:	080084fb 	.word	0x080084fb
 8008424:	6833      	ldr	r3, [r6, #0]
 8008426:	1d1a      	adds	r2, r3, #4
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6032      	str	r2, [r6, #0]
 800842c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008430:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008434:	2301      	movs	r3, #1
 8008436:	e09d      	b.n	8008574 <_printf_i+0x1e8>
 8008438:	6833      	ldr	r3, [r6, #0]
 800843a:	6820      	ldr	r0, [r4, #0]
 800843c:	1d19      	adds	r1, r3, #4
 800843e:	6031      	str	r1, [r6, #0]
 8008440:	0606      	lsls	r6, r0, #24
 8008442:	d501      	bpl.n	8008448 <_printf_i+0xbc>
 8008444:	681d      	ldr	r5, [r3, #0]
 8008446:	e003      	b.n	8008450 <_printf_i+0xc4>
 8008448:	0645      	lsls	r5, r0, #25
 800844a:	d5fb      	bpl.n	8008444 <_printf_i+0xb8>
 800844c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008450:	2d00      	cmp	r5, #0
 8008452:	da03      	bge.n	800845c <_printf_i+0xd0>
 8008454:	232d      	movs	r3, #45	@ 0x2d
 8008456:	426d      	negs	r5, r5
 8008458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800845c:	4859      	ldr	r0, [pc, #356]	@ (80085c4 <_printf_i+0x238>)
 800845e:	230a      	movs	r3, #10
 8008460:	e011      	b.n	8008486 <_printf_i+0xfa>
 8008462:	6821      	ldr	r1, [r4, #0]
 8008464:	6833      	ldr	r3, [r6, #0]
 8008466:	0608      	lsls	r0, r1, #24
 8008468:	f853 5b04 	ldr.w	r5, [r3], #4
 800846c:	d402      	bmi.n	8008474 <_printf_i+0xe8>
 800846e:	0649      	lsls	r1, r1, #25
 8008470:	bf48      	it	mi
 8008472:	b2ad      	uxthmi	r5, r5
 8008474:	2f6f      	cmp	r7, #111	@ 0x6f
 8008476:	4853      	ldr	r0, [pc, #332]	@ (80085c4 <_printf_i+0x238>)
 8008478:	6033      	str	r3, [r6, #0]
 800847a:	bf14      	ite	ne
 800847c:	230a      	movne	r3, #10
 800847e:	2308      	moveq	r3, #8
 8008480:	2100      	movs	r1, #0
 8008482:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008486:	6866      	ldr	r6, [r4, #4]
 8008488:	60a6      	str	r6, [r4, #8]
 800848a:	2e00      	cmp	r6, #0
 800848c:	bfa2      	ittt	ge
 800848e:	6821      	ldrge	r1, [r4, #0]
 8008490:	f021 0104 	bicge.w	r1, r1, #4
 8008494:	6021      	strge	r1, [r4, #0]
 8008496:	b90d      	cbnz	r5, 800849c <_printf_i+0x110>
 8008498:	2e00      	cmp	r6, #0
 800849a:	d04b      	beq.n	8008534 <_printf_i+0x1a8>
 800849c:	4616      	mov	r6, r2
 800849e:	fbb5 f1f3 	udiv	r1, r5, r3
 80084a2:	fb03 5711 	mls	r7, r3, r1, r5
 80084a6:	5dc7      	ldrb	r7, [r0, r7]
 80084a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084ac:	462f      	mov	r7, r5
 80084ae:	42bb      	cmp	r3, r7
 80084b0:	460d      	mov	r5, r1
 80084b2:	d9f4      	bls.n	800849e <_printf_i+0x112>
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d10b      	bne.n	80084d0 <_printf_i+0x144>
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	07df      	lsls	r7, r3, #31
 80084bc:	d508      	bpl.n	80084d0 <_printf_i+0x144>
 80084be:	6923      	ldr	r3, [r4, #16]
 80084c0:	6861      	ldr	r1, [r4, #4]
 80084c2:	4299      	cmp	r1, r3
 80084c4:	bfde      	ittt	le
 80084c6:	2330      	movle	r3, #48	@ 0x30
 80084c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084d0:	1b92      	subs	r2, r2, r6
 80084d2:	6122      	str	r2, [r4, #16]
 80084d4:	f8cd a000 	str.w	sl, [sp]
 80084d8:	464b      	mov	r3, r9
 80084da:	aa03      	add	r2, sp, #12
 80084dc:	4621      	mov	r1, r4
 80084de:	4640      	mov	r0, r8
 80084e0:	f7ff fee6 	bl	80082b0 <_printf_common>
 80084e4:	3001      	adds	r0, #1
 80084e6:	d14a      	bne.n	800857e <_printf_i+0x1f2>
 80084e8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ec:	b004      	add	sp, #16
 80084ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	f043 0320 	orr.w	r3, r3, #32
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	4833      	ldr	r0, [pc, #204]	@ (80085c8 <_printf_i+0x23c>)
 80084fc:	2778      	movs	r7, #120	@ 0x78
 80084fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	6831      	ldr	r1, [r6, #0]
 8008506:	061f      	lsls	r7, r3, #24
 8008508:	f851 5b04 	ldr.w	r5, [r1], #4
 800850c:	d402      	bmi.n	8008514 <_printf_i+0x188>
 800850e:	065f      	lsls	r7, r3, #25
 8008510:	bf48      	it	mi
 8008512:	b2ad      	uxthmi	r5, r5
 8008514:	6031      	str	r1, [r6, #0]
 8008516:	07d9      	lsls	r1, r3, #31
 8008518:	bf44      	itt	mi
 800851a:	f043 0320 	orrmi.w	r3, r3, #32
 800851e:	6023      	strmi	r3, [r4, #0]
 8008520:	b11d      	cbz	r5, 800852a <_printf_i+0x19e>
 8008522:	2310      	movs	r3, #16
 8008524:	e7ac      	b.n	8008480 <_printf_i+0xf4>
 8008526:	4827      	ldr	r0, [pc, #156]	@ (80085c4 <_printf_i+0x238>)
 8008528:	e7e9      	b.n	80084fe <_printf_i+0x172>
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	f023 0320 	bic.w	r3, r3, #32
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	e7f6      	b.n	8008522 <_printf_i+0x196>
 8008534:	4616      	mov	r6, r2
 8008536:	e7bd      	b.n	80084b4 <_printf_i+0x128>
 8008538:	6833      	ldr	r3, [r6, #0]
 800853a:	6825      	ldr	r5, [r4, #0]
 800853c:	6961      	ldr	r1, [r4, #20]
 800853e:	1d18      	adds	r0, r3, #4
 8008540:	6030      	str	r0, [r6, #0]
 8008542:	062e      	lsls	r6, r5, #24
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	d501      	bpl.n	800854c <_printf_i+0x1c0>
 8008548:	6019      	str	r1, [r3, #0]
 800854a:	e002      	b.n	8008552 <_printf_i+0x1c6>
 800854c:	0668      	lsls	r0, r5, #25
 800854e:	d5fb      	bpl.n	8008548 <_printf_i+0x1bc>
 8008550:	8019      	strh	r1, [r3, #0]
 8008552:	2300      	movs	r3, #0
 8008554:	6123      	str	r3, [r4, #16]
 8008556:	4616      	mov	r6, r2
 8008558:	e7bc      	b.n	80084d4 <_printf_i+0x148>
 800855a:	6833      	ldr	r3, [r6, #0]
 800855c:	1d1a      	adds	r2, r3, #4
 800855e:	6032      	str	r2, [r6, #0]
 8008560:	681e      	ldr	r6, [r3, #0]
 8008562:	6862      	ldr	r2, [r4, #4]
 8008564:	2100      	movs	r1, #0
 8008566:	4630      	mov	r0, r6
 8008568:	f7f7 fe3a 	bl	80001e0 <memchr>
 800856c:	b108      	cbz	r0, 8008572 <_printf_i+0x1e6>
 800856e:	1b80      	subs	r0, r0, r6
 8008570:	6060      	str	r0, [r4, #4]
 8008572:	6863      	ldr	r3, [r4, #4]
 8008574:	6123      	str	r3, [r4, #16]
 8008576:	2300      	movs	r3, #0
 8008578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800857c:	e7aa      	b.n	80084d4 <_printf_i+0x148>
 800857e:	6923      	ldr	r3, [r4, #16]
 8008580:	4632      	mov	r2, r6
 8008582:	4649      	mov	r1, r9
 8008584:	4640      	mov	r0, r8
 8008586:	47d0      	blx	sl
 8008588:	3001      	adds	r0, #1
 800858a:	d0ad      	beq.n	80084e8 <_printf_i+0x15c>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	079b      	lsls	r3, r3, #30
 8008590:	d413      	bmi.n	80085ba <_printf_i+0x22e>
 8008592:	68e0      	ldr	r0, [r4, #12]
 8008594:	9b03      	ldr	r3, [sp, #12]
 8008596:	4298      	cmp	r0, r3
 8008598:	bfb8      	it	lt
 800859a:	4618      	movlt	r0, r3
 800859c:	e7a6      	b.n	80084ec <_printf_i+0x160>
 800859e:	2301      	movs	r3, #1
 80085a0:	4632      	mov	r2, r6
 80085a2:	4649      	mov	r1, r9
 80085a4:	4640      	mov	r0, r8
 80085a6:	47d0      	blx	sl
 80085a8:	3001      	adds	r0, #1
 80085aa:	d09d      	beq.n	80084e8 <_printf_i+0x15c>
 80085ac:	3501      	adds	r5, #1
 80085ae:	68e3      	ldr	r3, [r4, #12]
 80085b0:	9903      	ldr	r1, [sp, #12]
 80085b2:	1a5b      	subs	r3, r3, r1
 80085b4:	42ab      	cmp	r3, r5
 80085b6:	dcf2      	bgt.n	800859e <_printf_i+0x212>
 80085b8:	e7eb      	b.n	8008592 <_printf_i+0x206>
 80085ba:	2500      	movs	r5, #0
 80085bc:	f104 0619 	add.w	r6, r4, #25
 80085c0:	e7f5      	b.n	80085ae <_printf_i+0x222>
 80085c2:	bf00      	nop
 80085c4:	0800912a 	.word	0x0800912a
 80085c8:	0800913b 	.word	0x0800913b

080085cc <memmove>:
 80085cc:	4288      	cmp	r0, r1
 80085ce:	b510      	push	{r4, lr}
 80085d0:	eb01 0402 	add.w	r4, r1, r2
 80085d4:	d902      	bls.n	80085dc <memmove+0x10>
 80085d6:	4284      	cmp	r4, r0
 80085d8:	4623      	mov	r3, r4
 80085da:	d807      	bhi.n	80085ec <memmove+0x20>
 80085dc:	1e43      	subs	r3, r0, #1
 80085de:	42a1      	cmp	r1, r4
 80085e0:	d008      	beq.n	80085f4 <memmove+0x28>
 80085e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085ea:	e7f8      	b.n	80085de <memmove+0x12>
 80085ec:	4402      	add	r2, r0
 80085ee:	4601      	mov	r1, r0
 80085f0:	428a      	cmp	r2, r1
 80085f2:	d100      	bne.n	80085f6 <memmove+0x2a>
 80085f4:	bd10      	pop	{r4, pc}
 80085f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085fe:	e7f7      	b.n	80085f0 <memmove+0x24>

08008600 <_sbrk_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4d06      	ldr	r5, [pc, #24]	@ (800861c <_sbrk_r+0x1c>)
 8008604:	2300      	movs	r3, #0
 8008606:	4604      	mov	r4, r0
 8008608:	4608      	mov	r0, r1
 800860a:	602b      	str	r3, [r5, #0]
 800860c:	f7fa fcba 	bl	8002f84 <_sbrk>
 8008610:	1c43      	adds	r3, r0, #1
 8008612:	d102      	bne.n	800861a <_sbrk_r+0x1a>
 8008614:	682b      	ldr	r3, [r5, #0]
 8008616:	b103      	cbz	r3, 800861a <_sbrk_r+0x1a>
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	bd38      	pop	{r3, r4, r5, pc}
 800861c:	20000940 	.word	0x20000940

08008620 <_realloc_r>:
 8008620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008624:	4680      	mov	r8, r0
 8008626:	4615      	mov	r5, r2
 8008628:	460c      	mov	r4, r1
 800862a:	b921      	cbnz	r1, 8008636 <_realloc_r+0x16>
 800862c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008630:	4611      	mov	r1, r2
 8008632:	f7ff bc59 	b.w	8007ee8 <_malloc_r>
 8008636:	b92a      	cbnz	r2, 8008644 <_realloc_r+0x24>
 8008638:	f7ff fbea 	bl	8007e10 <_free_r>
 800863c:	2400      	movs	r4, #0
 800863e:	4620      	mov	r0, r4
 8008640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008644:	f000 f81a 	bl	800867c <_malloc_usable_size_r>
 8008648:	4285      	cmp	r5, r0
 800864a:	4606      	mov	r6, r0
 800864c:	d802      	bhi.n	8008654 <_realloc_r+0x34>
 800864e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008652:	d8f4      	bhi.n	800863e <_realloc_r+0x1e>
 8008654:	4629      	mov	r1, r5
 8008656:	4640      	mov	r0, r8
 8008658:	f7ff fc46 	bl	8007ee8 <_malloc_r>
 800865c:	4607      	mov	r7, r0
 800865e:	2800      	cmp	r0, #0
 8008660:	d0ec      	beq.n	800863c <_realloc_r+0x1c>
 8008662:	42b5      	cmp	r5, r6
 8008664:	462a      	mov	r2, r5
 8008666:	4621      	mov	r1, r4
 8008668:	bf28      	it	cs
 800866a:	4632      	movcs	r2, r6
 800866c:	f7ff fbc2 	bl	8007df4 <memcpy>
 8008670:	4621      	mov	r1, r4
 8008672:	4640      	mov	r0, r8
 8008674:	f7ff fbcc 	bl	8007e10 <_free_r>
 8008678:	463c      	mov	r4, r7
 800867a:	e7e0      	b.n	800863e <_realloc_r+0x1e>

0800867c <_malloc_usable_size_r>:
 800867c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008680:	1f18      	subs	r0, r3, #4
 8008682:	2b00      	cmp	r3, #0
 8008684:	bfbc      	itt	lt
 8008686:	580b      	ldrlt	r3, [r1, r0]
 8008688:	18c0      	addlt	r0, r0, r3
 800868a:	4770      	bx	lr

0800868c <_init>:
 800868c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868e:	bf00      	nop
 8008690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008692:	bc08      	pop	{r3}
 8008694:	469e      	mov	lr, r3
 8008696:	4770      	bx	lr

08008698 <_fini>:
 8008698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869a:	bf00      	nop
 800869c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869e:	bc08      	pop	{r3}
 80086a0:	469e      	mov	lr, r3
 80086a2:	4770      	bx	lr
